
modbus_f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009294  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  080093a8  080093a8  000193a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094b8  080094b8  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  080094b8  080094b8  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080094b8  080094b8  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094b8  080094b8  000194b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094bc  080094bc  000194bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  080094c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000080c  200001d8  08009698  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009e4  08009698  000209e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000124ce  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e9e  00000000  00000000  000326cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  00035570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000948  00000000  00000000  00036010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5b0  00000000  00000000  00036958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e25c  00000000  00000000  00050f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086127  00000000  00000000  0005f164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e528b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032d4  00000000  00000000  000e52e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800938c 	.word	0x0800938c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800938c 	.word	0x0800938c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <heart_print>:
unsigned char temp_buff[22]  = "wword\n\n\n\n\n\n\n";

keyboardHID keyboardhid = {0,0,0,0,0,0,0,0};


void heart_print(){
 8000a28:	b5b0      	push	{r4, r5, r7, lr}
 8000a2a:	b08e      	sub	sp, #56	; 0x38
 8000a2c:	af00      	add	r7, sp, #0
    // set output size
    int size = 10;
 8000a2e:	230a      	movs	r3, #10
 8000a30:	623b      	str	r3, [r7, #32]
    for (int x = 0; x < size; x++)
 8000a32:	2300      	movs	r3, #0
 8000a34:	637b      	str	r3, [r7, #52]	; 0x34
 8000a36:	e0a2      	b.n	8000b7e <heart_print+0x156>
    {
        for (int y = 0; y <= 4*size; y++)
 8000a38:	2300      	movs	r3, #0
 8000a3a:	633b      	str	r3, [r7, #48]	; 0x30
 8000a3c:	e08c      	b.n	8000b58 <heart_print+0x130>
        {
            double dist1 = sqrt(pow(x - size, 2) + pow(y - size, 2));
 8000a3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a40:	6a3b      	ldr	r3, [r7, #32]
 8000a42:	1ad3      	subs	r3, r2, r3
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff fcd5 	bl	80003f4 <__aeabi_i2d>
 8000a4a:	f04f 0200 	mov.w	r2, #0
 8000a4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a52:	f007 fcdf 	bl	8008414 <pow>
 8000a56:	4604      	mov	r4, r0
 8000a58:	460d      	mov	r5, r1
 8000a5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000a5c:	6a3b      	ldr	r3, [r7, #32]
 8000a5e:	1ad3      	subs	r3, r2, r3
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff fcc7 	bl	80003f4 <__aeabi_i2d>
 8000a66:	f04f 0200 	mov.w	r2, #0
 8000a6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a6e:	f007 fcd1 	bl	8008414 <pow>
 8000a72:	4602      	mov	r2, r0
 8000a74:	460b      	mov	r3, r1
 8000a76:	4620      	mov	r0, r4
 8000a78:	4629      	mov	r1, r5
 8000a7a:	f7ff fb6f 	bl	800015c <__adddf3>
 8000a7e:	4602      	mov	r2, r0
 8000a80:	460b      	mov	r3, r1
 8000a82:	4610      	mov	r0, r2
 8000a84:	4619      	mov	r1, r3
 8000a86:	f007 fd71 	bl	800856c <sqrt>
 8000a8a:	e9c7 0104 	strd	r0, r1, [r7, #16]
            double dist2 = sqrt(pow(x - size, 2) + pow(y - 3*size, 2));
 8000a8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a90:	6a3b      	ldr	r3, [r7, #32]
 8000a92:	1ad3      	subs	r3, r2, r3
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff fcad 	bl	80003f4 <__aeabi_i2d>
 8000a9a:	f04f 0200 	mov.w	r2, #0
 8000a9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000aa2:	f007 fcb7 	bl	8008414 <pow>
 8000aa6:	4604      	mov	r4, r0
 8000aa8:	460d      	mov	r5, r1
 8000aaa:	6a3b      	ldr	r3, [r7, #32]
 8000aac:	461a      	mov	r2, r3
 8000aae:	009b      	lsls	r3, r3, #2
 8000ab0:	1ad2      	subs	r2, r2, r3
 8000ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ab4:	4413      	add	r3, r2
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff fc9c 	bl	80003f4 <__aeabi_i2d>
 8000abc:	f04f 0200 	mov.w	r2, #0
 8000ac0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ac4:	f007 fca6 	bl	8008414 <pow>
 8000ac8:	4602      	mov	r2, r0
 8000aca:	460b      	mov	r3, r1
 8000acc:	4620      	mov	r0, r4
 8000ace:	4629      	mov	r1, r5
 8000ad0:	f7ff fb44 	bl	800015c <__adddf3>
 8000ad4:	4602      	mov	r2, r0
 8000ad6:	460b      	mov	r3, r1
 8000ad8:	4610      	mov	r0, r2
 8000ada:	4619      	mov	r1, r3
 8000adc:	f007 fd46 	bl	800856c <sqrt>
 8000ae0:	e9c7 0102 	strd	r0, r1, [r7, #8]

            if (dist1 < size + 0.5 || dist2 < size + 0.5) {
 8000ae4:	6a38      	ldr	r0, [r7, #32]
 8000ae6:	f7ff fc85 	bl	80003f4 <__aeabi_i2d>
 8000aea:	f04f 0200 	mov.w	r2, #0
 8000aee:	4b49      	ldr	r3, [pc, #292]	; (8000c14 <heart_print+0x1ec>)
 8000af0:	f7ff fb34 	bl	800015c <__adddf3>
 8000af4:	4602      	mov	r2, r0
 8000af6:	460b      	mov	r3, r1
 8000af8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000afc:	f7ff ff56 	bl	80009ac <__aeabi_dcmplt>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d110      	bne.n	8000b28 <heart_print+0x100>
 8000b06:	6a38      	ldr	r0, [r7, #32]
 8000b08:	f7ff fc74 	bl	80003f4 <__aeabi_i2d>
 8000b0c:	f04f 0200 	mov.w	r2, #0
 8000b10:	4b40      	ldr	r3, [pc, #256]	; (8000c14 <heart_print+0x1ec>)
 8000b12:	f7ff fb23 	bl	800015c <__adddf3>
 8000b16:	4602      	mov	r2, r0
 8000b18:	460b      	mov	r3, r1
 8000b1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000b1e:	f7ff ff45 	bl	80009ac <__aeabi_dcmplt>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d00a      	beq.n	8000b3e <heart_print+0x116>
                printf("o");
 8000b28:	206f      	movs	r0, #111	; 0x6f
 8000b2a:	f006 ffcb 	bl	8007ac4 <putchar>
                unsigned char temp = 'o';
 8000b2e:	236f      	movs	r3, #111	; 0x6f
 8000b30:	71bb      	strb	r3, [r7, #6]
                key_board_send(temp,20);
 8000b32:	79bb      	ldrb	r3, [r7, #6]
 8000b34:	2114      	movs	r1, #20
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 f88e 	bl	8000c58 <key_board_send>
            if (dist1 < size + 0.5 || dist2 < size + 0.5) {
 8000b3c:	e009      	b.n	8000b52 <heart_print+0x12a>
            }
            else {
                printf(" ");
 8000b3e:	2020      	movs	r0, #32
 8000b40:	f006 ffc0 	bl	8007ac4 <putchar>
                unsigned char temp = ' ';
 8000b44:	2320      	movs	r3, #32
 8000b46:	71fb      	strb	r3, [r7, #7]
                key_board_send(temp,20);
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	2114      	movs	r1, #20
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f000 f883 	bl	8000c58 <key_board_send>
        for (int y = 0; y <= 4*size; y++)
 8000b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b54:	3301      	adds	r3, #1
 8000b56:	633b      	str	r3, [r7, #48]	; 0x30
 8000b58:	6a3b      	ldr	r3, [r7, #32]
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	f77f af6d 	ble.w	8000a3e <heart_print+0x16>
            }
        }
        printf("\n");
 8000b64:	200a      	movs	r0, #10
 8000b66:	f006 ffad 	bl	8007ac4 <putchar>
        unsigned char temp = '\n';
 8000b6a:	230a      	movs	r3, #10
 8000b6c:	773b      	strb	r3, [r7, #28]
        key_board_send(temp,20);
 8000b6e:	7f3b      	ldrb	r3, [r7, #28]
 8000b70:	2114      	movs	r1, #20
 8000b72:	4618      	mov	r0, r3
 8000b74:	f000 f870 	bl	8000c58 <key_board_send>
    for (int x = 0; x < size; x++)
 8000b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	637b      	str	r3, [r7, #52]	; 0x34
 8000b7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b80:	6a3b      	ldr	r3, [r7, #32]
 8000b82:	429a      	cmp	r2, r3
 8000b84:	f6ff af58 	blt.w	8000a38 <heart_print+0x10>
    }

    for (int x = 1; x < 2*size; x++)
 8000b88:	2301      	movs	r3, #1
 8000b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b8c:	e039      	b.n	8000c02 <heart_print+0x1da>
    {
        for (int y = 0; y < x; y++) {
 8000b8e:	2300      	movs	r3, #0
 8000b90:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b92:	e00c      	b.n	8000bae <heart_print+0x186>
            printf(" ");
 8000b94:	2020      	movs	r0, #32
 8000b96:	f006 ff95 	bl	8007ac4 <putchar>
            unsigned char temp = ' ';
 8000b9a:	2320      	movs	r3, #32
 8000b9c:	777b      	strb	r3, [r7, #29]
            key_board_send(temp,20);
 8000b9e:	7f7b      	ldrb	r3, [r7, #29]
 8000ba0:	2114      	movs	r1, #20
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f000 f858 	bl	8000c58 <key_board_send>
        for (int y = 0; y < x; y++) {
 8000ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000baa:	3301      	adds	r3, #1
 8000bac:	62bb      	str	r3, [r7, #40]	; 0x28
 8000bae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	dbee      	blt.n	8000b94 <heart_print+0x16c>
        }

        for (int y = 0; y < 4*size + 1 - 2*x; y++) {
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8000bba:	e00c      	b.n	8000bd6 <heart_print+0x1ae>
            printf("o");
 8000bbc:	206f      	movs	r0, #111	; 0x6f
 8000bbe:	f006 ff81 	bl	8007ac4 <putchar>
            unsigned char temp = 'o';
 8000bc2:	236f      	movs	r3, #111	; 0x6f
 8000bc4:	77bb      	strb	r3, [r7, #30]
            key_board_send(temp,20);
 8000bc6:	7fbb      	ldrb	r3, [r7, #30]
 8000bc8:	2114      	movs	r1, #20
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f000 f844 	bl	8000c58 <key_board_send>
        for (int y = 0; y < 4*size + 1 - 2*x; y++) {
 8000bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
 8000bd6:	6a3b      	ldr	r3, [r7, #32]
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	1c5a      	adds	r2, r3, #1
 8000bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000be4:	429a      	cmp	r2, r3
 8000be6:	dbe9      	blt.n	8000bbc <heart_print+0x194>
        }

        printf("\n");
 8000be8:	200a      	movs	r0, #10
 8000bea:	f006 ff6b 	bl	8007ac4 <putchar>
        unsigned char temp = '\n';
 8000bee:	230a      	movs	r3, #10
 8000bf0:	77fb      	strb	r3, [r7, #31]
        key_board_send(temp,20);
 8000bf2:	7ffb      	ldrb	r3, [r7, #31]
 8000bf4:	2114      	movs	r1, #20
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f000 f82e 	bl	8000c58 <key_board_send>
    for (int x = 1; x < 2*size; x++)
 8000bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bfe:	3301      	adds	r3, #1
 8000c00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c02:	6a3b      	ldr	r3, [r7, #32]
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	dbc0      	blt.n	8000b8e <heart_print+0x166>

    }

    return 0;
 8000c0c:	bf00      	nop
}
 8000c0e:	3738      	adds	r7, #56	; 0x38
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bdb0      	pop	{r4, r5, r7, pc}
 8000c14:	3fe00000 	.word	0x3fe00000

08000c18 <kb_send_string>:

void kb_send_string(unsigned char *p,unsigned char lenght, unsigned char delay){
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	460b      	mov	r3, r1
 8000c22:	70fb      	strb	r3, [r7, #3]
 8000c24:	4613      	mov	r3, r2
 8000c26:	70bb      	strb	r3, [r7, #2]
	for(unsigned char i = 0 ; i<lenght; i++){
 8000c28:	2300      	movs	r3, #0
 8000c2a:	73fb      	strb	r3, [r7, #15]
 8000c2c:	e00b      	b.n	8000c46 <kb_send_string+0x2e>
		key_board_send(p[i],delay);
 8000c2e:	7bfb      	ldrb	r3, [r7, #15]
 8000c30:	687a      	ldr	r2, [r7, #4]
 8000c32:	4413      	add	r3, r2
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	78ba      	ldrb	r2, [r7, #2]
 8000c38:	4611      	mov	r1, r2
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 f80c 	bl	8000c58 <key_board_send>
	for(unsigned char i = 0 ; i<lenght; i++){
 8000c40:	7bfb      	ldrb	r3, [r7, #15]
 8000c42:	3301      	adds	r3, #1
 8000c44:	73fb      	strb	r3, [r7, #15]
 8000c46:	7bfa      	ldrb	r2, [r7, #15]
 8000c48:	78fb      	ldrb	r3, [r7, #3]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d3ef      	bcc.n	8000c2e <kb_send_string+0x16>
	}
}
 8000c4e:	bf00      	nop
 8000c50:	bf00      	nop
 8000c52:	3710      	adds	r7, #16
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <key_board_send>:
void key_board_send(unsigned char key,unsigned char delay){
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	460a      	mov	r2, r1
 8000c62:	71fb      	strb	r3, [r7, #7]
 8000c64:	4613      	mov	r3, r2
 8000c66:	71bb      	strb	r3, [r7, #6]
	switch (key){
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	3b0a      	subs	r3, #10
 8000c6c:	2b75      	cmp	r3, #117	; 0x75
 8000c6e:	f200 818b 	bhi.w	8000f88 <key_board_send+0x330>
 8000c72:	a201      	add	r2, pc, #4	; (adr r2, 8000c78 <key_board_send+0x20>)
 8000c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c78:	08000f71 	.word	0x08000f71
 8000c7c:	08000f89 	.word	0x08000f89
 8000c80:	08000f89 	.word	0x08000f89
 8000c84:	08000f89 	.word	0x08000f89
 8000c88:	08000f89 	.word	0x08000f89
 8000c8c:	08000f89 	.word	0x08000f89
 8000c90:	08000f89 	.word	0x08000f89
 8000c94:	08000f89 	.word	0x08000f89
 8000c98:	08000f89 	.word	0x08000f89
 8000c9c:	08000f89 	.word	0x08000f89
 8000ca0:	08000f89 	.word	0x08000f89
 8000ca4:	08000f89 	.word	0x08000f89
 8000ca8:	08000f89 	.word	0x08000f89
 8000cac:	08000f89 	.word	0x08000f89
 8000cb0:	08000f89 	.word	0x08000f89
 8000cb4:	08000f89 	.word	0x08000f89
 8000cb8:	08000f89 	.word	0x08000f89
 8000cbc:	08000f89 	.word	0x08000f89
 8000cc0:	08000f89 	.word	0x08000f89
 8000cc4:	08000f89 	.word	0x08000f89
 8000cc8:	08000f89 	.word	0x08000f89
 8000ccc:	08000f89 	.word	0x08000f89
 8000cd0:	08000f79 	.word	0x08000f79
 8000cd4:	08000f89 	.word	0x08000f89
 8000cd8:	08000f89 	.word	0x08000f89
 8000cdc:	08000f89 	.word	0x08000f89
 8000ce0:	08000f89 	.word	0x08000f89
 8000ce4:	08000f89 	.word	0x08000f89
 8000ce8:	08000f89 	.word	0x08000f89
 8000cec:	08000f89 	.word	0x08000f89
 8000cf0:	08000f89 	.word	0x08000f89
 8000cf4:	08000f89 	.word	0x08000f89
 8000cf8:	08000f89 	.word	0x08000f89
 8000cfc:	08000f89 	.word	0x08000f89
 8000d00:	08000f89 	.word	0x08000f89
 8000d04:	08000f89 	.word	0x08000f89
 8000d08:	08000f89 	.word	0x08000f89
 8000d0c:	08000f89 	.word	0x08000f89
 8000d10:	08000f21 	.word	0x08000f21
 8000d14:	08000f29 	.word	0x08000f29
 8000d18:	08000f31 	.word	0x08000f31
 8000d1c:	08000f39 	.word	0x08000f39
 8000d20:	08000f41 	.word	0x08000f41
 8000d24:	08000f49 	.word	0x08000f49
 8000d28:	08000f51 	.word	0x08000f51
 8000d2c:	08000f59 	.word	0x08000f59
 8000d30:	08000f61 	.word	0x08000f61
 8000d34:	08000f69 	.word	0x08000f69
 8000d38:	08000f89 	.word	0x08000f89
 8000d3c:	08000f89 	.word	0x08000f89
 8000d40:	08000f89 	.word	0x08000f89
 8000d44:	08000f89 	.word	0x08000f89
 8000d48:	08000f89 	.word	0x08000f89
 8000d4c:	08000f89 	.word	0x08000f89
 8000d50:	08000f89 	.word	0x08000f89
 8000d54:	08000f89 	.word	0x08000f89
 8000d58:	08000f89 	.word	0x08000f89
 8000d5c:	08000f89 	.word	0x08000f89
 8000d60:	08000f89 	.word	0x08000f89
 8000d64:	08000f89 	.word	0x08000f89
 8000d68:	08000f89 	.word	0x08000f89
 8000d6c:	08000f89 	.word	0x08000f89
 8000d70:	08000f89 	.word	0x08000f89
 8000d74:	08000f89 	.word	0x08000f89
 8000d78:	08000f89 	.word	0x08000f89
 8000d7c:	08000f89 	.word	0x08000f89
 8000d80:	08000f89 	.word	0x08000f89
 8000d84:	08000f89 	.word	0x08000f89
 8000d88:	08000f89 	.word	0x08000f89
 8000d8c:	08000f89 	.word	0x08000f89
 8000d90:	08000f89 	.word	0x08000f89
 8000d94:	08000f89 	.word	0x08000f89
 8000d98:	08000f89 	.word	0x08000f89
 8000d9c:	08000f89 	.word	0x08000f89
 8000da0:	08000f89 	.word	0x08000f89
 8000da4:	08000f89 	.word	0x08000f89
 8000da8:	08000f89 	.word	0x08000f89
 8000dac:	08000f89 	.word	0x08000f89
 8000db0:	08000f89 	.word	0x08000f89
 8000db4:	08000f89 	.word	0x08000f89
 8000db8:	08000f89 	.word	0x08000f89
 8000dbc:	08000f89 	.word	0x08000f89
 8000dc0:	08000f89 	.word	0x08000f89
 8000dc4:	08000f89 	.word	0x08000f89
 8000dc8:	08000f89 	.word	0x08000f89
 8000dcc:	08000f89 	.word	0x08000f89
 8000dd0:	08000f89 	.word	0x08000f89
 8000dd4:	08000e51 	.word	0x08000e51
 8000dd8:	08000e59 	.word	0x08000e59
 8000ddc:	08000e61 	.word	0x08000e61
 8000de0:	08000e69 	.word	0x08000e69
 8000de4:	08000e71 	.word	0x08000e71
 8000de8:	08000e79 	.word	0x08000e79
 8000dec:	08000e81 	.word	0x08000e81
 8000df0:	08000e89 	.word	0x08000e89
 8000df4:	08000e91 	.word	0x08000e91
 8000df8:	08000e99 	.word	0x08000e99
 8000dfc:	08000ea1 	.word	0x08000ea1
 8000e00:	08000ea9 	.word	0x08000ea9
 8000e04:	08000eb1 	.word	0x08000eb1
 8000e08:	08000eb9 	.word	0x08000eb9
 8000e0c:	08000ec1 	.word	0x08000ec1
 8000e10:	08000ec9 	.word	0x08000ec9
 8000e14:	08000ed1 	.word	0x08000ed1
 8000e18:	08000ed9 	.word	0x08000ed9
 8000e1c:	08000ee1 	.word	0x08000ee1
 8000e20:	08000ee9 	.word	0x08000ee9
 8000e24:	08000ef1 	.word	0x08000ef1
 8000e28:	08000ef9 	.word	0x08000ef9
 8000e2c:	08000f01 	.word	0x08000f01
 8000e30:	08000f09 	.word	0x08000f09
 8000e34:	08000f11 	.word	0x08000f11
 8000e38:	08000f19 	.word	0x08000f19
 8000e3c:	08000f89 	.word	0x08000f89
 8000e40:	08000f89 	.word	0x08000f89
 8000e44:	08000f89 	.word	0x08000f89
 8000e48:	08000f89 	.word	0x08000f89
 8000e4c:	08000f81 	.word	0x08000f81
			case 'a':
			  keyboardhid.KEYCODE1 = Keyboard_a;  // press 'a'
 8000e50:	4b5a      	ldr	r3, [pc, #360]	; (8000fbc <key_board_send+0x364>)
 8000e52:	2204      	movs	r2, #4
 8000e54:	709a      	strb	r2, [r3, #2]
			    break;
 8000e56:	e098      	b.n	8000f8a <key_board_send+0x332>
			case 'b':
				keyboardhid.KEYCODE1 = Keyboard_b;  // press 'a'
 8000e58:	4b58      	ldr	r3, [pc, #352]	; (8000fbc <key_board_send+0x364>)
 8000e5a:	2205      	movs	r2, #5
 8000e5c:	709a      	strb	r2, [r3, #2]
				break;
 8000e5e:	e094      	b.n	8000f8a <key_board_send+0x332>
			case 'c':
				keyboardhid.KEYCODE1 = Keyboard_c;  // press 'a'
 8000e60:	4b56      	ldr	r3, [pc, #344]	; (8000fbc <key_board_send+0x364>)
 8000e62:	2206      	movs	r2, #6
 8000e64:	709a      	strb	r2, [r3, #2]
				break;
 8000e66:	e090      	b.n	8000f8a <key_board_send+0x332>
			case 'd':
				keyboardhid.KEYCODE1 = Keyboard_d;  // press 'a'
 8000e68:	4b54      	ldr	r3, [pc, #336]	; (8000fbc <key_board_send+0x364>)
 8000e6a:	2207      	movs	r2, #7
 8000e6c:	709a      	strb	r2, [r3, #2]
			    break;
 8000e6e:	e08c      	b.n	8000f8a <key_board_send+0x332>
			case 'e':
				keyboardhid.KEYCODE1 = Keyboard_e;  // press 'a'
 8000e70:	4b52      	ldr	r3, [pc, #328]	; (8000fbc <key_board_send+0x364>)
 8000e72:	2208      	movs	r2, #8
 8000e74:	709a      	strb	r2, [r3, #2]
			    break;
 8000e76:	e088      	b.n	8000f8a <key_board_send+0x332>
			case 'f':
				keyboardhid.KEYCODE1 = Keyboard_f;  // press 'a'
 8000e78:	4b50      	ldr	r3, [pc, #320]	; (8000fbc <key_board_send+0x364>)
 8000e7a:	2209      	movs	r2, #9
 8000e7c:	709a      	strb	r2, [r3, #2]
			    break;
 8000e7e:	e084      	b.n	8000f8a <key_board_send+0x332>
			case 'g':
				keyboardhid.KEYCODE1 = Keyboard_g;  // press 'a'
 8000e80:	4b4e      	ldr	r3, [pc, #312]	; (8000fbc <key_board_send+0x364>)
 8000e82:	220a      	movs	r2, #10
 8000e84:	709a      	strb	r2, [r3, #2]
			    break;
 8000e86:	e080      	b.n	8000f8a <key_board_send+0x332>
			case 'h':
				keyboardhid.KEYCODE1 = Keyboard_h;  // press 'a'
 8000e88:	4b4c      	ldr	r3, [pc, #304]	; (8000fbc <key_board_send+0x364>)
 8000e8a:	220b      	movs	r2, #11
 8000e8c:	709a      	strb	r2, [r3, #2]
			    break;
 8000e8e:	e07c      	b.n	8000f8a <key_board_send+0x332>
			case 'i':
				keyboardhid.KEYCODE1 = Keyboard_i;  // press 'a'
 8000e90:	4b4a      	ldr	r3, [pc, #296]	; (8000fbc <key_board_send+0x364>)
 8000e92:	220c      	movs	r2, #12
 8000e94:	709a      	strb	r2, [r3, #2]
			    break;
 8000e96:	e078      	b.n	8000f8a <key_board_send+0x332>
			case 'j':
				keyboardhid.KEYCODE1 = Keyboard_j;  // press 'a'
 8000e98:	4b48      	ldr	r3, [pc, #288]	; (8000fbc <key_board_send+0x364>)
 8000e9a:	220d      	movs	r2, #13
 8000e9c:	709a      	strb	r2, [r3, #2]
			    break;
 8000e9e:	e074      	b.n	8000f8a <key_board_send+0x332>
			case 'k':
				keyboardhid.KEYCODE1 = Keyboard_k;  // press 'a'
 8000ea0:	4b46      	ldr	r3, [pc, #280]	; (8000fbc <key_board_send+0x364>)
 8000ea2:	220e      	movs	r2, #14
 8000ea4:	709a      	strb	r2, [r3, #2]
			    break;
 8000ea6:	e070      	b.n	8000f8a <key_board_send+0x332>
			case 'l':
				keyboardhid.KEYCODE1 = Keyboard_l;  // press 'a'
 8000ea8:	4b44      	ldr	r3, [pc, #272]	; (8000fbc <key_board_send+0x364>)
 8000eaa:	220f      	movs	r2, #15
 8000eac:	709a      	strb	r2, [r3, #2]
			    break;
 8000eae:	e06c      	b.n	8000f8a <key_board_send+0x332>
			case 'm':
				keyboardhid.KEYCODE1 = Keyboard_m;  // press 'a'
 8000eb0:	4b42      	ldr	r3, [pc, #264]	; (8000fbc <key_board_send+0x364>)
 8000eb2:	2210      	movs	r2, #16
 8000eb4:	709a      	strb	r2, [r3, #2]
			    break;
 8000eb6:	e068      	b.n	8000f8a <key_board_send+0x332>
			case 'n':
				keyboardhid.KEYCODE1 = Keyboard_n;  // press 'a'
 8000eb8:	4b40      	ldr	r3, [pc, #256]	; (8000fbc <key_board_send+0x364>)
 8000eba:	2211      	movs	r2, #17
 8000ebc:	709a      	strb	r2, [r3, #2]
			    break;
 8000ebe:	e064      	b.n	8000f8a <key_board_send+0x332>
			case 'o':
				keyboardhid.KEYCODE1 = Keyboard_o;  // press 'a'
 8000ec0:	4b3e      	ldr	r3, [pc, #248]	; (8000fbc <key_board_send+0x364>)
 8000ec2:	2212      	movs	r2, #18
 8000ec4:	709a      	strb	r2, [r3, #2]
			    break;
 8000ec6:	e060      	b.n	8000f8a <key_board_send+0x332>
			case 'p':
				keyboardhid.KEYCODE1 = Keyboard_p;  // press 'a'
 8000ec8:	4b3c      	ldr	r3, [pc, #240]	; (8000fbc <key_board_send+0x364>)
 8000eca:	2213      	movs	r2, #19
 8000ecc:	709a      	strb	r2, [r3, #2]
			    break;
 8000ece:	e05c      	b.n	8000f8a <key_board_send+0x332>
			case 'q':
				keyboardhid.KEYCODE1 = Keyboard_q;  // press 'a'
 8000ed0:	4b3a      	ldr	r3, [pc, #232]	; (8000fbc <key_board_send+0x364>)
 8000ed2:	2214      	movs	r2, #20
 8000ed4:	709a      	strb	r2, [r3, #2]
			    break;
 8000ed6:	e058      	b.n	8000f8a <key_board_send+0x332>
			case 'r':
				keyboardhid.KEYCODE1 = Keyboard_r;  // press 'a'
 8000ed8:	4b38      	ldr	r3, [pc, #224]	; (8000fbc <key_board_send+0x364>)
 8000eda:	2215      	movs	r2, #21
 8000edc:	709a      	strb	r2, [r3, #2]
			    break;
 8000ede:	e054      	b.n	8000f8a <key_board_send+0x332>
			case 's':
				keyboardhid.KEYCODE1 = Keyboard_s;  // press 'a'
 8000ee0:	4b36      	ldr	r3, [pc, #216]	; (8000fbc <key_board_send+0x364>)
 8000ee2:	2216      	movs	r2, #22
 8000ee4:	709a      	strb	r2, [r3, #2]
			    break;
 8000ee6:	e050      	b.n	8000f8a <key_board_send+0x332>
			case 't':
				keyboardhid.KEYCODE1 = Keyboard_t;  // press 'a'
 8000ee8:	4b34      	ldr	r3, [pc, #208]	; (8000fbc <key_board_send+0x364>)
 8000eea:	2217      	movs	r2, #23
 8000eec:	709a      	strb	r2, [r3, #2]
			    break;
 8000eee:	e04c      	b.n	8000f8a <key_board_send+0x332>
			case 'u':
				keyboardhid.KEYCODE1 = Keyboard_u;  // press 'a'
 8000ef0:	4b32      	ldr	r3, [pc, #200]	; (8000fbc <key_board_send+0x364>)
 8000ef2:	2218      	movs	r2, #24
 8000ef4:	709a      	strb	r2, [r3, #2]
			    break;
 8000ef6:	e048      	b.n	8000f8a <key_board_send+0x332>
			case 'v':
				keyboardhid.KEYCODE1 = Keyboard_v;  // press 'a'
 8000ef8:	4b30      	ldr	r3, [pc, #192]	; (8000fbc <key_board_send+0x364>)
 8000efa:	2219      	movs	r2, #25
 8000efc:	709a      	strb	r2, [r3, #2]
			    break;
 8000efe:	e044      	b.n	8000f8a <key_board_send+0x332>
			case 'w':
				keyboardhid.KEYCODE1 = Keyboard_w;  // press 'a'
 8000f00:	4b2e      	ldr	r3, [pc, #184]	; (8000fbc <key_board_send+0x364>)
 8000f02:	221a      	movs	r2, #26
 8000f04:	709a      	strb	r2, [r3, #2]
			    break;
 8000f06:	e040      	b.n	8000f8a <key_board_send+0x332>
			case 'x':
				keyboardhid.KEYCODE1 = Keyboard_x;  // press 'a'
 8000f08:	4b2c      	ldr	r3, [pc, #176]	; (8000fbc <key_board_send+0x364>)
 8000f0a:	221b      	movs	r2, #27
 8000f0c:	709a      	strb	r2, [r3, #2]
			    break;
 8000f0e:	e03c      	b.n	8000f8a <key_board_send+0x332>
			case 'y':
				keyboardhid.KEYCODE1 = Keyboard_y;  // press 'a'
 8000f10:	4b2a      	ldr	r3, [pc, #168]	; (8000fbc <key_board_send+0x364>)
 8000f12:	221c      	movs	r2, #28
 8000f14:	709a      	strb	r2, [r3, #2]
			    break;
 8000f16:	e038      	b.n	8000f8a <key_board_send+0x332>
			case 'z':
				keyboardhid.KEYCODE1 = Keyboard_z;  // press 'a'
 8000f18:	4b28      	ldr	r3, [pc, #160]	; (8000fbc <key_board_send+0x364>)
 8000f1a:	221d      	movs	r2, #29
 8000f1c:	709a      	strb	r2, [r3, #2]
			    break;
 8000f1e:	e034      	b.n	8000f8a <key_board_send+0x332>
			case '0':
				keyboardhid.KEYCODE1 = Keyboard_0;  // press 'a'
 8000f20:	4b26      	ldr	r3, [pc, #152]	; (8000fbc <key_board_send+0x364>)
 8000f22:	2227      	movs	r2, #39	; 0x27
 8000f24:	709a      	strb	r2, [r3, #2]
			    break;
 8000f26:	e030      	b.n	8000f8a <key_board_send+0x332>
			case '1':
				keyboardhid.KEYCODE1 = Keyboard_1;  // press 'a'
 8000f28:	4b24      	ldr	r3, [pc, #144]	; (8000fbc <key_board_send+0x364>)
 8000f2a:	221e      	movs	r2, #30
 8000f2c:	709a      	strb	r2, [r3, #2]
			    break;
 8000f2e:	e02c      	b.n	8000f8a <key_board_send+0x332>
			case '2':
				keyboardhid.KEYCODE1 = Keyboard_2;  // press 'a'
 8000f30:	4b22      	ldr	r3, [pc, #136]	; (8000fbc <key_board_send+0x364>)
 8000f32:	221f      	movs	r2, #31
 8000f34:	709a      	strb	r2, [r3, #2]
			    break;
 8000f36:	e028      	b.n	8000f8a <key_board_send+0x332>
			case '3':
				keyboardhid.KEYCODE1 = Keyboard_3;  // press 'a'
 8000f38:	4b20      	ldr	r3, [pc, #128]	; (8000fbc <key_board_send+0x364>)
 8000f3a:	2220      	movs	r2, #32
 8000f3c:	709a      	strb	r2, [r3, #2]
			    break;
 8000f3e:	e024      	b.n	8000f8a <key_board_send+0x332>
			case '4':
				keyboardhid.KEYCODE1 = Keyboard_4;  // press 'a'
 8000f40:	4b1e      	ldr	r3, [pc, #120]	; (8000fbc <key_board_send+0x364>)
 8000f42:	2221      	movs	r2, #33	; 0x21
 8000f44:	709a      	strb	r2, [r3, #2]
			    break;
 8000f46:	e020      	b.n	8000f8a <key_board_send+0x332>
			case '5':
				keyboardhid.KEYCODE1 = Keyboard_5;  // press 'a'
 8000f48:	4b1c      	ldr	r3, [pc, #112]	; (8000fbc <key_board_send+0x364>)
 8000f4a:	2222      	movs	r2, #34	; 0x22
 8000f4c:	709a      	strb	r2, [r3, #2]
			    break;
 8000f4e:	e01c      	b.n	8000f8a <key_board_send+0x332>
			case '6':
				keyboardhid.KEYCODE1 = Keyboard_6;  // press 'a'
 8000f50:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <key_board_send+0x364>)
 8000f52:	2223      	movs	r2, #35	; 0x23
 8000f54:	709a      	strb	r2, [r3, #2]
			    break;
 8000f56:	e018      	b.n	8000f8a <key_board_send+0x332>
			case '7':
				keyboardhid.KEYCODE1 = Keyboard_7;  // press 'a'
 8000f58:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <key_board_send+0x364>)
 8000f5a:	2224      	movs	r2, #36	; 0x24
 8000f5c:	709a      	strb	r2, [r3, #2]
			    break;
 8000f5e:	e014      	b.n	8000f8a <key_board_send+0x332>
			case '8':
				keyboardhid.KEYCODE1 = Keyboard_8;  // press 'a'
 8000f60:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <key_board_send+0x364>)
 8000f62:	2225      	movs	r2, #37	; 0x25
 8000f64:	709a      	strb	r2, [r3, #2]
			    break;
 8000f66:	e010      	b.n	8000f8a <key_board_send+0x332>
			case '9':
				keyboardhid.KEYCODE1 = Keyboard_9;  // press 'a'
 8000f68:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <key_board_send+0x364>)
 8000f6a:	2226      	movs	r2, #38	; 0x26
 8000f6c:	709a      	strb	r2, [r3, #2]
			    break;
 8000f6e:	e00c      	b.n	8000f8a <key_board_send+0x332>
			case '\n':
				keyboardhid.KEYCODE1 = Keyboard_ENTER;  // press 'a'
 8000f70:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <key_board_send+0x364>)
 8000f72:	2228      	movs	r2, #40	; 0x28
 8000f74:	709a      	strb	r2, [r3, #2]
			    break;
 8000f76:	e008      	b.n	8000f8a <key_board_send+0x332>
			case ' ':
				keyboardhid.KEYCODE1 = Keyboard_SPACE;  // press 'a'
 8000f78:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <key_board_send+0x364>)
 8000f7a:	222c      	movs	r2, #44	; 0x2c
 8000f7c:	709a      	strb	r2, [r3, #2]
			    break;
 8000f7e:	e004      	b.n	8000f8a <key_board_send+0x332>
			case 0x7f:
				keyboardhid.KEYCODE1 = Keyboard_DELETE;  // press 'a'
 8000f80:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <key_board_send+0x364>)
 8000f82:	222a      	movs	r2, #42	; 0x2a
 8000f84:	709a      	strb	r2, [r3, #2]
			    break;
 8000f86:	e000      	b.n	8000f8a <key_board_send+0x332>
			default:
				break;
 8000f88:	bf00      	nop
	}
	  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof (keyboardhid));
 8000f8a:	2208      	movs	r2, #8
 8000f8c:	490b      	ldr	r1, [pc, #44]	; (8000fbc <key_board_send+0x364>)
 8000f8e:	480c      	ldr	r0, [pc, #48]	; (8000fc0 <key_board_send+0x368>)
 8000f90:	f005 f8bc 	bl	800610c <USBD_HID_SendReport>
	  HAL_Delay (delay);
 8000f94:	79bb      	ldrb	r3, [r7, #6]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f000 fa68 	bl	800146c <HAL_Delay>
	  keyboardhid.KEYCODE1 = 0;  // press 'a'
 8000f9c:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <key_board_send+0x364>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	709a      	strb	r2, [r3, #2]
	  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof (keyboardhid));
 8000fa2:	2208      	movs	r2, #8
 8000fa4:	4905      	ldr	r1, [pc, #20]	; (8000fbc <key_board_send+0x364>)
 8000fa6:	4806      	ldr	r0, [pc, #24]	; (8000fc0 <key_board_send+0x368>)
 8000fa8:	f005 f8b0 	bl	800610c <USBD_HID_SendReport>
	  HAL_Delay (delay);
 8000fac:	79bb      	ldrb	r3, [r7, #6]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 fa5c 	bl	800146c <HAL_Delay>
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	200001f4 	.word	0x200001f4
 8000fc0:	20000224 	.word	0x20000224

08000fc4 <test_modifile>:




void test_modifile(){
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
	  keyboardhid.MODIFIER = 8;
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <test_modifile+0x44>)
 8000fca:	2208      	movs	r2, #8
 8000fcc:	701a      	strb	r2, [r3, #0]
	 // keyboardhid.KEYCODE1 = Keyboard_s;
	  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof (keyboardhid));
 8000fce:	2208      	movs	r2, #8
 8000fd0:	490d      	ldr	r1, [pc, #52]	; (8001008 <test_modifile+0x44>)
 8000fd2:	480e      	ldr	r0, [pc, #56]	; (800100c <test_modifile+0x48>)
 8000fd4:	f005 f89a 	bl	800610c <USBD_HID_SendReport>
	  HAL_Delay (500);
 8000fd8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fdc:	f000 fa46 	bl	800146c <HAL_Delay>
	  keyboardhid.MODIFIER = 0; // press 'a'
 8000fe0:	4b09      	ldr	r3, [pc, #36]	; (8001008 <test_modifile+0x44>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	701a      	strb	r2, [r3, #0]
	 // keyboardhid.KEYCODE1 = 0;
	  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof (keyboardhid));
 8000fe6:	2208      	movs	r2, #8
 8000fe8:	4907      	ldr	r1, [pc, #28]	; (8001008 <test_modifile+0x44>)
 8000fea:	4808      	ldr	r0, [pc, #32]	; (800100c <test_modifile+0x48>)
 8000fec:	f005 f88e 	bl	800610c <USBD_HID_SendReport>
	  HAL_Delay (500);
 8000ff0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ff4:	f000 fa3a 	bl	800146c <HAL_Delay>
	  kb_send_string(temp_buff,12,100);
 8000ff8:	2264      	movs	r2, #100	; 0x64
 8000ffa:	210c      	movs	r1, #12
 8000ffc:	4804      	ldr	r0, [pc, #16]	; (8001010 <test_modifile+0x4c>)
 8000ffe:	f7ff fe0b 	bl	8000c18 <kb_send_string>
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200001f4 	.word	0x200001f4
 800100c:	20000224 	.word	0x20000224
 8001010:	20000000 	.word	0x20000000

08001014 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001018:	f000 f9c6 	bl	80013a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800101c:	f000 f811 	bl	8001042 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001020:	f000 f86a 	bl	80010f8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8001024:	f006 f962 	bl	80072ec <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  HAL_Delay(2000);
 8001028:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800102c:	f000 fa1e 	bl	800146c <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */
	  //heart_print();

	  test_modifile();
 8001030:	f7ff ffc8 	bl	8000fc4 <test_modifile>
	 // HAL_Delay(200);
	//  kb_send_string(temp_buff,6);
	  HAL_Delay(3000);
 8001034:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001038:	f000 fa18 	bl	800146c <HAL_Delay>
	  heart_print();
 800103c:	f7ff fcf4 	bl	8000a28 <heart_print>
	  test_modifile();
 8001040:	e7f6      	b.n	8001030 <main+0x1c>

08001042 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b094      	sub	sp, #80	; 0x50
 8001046:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001048:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800104c:	2228      	movs	r2, #40	; 0x28
 800104e:	2100      	movs	r1, #0
 8001050:	4618      	mov	r0, r3
 8001052:	f006 fd2f 	bl	8007ab4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001056:	f107 0314 	add.w	r3, r7, #20
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
 8001064:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001072:	2301      	movs	r3, #1
 8001074:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001076:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800107a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800107c:	2300      	movs	r3, #0
 800107e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001080:	2301      	movs	r3, #1
 8001082:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001084:	2302      	movs	r3, #2
 8001086:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001088:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800108c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800108e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001092:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001094:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001098:	4618      	mov	r0, r3
 800109a:	f001 ffc7 	bl	800302c <HAL_RCC_OscConfig>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80010a4:	f000 f84a 	bl	800113c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a8:	230f      	movs	r3, #15
 80010aa:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ac:	2302      	movs	r3, #2
 80010ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010b8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ba:	2300      	movs	r3, #0
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010be:	f107 0314 	add.w	r3, r7, #20
 80010c2:	2102      	movs	r1, #2
 80010c4:	4618      	mov	r0, r3
 80010c6:	f002 fa31 	bl	800352c <HAL_RCC_ClockConfig>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80010d0:	f000 f834 	bl	800113c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80010d4:	2310      	movs	r3, #16
 80010d6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80010d8:	2300      	movs	r3, #0
 80010da:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	4618      	mov	r0, r3
 80010e0:	f002 fb8c 	bl	80037fc <HAL_RCCEx_PeriphCLKConfig>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <SystemClock_Config+0xac>
  {
    Error_Handler();
 80010ea:	f000 f827 	bl	800113c <Error_Handler>
  }
}
 80010ee:	bf00      	nop
 80010f0:	3750      	adds	r7, #80	; 0x50
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <MX_GPIO_Init+0x40>)
 8001100:	699b      	ldr	r3, [r3, #24]
 8001102:	4a0d      	ldr	r2, [pc, #52]	; (8001138 <MX_GPIO_Init+0x40>)
 8001104:	f043 0320 	orr.w	r3, r3, #32
 8001108:	6193      	str	r3, [r2, #24]
 800110a:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <MX_GPIO_Init+0x40>)
 800110c:	699b      	ldr	r3, [r3, #24]
 800110e:	f003 0320 	and.w	r3, r3, #32
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	4b08      	ldr	r3, [pc, #32]	; (8001138 <MX_GPIO_Init+0x40>)
 8001118:	699b      	ldr	r3, [r3, #24]
 800111a:	4a07      	ldr	r2, [pc, #28]	; (8001138 <MX_GPIO_Init+0x40>)
 800111c:	f043 0304 	orr.w	r3, r3, #4
 8001120:	6193      	str	r3, [r2, #24]
 8001122:	4b05      	ldr	r3, [pc, #20]	; (8001138 <MX_GPIO_Init+0x40>)
 8001124:	699b      	ldr	r3, [r3, #24]
 8001126:	f003 0304 	and.w	r3, r3, #4
 800112a:	603b      	str	r3, [r7, #0]
 800112c:	683b      	ldr	r3, [r7, #0]

}
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr
 8001138:	40021000 	.word	0x40021000

0800113c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001140:	b672      	cpsid	i
}
 8001142:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001144:	e7fe      	b.n	8001144 <Error_Handler+0x8>
	...

08001148 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <HAL_MspInit+0x5c>)
 8001150:	699b      	ldr	r3, [r3, #24]
 8001152:	4a14      	ldr	r2, [pc, #80]	; (80011a4 <HAL_MspInit+0x5c>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	6193      	str	r3, [r2, #24]
 800115a:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <HAL_MspInit+0x5c>)
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001166:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <HAL_MspInit+0x5c>)
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	4a0e      	ldr	r2, [pc, #56]	; (80011a4 <HAL_MspInit+0x5c>)
 800116c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001170:	61d3      	str	r3, [r2, #28]
 8001172:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <HAL_MspInit+0x5c>)
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800117e:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <HAL_MspInit+0x60>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	4a04      	ldr	r2, [pc, #16]	; (80011a8 <HAL_MspInit+0x60>)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800119a:	bf00      	nop
 800119c:	3714      	adds	r7, #20
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40010000 	.word	0x40010000

080011ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <NMI_Handler+0x4>

080011b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011b6:	e7fe      	b.n	80011b6 <HardFault_Handler+0x4>

080011b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011bc:	e7fe      	b.n	80011bc <MemManage_Handler+0x4>

080011be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011c2:	e7fe      	b.n	80011c2 <BusFault_Handler+0x4>

080011c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <UsageFault_Handler+0x4>

080011ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr

080011d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr

080011e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr

080011ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011f2:	f000 f91f 	bl	8001434 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
	...

080011fc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001200:	4802      	ldr	r0, [pc, #8]	; (800120c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001202:	f000 fb95 	bl	8001930 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	200006e8 	.word	0x200006e8

08001210 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
 8001220:	e00a      	b.n	8001238 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001222:	f3af 8000 	nop.w
 8001226:	4601      	mov	r1, r0
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	1c5a      	adds	r2, r3, #1
 800122c:	60ba      	str	r2, [r7, #8]
 800122e:	b2ca      	uxtb	r2, r1
 8001230:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	3301      	adds	r3, #1
 8001236:	617b      	str	r3, [r7, #20]
 8001238:	697a      	ldr	r2, [r7, #20]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	429a      	cmp	r2, r3
 800123e:	dbf0      	blt.n	8001222 <_read+0x12>
	}

return len;
 8001240:	687b      	ldr	r3, [r7, #4]
}
 8001242:	4618      	mov	r0, r3
 8001244:	3718      	adds	r7, #24
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b086      	sub	sp, #24
 800124e:	af00      	add	r7, sp, #0
 8001250:	60f8      	str	r0, [r7, #12]
 8001252:	60b9      	str	r1, [r7, #8]
 8001254:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
 800125a:	e009      	b.n	8001270 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	1c5a      	adds	r2, r3, #1
 8001260:	60ba      	str	r2, [r7, #8]
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	4618      	mov	r0, r3
 8001266:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	3301      	adds	r3, #1
 800126e:	617b      	str	r3, [r7, #20]
 8001270:	697a      	ldr	r2, [r7, #20]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	429a      	cmp	r2, r3
 8001276:	dbf1      	blt.n	800125c <_write+0x12>
	}
	return len;
 8001278:	687b      	ldr	r3, [r7, #4]
}
 800127a:	4618      	mov	r0, r3
 800127c:	3718      	adds	r7, #24
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <_close>:

int _close(int file)
{
 8001282:	b480      	push	{r7}
 8001284:	b083      	sub	sp, #12
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
	return -1;
 800128a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800128e:	4618      	mov	r0, r3
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr

08001298 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012a8:	605a      	str	r2, [r3, #4]
	return 0;
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr

080012b6 <_isatty>:

int _isatty(int file)
{
 80012b6:	b480      	push	{r7}
 80012b8:	b083      	sub	sp, #12
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
	return 1;
 80012be:	2301      	movs	r3, #1
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr

080012ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012ca:	b480      	push	{r7}
 80012cc:	b085      	sub	sp, #20
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	60f8      	str	r0, [r7, #12]
 80012d2:	60b9      	str	r1, [r7, #8]
 80012d4:	607a      	str	r2, [r7, #4]
	return 0;
 80012d6:	2300      	movs	r3, #0
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3714      	adds	r7, #20
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr
	...

080012e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012ec:	4a14      	ldr	r2, [pc, #80]	; (8001340 <_sbrk+0x5c>)
 80012ee:	4b15      	ldr	r3, [pc, #84]	; (8001344 <_sbrk+0x60>)
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012f8:	4b13      	ldr	r3, [pc, #76]	; (8001348 <_sbrk+0x64>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d102      	bne.n	8001306 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001300:	4b11      	ldr	r3, [pc, #68]	; (8001348 <_sbrk+0x64>)
 8001302:	4a12      	ldr	r2, [pc, #72]	; (800134c <_sbrk+0x68>)
 8001304:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <_sbrk+0x64>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4413      	add	r3, r2
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	429a      	cmp	r2, r3
 8001312:	d207      	bcs.n	8001324 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001314:	f006 fba4 	bl	8007a60 <__errno>
 8001318:	4603      	mov	r3, r0
 800131a:	220c      	movs	r2, #12
 800131c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800131e:	f04f 33ff 	mov.w	r3, #4294967295
 8001322:	e009      	b.n	8001338 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001324:	4b08      	ldr	r3, [pc, #32]	; (8001348 <_sbrk+0x64>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800132a:	4b07      	ldr	r3, [pc, #28]	; (8001348 <_sbrk+0x64>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4413      	add	r3, r2
 8001332:	4a05      	ldr	r2, [pc, #20]	; (8001348 <_sbrk+0x64>)
 8001334:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001336:	68fb      	ldr	r3, [r7, #12]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3718      	adds	r7, #24
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20005000 	.word	0x20005000
 8001344:	00000400 	.word	0x00000400
 8001348:	200001fc 	.word	0x200001fc
 800134c:	200009e8 	.word	0x200009e8

08001350 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr

0800135c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800135c:	480c      	ldr	r0, [pc, #48]	; (8001390 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800135e:	490d      	ldr	r1, [pc, #52]	; (8001394 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001360:	4a0d      	ldr	r2, [pc, #52]	; (8001398 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001364:	e002      	b.n	800136c <LoopCopyDataInit>

08001366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800136a:	3304      	adds	r3, #4

0800136c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800136c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800136e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001370:	d3f9      	bcc.n	8001366 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001372:	4a0a      	ldr	r2, [pc, #40]	; (800139c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001374:	4c0a      	ldr	r4, [pc, #40]	; (80013a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001378:	e001      	b.n	800137e <LoopFillZerobss>

0800137a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800137a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800137c:	3204      	adds	r2, #4

0800137e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800137e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001380:	d3fb      	bcc.n	800137a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001382:	f7ff ffe5 	bl	8001350 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001386:	f006 fb71 	bl	8007a6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800138a:	f7ff fe43 	bl	8001014 <main>
  bx lr
 800138e:	4770      	bx	lr
  ldr r0, =_sdata
 8001390:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001394:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001398:	080094c0 	.word	0x080094c0
  ldr r2, =_sbss
 800139c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80013a0:	200009e4 	.word	0x200009e4

080013a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013a4:	e7fe      	b.n	80013a4 <ADC1_2_IRQHandler>
	...

080013a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <HAL_Init+0x28>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a07      	ldr	r2, [pc, #28]	; (80013d0 <HAL_Init+0x28>)
 80013b2:	f043 0310 	orr.w	r3, r3, #16
 80013b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b8:	2003      	movs	r0, #3
 80013ba:	f000 f947 	bl	800164c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013be:	2000      	movs	r0, #0
 80013c0:	f000 f808 	bl	80013d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013c4:	f7ff fec0 	bl	8001148 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40022000 	.word	0x40022000

080013d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013dc:	4b12      	ldr	r3, [pc, #72]	; (8001428 <HAL_InitTick+0x54>)
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	4b12      	ldr	r3, [pc, #72]	; (800142c <HAL_InitTick+0x58>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	4619      	mov	r1, r3
 80013e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f2:	4618      	mov	r0, r3
 80013f4:	f000 f95f 	bl	80016b6 <HAL_SYSTICK_Config>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e00e      	b.n	8001420 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2b0f      	cmp	r3, #15
 8001406:	d80a      	bhi.n	800141e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001408:	2200      	movs	r2, #0
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	f04f 30ff 	mov.w	r0, #4294967295
 8001410:	f000 f927 	bl	8001662 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001414:	4a06      	ldr	r2, [pc, #24]	; (8001430 <HAL_InitTick+0x5c>)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800141a:	2300      	movs	r3, #0
 800141c:	e000      	b.n	8001420 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
}
 8001420:	4618      	mov	r0, r3
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000018 	.word	0x20000018
 800142c:	20000020 	.word	0x20000020
 8001430:	2000001c 	.word	0x2000001c

08001434 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001438:	4b05      	ldr	r3, [pc, #20]	; (8001450 <HAL_IncTick+0x1c>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	461a      	mov	r2, r3
 800143e:	4b05      	ldr	r3, [pc, #20]	; (8001454 <HAL_IncTick+0x20>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4413      	add	r3, r2
 8001444:	4a03      	ldr	r2, [pc, #12]	; (8001454 <HAL_IncTick+0x20>)
 8001446:	6013      	str	r3, [r2, #0]
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr
 8001450:	20000020 	.word	0x20000020
 8001454:	20000220 	.word	0x20000220

08001458 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  return uwTick;
 800145c:	4b02      	ldr	r3, [pc, #8]	; (8001468 <HAL_GetTick+0x10>)
 800145e:	681b      	ldr	r3, [r3, #0]
}
 8001460:	4618      	mov	r0, r3
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr
 8001468:	20000220 	.word	0x20000220

0800146c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001474:	f7ff fff0 	bl	8001458 <HAL_GetTick>
 8001478:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001484:	d005      	beq.n	8001492 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001486:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <HAL_Delay+0x44>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	461a      	mov	r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	4413      	add	r3, r2
 8001490:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001492:	bf00      	nop
 8001494:	f7ff ffe0 	bl	8001458 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d8f7      	bhi.n	8001494 <HAL_Delay+0x28>
  {
  }
}
 80014a4:	bf00      	nop
 80014a6:	bf00      	nop
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000020 	.word	0x20000020

080014b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c4:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <__NVIC_SetPriorityGrouping+0x44>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014d0:	4013      	ands	r3, r2
 80014d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014e6:	4a04      	ldr	r2, [pc, #16]	; (80014f8 <__NVIC_SetPriorityGrouping+0x44>)
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	60d3      	str	r3, [r2, #12]
}
 80014ec:	bf00      	nop
 80014ee:	3714      	adds	r7, #20
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001500:	4b04      	ldr	r3, [pc, #16]	; (8001514 <__NVIC_GetPriorityGrouping+0x18>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	0a1b      	lsrs	r3, r3, #8
 8001506:	f003 0307 	and.w	r3, r3, #7
}
 800150a:	4618      	mov	r0, r3
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	2b00      	cmp	r3, #0
 8001528:	db0b      	blt.n	8001542 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	f003 021f 	and.w	r2, r3, #31
 8001530:	4906      	ldr	r1, [pc, #24]	; (800154c <__NVIC_EnableIRQ+0x34>)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	095b      	lsrs	r3, r3, #5
 8001538:	2001      	movs	r0, #1
 800153a:	fa00 f202 	lsl.w	r2, r0, r2
 800153e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr
 800154c:	e000e100 	.word	0xe000e100

08001550 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	6039      	str	r1, [r7, #0]
 800155a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001560:	2b00      	cmp	r3, #0
 8001562:	db0a      	blt.n	800157a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	b2da      	uxtb	r2, r3
 8001568:	490c      	ldr	r1, [pc, #48]	; (800159c <__NVIC_SetPriority+0x4c>)
 800156a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156e:	0112      	lsls	r2, r2, #4
 8001570:	b2d2      	uxtb	r2, r2
 8001572:	440b      	add	r3, r1
 8001574:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001578:	e00a      	b.n	8001590 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	b2da      	uxtb	r2, r3
 800157e:	4908      	ldr	r1, [pc, #32]	; (80015a0 <__NVIC_SetPriority+0x50>)
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	f003 030f 	and.w	r3, r3, #15
 8001586:	3b04      	subs	r3, #4
 8001588:	0112      	lsls	r2, r2, #4
 800158a:	b2d2      	uxtb	r2, r2
 800158c:	440b      	add	r3, r1
 800158e:	761a      	strb	r2, [r3, #24]
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000e100 	.word	0xe000e100
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b089      	sub	sp, #36	; 0x24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	f1c3 0307 	rsb	r3, r3, #7
 80015be:	2b04      	cmp	r3, #4
 80015c0:	bf28      	it	cs
 80015c2:	2304      	movcs	r3, #4
 80015c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	3304      	adds	r3, #4
 80015ca:	2b06      	cmp	r3, #6
 80015cc:	d902      	bls.n	80015d4 <NVIC_EncodePriority+0x30>
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	3b03      	subs	r3, #3
 80015d2:	e000      	b.n	80015d6 <NVIC_EncodePriority+0x32>
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d8:	f04f 32ff 	mov.w	r2, #4294967295
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43da      	mvns	r2, r3
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	401a      	ands	r2, r3
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015ec:	f04f 31ff 	mov.w	r1, #4294967295
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	fa01 f303 	lsl.w	r3, r1, r3
 80015f6:	43d9      	mvns	r1, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015fc:	4313      	orrs	r3, r2
         );
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3724      	adds	r7, #36	; 0x24
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr

08001608 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3b01      	subs	r3, #1
 8001614:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001618:	d301      	bcc.n	800161e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800161a:	2301      	movs	r3, #1
 800161c:	e00f      	b.n	800163e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800161e:	4a0a      	ldr	r2, [pc, #40]	; (8001648 <SysTick_Config+0x40>)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	3b01      	subs	r3, #1
 8001624:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001626:	210f      	movs	r1, #15
 8001628:	f04f 30ff 	mov.w	r0, #4294967295
 800162c:	f7ff ff90 	bl	8001550 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001630:	4b05      	ldr	r3, [pc, #20]	; (8001648 <SysTick_Config+0x40>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001636:	4b04      	ldr	r3, [pc, #16]	; (8001648 <SysTick_Config+0x40>)
 8001638:	2207      	movs	r2, #7
 800163a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	e000e010 	.word	0xe000e010

0800164c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff ff2d 	bl	80014b4 <__NVIC_SetPriorityGrouping>
}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001662:	b580      	push	{r7, lr}
 8001664:	b086      	sub	sp, #24
 8001666:	af00      	add	r7, sp, #0
 8001668:	4603      	mov	r3, r0
 800166a:	60b9      	str	r1, [r7, #8]
 800166c:	607a      	str	r2, [r7, #4]
 800166e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001674:	f7ff ff42 	bl	80014fc <__NVIC_GetPriorityGrouping>
 8001678:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	68b9      	ldr	r1, [r7, #8]
 800167e:	6978      	ldr	r0, [r7, #20]
 8001680:	f7ff ff90 	bl	80015a4 <NVIC_EncodePriority>
 8001684:	4602      	mov	r2, r0
 8001686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800168a:	4611      	mov	r1, r2
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff ff5f 	bl	8001550 <__NVIC_SetPriority>
}
 8001692:	bf00      	nop
 8001694:	3718      	adds	r7, #24
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	af00      	add	r7, sp, #0
 80016a0:	4603      	mov	r3, r0
 80016a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff ff35 	bl	8001518 <__NVIC_EnableIRQ>
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff ffa2 	bl	8001608 <SysTick_Config>
 80016c4:	4603      	mov	r3, r0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80016ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016d0:	b08b      	sub	sp, #44	; 0x2c
 80016d2:	af06      	add	r7, sp, #24
 80016d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d101      	bne.n	80016e0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e0fd      	b.n	80018dc <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d106      	bne.n	80016fa <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f005 ff2d 	bl	8007554 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2203      	movs	r2, #3
 80016fe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f002 f954 	bl	80039b4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	603b      	str	r3, [r7, #0]
 8001712:	687e      	ldr	r6, [r7, #4]
 8001714:	466d      	mov	r5, sp
 8001716:	f106 0410 	add.w	r4, r6, #16
 800171a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800171c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800171e:	6823      	ldr	r3, [r4, #0]
 8001720:	602b      	str	r3, [r5, #0]
 8001722:	1d33      	adds	r3, r6, #4
 8001724:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001726:	6838      	ldr	r0, [r7, #0]
 8001728:	f002 f91e 	bl	8003968 <USB_CoreInit>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d005      	beq.n	800173e <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2202      	movs	r2, #2
 8001736:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e0ce      	b.n	80018dc <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2100      	movs	r1, #0
 8001744:	4618      	mov	r0, r3
 8001746:	f002 f94f 	bl	80039e8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800174a:	2300      	movs	r3, #0
 800174c:	73fb      	strb	r3, [r7, #15]
 800174e:	e04c      	b.n	80017ea <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	1c5a      	adds	r2, r3, #1
 8001756:	4613      	mov	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	440b      	add	r3, r1
 8001760:	3301      	adds	r3, #1
 8001762:	2201      	movs	r2, #1
 8001764:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001766:	7bfb      	ldrb	r3, [r7, #15]
 8001768:	6879      	ldr	r1, [r7, #4]
 800176a:	1c5a      	adds	r2, r3, #1
 800176c:	4613      	mov	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4413      	add	r3, r2
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	440b      	add	r3, r1
 8001776:	7bfa      	ldrb	r2, [r7, #15]
 8001778:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800177a:	7bfa      	ldrb	r2, [r7, #15]
 800177c:	7bfb      	ldrb	r3, [r7, #15]
 800177e:	b298      	uxth	r0, r3
 8001780:	6879      	ldr	r1, [r7, #4]
 8001782:	4613      	mov	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	4413      	add	r3, r2
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	440b      	add	r3, r1
 800178c:	3336      	adds	r3, #54	; 0x36
 800178e:	4602      	mov	r2, r0
 8001790:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001792:	7bfb      	ldrb	r3, [r7, #15]
 8001794:	6879      	ldr	r1, [r7, #4]
 8001796:	1c5a      	adds	r2, r3, #1
 8001798:	4613      	mov	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	440b      	add	r3, r1
 80017a2:	3303      	adds	r3, #3
 80017a4:	2200      	movs	r2, #0
 80017a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80017a8:	7bfa      	ldrb	r2, [r7, #15]
 80017aa:	6879      	ldr	r1, [r7, #4]
 80017ac:	4613      	mov	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	4413      	add	r3, r2
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	440b      	add	r3, r1
 80017b6:	3338      	adds	r3, #56	; 0x38
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80017bc:	7bfa      	ldrb	r2, [r7, #15]
 80017be:	6879      	ldr	r1, [r7, #4]
 80017c0:	4613      	mov	r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4413      	add	r3, r2
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	440b      	add	r3, r1
 80017ca:	333c      	adds	r3, #60	; 0x3c
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80017d0:	7bfa      	ldrb	r2, [r7, #15]
 80017d2:	6879      	ldr	r1, [r7, #4]
 80017d4:	4613      	mov	r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4413      	add	r3, r2
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	440b      	add	r3, r1
 80017de:	3340      	adds	r3, #64	; 0x40
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017e4:	7bfb      	ldrb	r3, [r7, #15]
 80017e6:	3301      	adds	r3, #1
 80017e8:	73fb      	strb	r3, [r7, #15]
 80017ea:	7bfa      	ldrb	r2, [r7, #15]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d3ad      	bcc.n	8001750 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017f4:	2300      	movs	r3, #0
 80017f6:	73fb      	strb	r3, [r7, #15]
 80017f8:	e044      	b.n	8001884 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80017fa:	7bfa      	ldrb	r2, [r7, #15]
 80017fc:	6879      	ldr	r1, [r7, #4]
 80017fe:	4613      	mov	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4413      	add	r3, r2
 8001804:	00db      	lsls	r3, r3, #3
 8001806:	440b      	add	r3, r1
 8001808:	f203 1369 	addw	r3, r3, #361	; 0x169
 800180c:	2200      	movs	r2, #0
 800180e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001810:	7bfa      	ldrb	r2, [r7, #15]
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	4613      	mov	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	440b      	add	r3, r1
 800181e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001822:	7bfa      	ldrb	r2, [r7, #15]
 8001824:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001826:	7bfa      	ldrb	r2, [r7, #15]
 8001828:	6879      	ldr	r1, [r7, #4]
 800182a:	4613      	mov	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4413      	add	r3, r2
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	440b      	add	r3, r1
 8001834:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800183c:	7bfa      	ldrb	r2, [r7, #15]
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	4613      	mov	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	440b      	add	r3, r1
 800184a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001852:	7bfa      	ldrb	r2, [r7, #15]
 8001854:	6879      	ldr	r1, [r7, #4]
 8001856:	4613      	mov	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4413      	add	r3, r2
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	440b      	add	r3, r1
 8001860:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001868:	7bfa      	ldrb	r2, [r7, #15]
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	4613      	mov	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	440b      	add	r3, r1
 8001876:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800187e:	7bfb      	ldrb	r3, [r7, #15]
 8001880:	3301      	adds	r3, #1
 8001882:	73fb      	strb	r3, [r7, #15]
 8001884:	7bfa      	ldrb	r2, [r7, #15]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	429a      	cmp	r2, r3
 800188c:	d3b5      	bcc.n	80017fa <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	603b      	str	r3, [r7, #0]
 8001894:	687e      	ldr	r6, [r7, #4]
 8001896:	466d      	mov	r5, sp
 8001898:	f106 0410 	add.w	r4, r6, #16
 800189c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800189e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018a0:	6823      	ldr	r3, [r4, #0]
 80018a2:	602b      	str	r3, [r5, #0]
 80018a4:	1d33      	adds	r3, r6, #4
 80018a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018a8:	6838      	ldr	r0, [r7, #0]
 80018aa:	f002 f8a9 	bl	8003a00 <USB_DevInit>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d005      	beq.n	80018c0 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2202      	movs	r2, #2
 80018b8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e00d      	b.n	80018dc <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f004 fa1a 	bl	8005d0e <USB_DevDisconnect>

  return HAL_OK;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3714      	adds	r7, #20
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080018e4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d101      	bne.n	80018fa <HAL_PCD_Start+0x16>
 80018f6:	2302      	movs	r3, #2
 80018f8:	e016      	b.n	8001928 <HAL_PCD_Start+0x44>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2201      	movs	r2, #1
 80018fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f002 f83e 	bl	8003988 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800190c:	2101      	movs	r1, #1
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f006 f86f 	bl	80079f2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f004 f9ee 	bl	8005cfa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b088      	sub	sp, #32
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4618      	mov	r0, r3
 800193e:	f004 f9f0 	bl	8005d22 <USB_ReadInterrupts>
 8001942:	4603      	mov	r3, r0
 8001944:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001948:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800194c:	d102      	bne.n	8001954 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f000 fb4a 	bl	8001fe8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4618      	mov	r0, r3
 800195a:	f004 f9e2 	bl	8005d22 <USB_ReadInterrupts>
 800195e:	4603      	mov	r3, r0
 8001960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001964:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001968:	d112      	bne.n	8001990 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001972:	b29a      	uxth	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800197c:	b292      	uxth	r2, r2
 800197e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f005 fe61 	bl	800764a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001988:	2100      	movs	r1, #0
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f000 f925 	bl	8001bda <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f004 f9c4 	bl	8005d22 <USB_ReadInterrupts>
 800199a:	4603      	mov	r3, r0
 800199c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80019a4:	d10b      	bne.n	80019be <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80019b8:	b292      	uxth	r2, r2
 80019ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f004 f9ad 	bl	8005d22 <USB_ReadInterrupts>
 80019c8:	4603      	mov	r3, r0
 80019ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019d2:	d10b      	bne.n	80019ec <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019dc:	b29a      	uxth	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019e6:	b292      	uxth	r2, r2
 80019e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f004 f996 	bl	8005d22 <USB_ReadInterrupts>
 80019f6:	4603      	mov	r3, r0
 80019f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a00:	d126      	bne.n	8001a50 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 0204 	bic.w	r2, r2, #4
 8001a14:	b292      	uxth	r2, r2
 8001a16:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 0208 	bic.w	r2, r2, #8
 8001a2c:	b292      	uxth	r2, r2
 8001a2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f005 fe42 	bl	80076bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a4a:	b292      	uxth	r2, r2
 8001a4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f004 f964 	bl	8005d22 <USB_ReadInterrupts>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a64:	f040 8084 	bne.w	8001b70 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001a68:	2300      	movs	r3, #0
 8001a6a:	77fb      	strb	r3, [r7, #31]
 8001a6c:	e011      	b.n	8001a92 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	461a      	mov	r2, r3
 8001a74:	7ffb      	ldrb	r3, [r7, #31]
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	441a      	add	r2, r3
 8001a7a:	7ffb      	ldrb	r3, [r7, #31]
 8001a7c:	8812      	ldrh	r2, [r2, #0]
 8001a7e:	b292      	uxth	r2, r2
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	f107 0120 	add.w	r1, r7, #32
 8001a86:	440b      	add	r3, r1
 8001a88:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001a8c:	7ffb      	ldrb	r3, [r7, #31]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	77fb      	strb	r3, [r7, #31]
 8001a92:	7ffb      	ldrb	r3, [r7, #31]
 8001a94:	2b07      	cmp	r3, #7
 8001a96:	d9ea      	bls.n	8001a6e <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f042 0201 	orr.w	r2, r2, #1
 8001aaa:	b292      	uxth	r2, r2
 8001aac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f022 0201 	bic.w	r2, r2, #1
 8001ac2:	b292      	uxth	r2, r2
 8001ac4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001ac8:	bf00      	nop
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d0f6      	beq.n	8001aca <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001aee:	b292      	uxth	r2, r2
 8001af0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001af4:	2300      	movs	r3, #0
 8001af6:	77fb      	strb	r3, [r7, #31]
 8001af8:	e010      	b.n	8001b1c <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001afa:	7ffb      	ldrb	r3, [r7, #31]
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	6812      	ldr	r2, [r2, #0]
 8001b00:	4611      	mov	r1, r2
 8001b02:	7ffa      	ldrb	r2, [r7, #31]
 8001b04:	0092      	lsls	r2, r2, #2
 8001b06:	440a      	add	r2, r1
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	f107 0120 	add.w	r1, r7, #32
 8001b0e:	440b      	add	r3, r1
 8001b10:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001b14:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001b16:	7ffb      	ldrb	r3, [r7, #31]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	77fb      	strb	r3, [r7, #31]
 8001b1c:	7ffb      	ldrb	r3, [r7, #31]
 8001b1e:	2b07      	cmp	r3, #7
 8001b20:	d9eb      	bls.n	8001afa <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f042 0208 	orr.w	r2, r2, #8
 8001b34:	b292      	uxth	r2, r2
 8001b36:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b4c:	b292      	uxth	r2, r2
 8001b4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f042 0204 	orr.w	r2, r2, #4
 8001b64:	b292      	uxth	r2, r2
 8001b66:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f005 fd8c 	bl	8007688 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f004 f8d4 	bl	8005d22 <USB_ReadInterrupts>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b84:	d10e      	bne.n	8001ba4 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b98:	b292      	uxth	r2, r2
 8001b9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f005 fd45 	bl	800762e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f004 f8ba 	bl	8005d22 <USB_ReadInterrupts>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bb8:	d10b      	bne.n	8001bd2 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bcc:	b292      	uxth	r2, r2
 8001bce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001bd2:	bf00      	nop
 8001bd4:	3720      	adds	r7, #32
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b082      	sub	sp, #8
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
 8001be2:	460b      	mov	r3, r1
 8001be4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d101      	bne.n	8001bf4 <HAL_PCD_SetAddress+0x1a>
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	e013      	b.n	8001c1c <HAL_PCD_SetAddress+0x42>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	78fa      	ldrb	r2, [r7, #3]
 8001c00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	78fa      	ldrb	r2, [r7, #3]
 8001c0a:	4611      	mov	r1, r2
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f004 f861 	bl	8005cd4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	4608      	mov	r0, r1
 8001c2e:	4611      	mov	r1, r2
 8001c30:	461a      	mov	r2, r3
 8001c32:	4603      	mov	r3, r0
 8001c34:	70fb      	strb	r3, [r7, #3]
 8001c36:	460b      	mov	r3, r1
 8001c38:	803b      	strh	r3, [r7, #0]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	da0e      	bge.n	8001c68 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c4a:	78fb      	ldrb	r3, [r7, #3]
 8001c4c:	f003 0307 	and.w	r3, r3, #7
 8001c50:	1c5a      	adds	r2, r3, #1
 8001c52:	4613      	mov	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4413      	add	r3, r2
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2201      	movs	r2, #1
 8001c64:	705a      	strb	r2, [r3, #1]
 8001c66:	e00e      	b.n	8001c86 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c68:	78fb      	ldrb	r3, [r7, #3]
 8001c6a:	f003 0207 	and.w	r2, r3, #7
 8001c6e:	4613      	mov	r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	4413      	add	r3, r2
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2200      	movs	r2, #0
 8001c84:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c86:	78fb      	ldrb	r3, [r7, #3]
 8001c88:	f003 0307 	and.w	r3, r3, #7
 8001c8c:	b2da      	uxtb	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c92:	883a      	ldrh	r2, [r7, #0]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	78ba      	ldrb	r2, [r7, #2]
 8001c9c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	785b      	ldrb	r3, [r3, #1]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d004      	beq.n	8001cb0 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001cb0:	78bb      	ldrb	r3, [r7, #2]
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d102      	bne.n	8001cbc <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d101      	bne.n	8001cca <HAL_PCD_EP_Open+0xa6>
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	e00e      	b.n	8001ce8 <HAL_PCD_EP_Open+0xc4>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68f9      	ldr	r1, [r7, #12]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f001 feb1 	bl	8003a40 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001ce6:	7afb      	ldrb	r3, [r7, #11]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	da0e      	bge.n	8001d22 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d04:	78fb      	ldrb	r3, [r7, #3]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	1c5a      	adds	r2, r3, #1
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	4413      	add	r3, r2
 8001d18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	705a      	strb	r2, [r3, #1]
 8001d20:	e00e      	b.n	8001d40 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d22:	78fb      	ldrb	r3, [r7, #3]
 8001d24:	f003 0207 	and.w	r2, r3, #7
 8001d28:	4613      	mov	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4413      	add	r3, r2
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	4413      	add	r3, r2
 8001d38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001d40:	78fb      	ldrb	r3, [r7, #3]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d101      	bne.n	8001d5a <HAL_PCD_EP_Close+0x6a>
 8001d56:	2302      	movs	r3, #2
 8001d58:	e00e      	b.n	8001d78 <HAL_PCD_EP_Close+0x88>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68f9      	ldr	r1, [r7, #12]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f002 f9d3 	bl	8004114 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	607a      	str	r2, [r7, #4]
 8001d8a:	603b      	str	r3, [r7, #0]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d90:	7afb      	ldrb	r3, [r7, #11]
 8001d92:	f003 0207 	and.w	r2, r3, #7
 8001d96:	4613      	mov	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	4413      	add	r3, r2
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	4413      	add	r3, r2
 8001da6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	2200      	movs	r2, #0
 8001db8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dc0:	7afb      	ldrb	r3, [r7, #11]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001dcc:	7afb      	ldrb	r3, [r7, #11]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d106      	bne.n	8001de4 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	6979      	ldr	r1, [r7, #20]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f002 fb85 	bl	80044ec <USB_EPStartXfer>
 8001de2:	e005      	b.n	8001df0 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6979      	ldr	r1, [r7, #20]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f002 fb7e 	bl	80044ec <USB_EPStartXfer>
  }

  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3718      	adds	r7, #24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b086      	sub	sp, #24
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	60f8      	str	r0, [r7, #12]
 8001e02:	607a      	str	r2, [r7, #4]
 8001e04:	603b      	str	r3, [r7, #0]
 8001e06:	460b      	mov	r3, r1
 8001e08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e0a:	7afb      	ldrb	r3, [r7, #11]
 8001e0c:	f003 0307 	and.w	r3, r3, #7
 8001e10:	1c5a      	adds	r2, r3, #1
 8001e12:	4613      	mov	r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	4413      	add	r3, r2
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	2201      	movs	r2, #1
 8001e44:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e46:	7afb      	ldrb	r3, [r7, #11]
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	b2da      	uxtb	r2, r3
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e52:	7afb      	ldrb	r3, [r7, #11]
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d106      	bne.n	8001e6a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6979      	ldr	r1, [r7, #20]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f002 fb42 	bl	80044ec <USB_EPStartXfer>
 8001e68:	e005      	b.n	8001e76 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6979      	ldr	r1, [r7, #20]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f002 fb3b 	bl	80044ec <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e8c:	78fb      	ldrb	r3, [r7, #3]
 8001e8e:	f003 0207 	and.w	r2, r3, #7
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d901      	bls.n	8001e9e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e04c      	b.n	8001f38 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	da0e      	bge.n	8001ec4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ea6:	78fb      	ldrb	r3, [r7, #3]
 8001ea8:	f003 0307 	and.w	r3, r3, #7
 8001eac:	1c5a      	adds	r2, r3, #1
 8001eae:	4613      	mov	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4413      	add	r3, r2
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	4413      	add	r3, r2
 8001eba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	705a      	strb	r2, [r3, #1]
 8001ec2:	e00c      	b.n	8001ede <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ec4:	78fa      	ldrb	r2, [r7, #3]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2200      	movs	r2, #0
 8001edc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ee4:	78fb      	ldrb	r3, [r7, #3]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d101      	bne.n	8001efe <HAL_PCD_EP_SetStall+0x7e>
 8001efa:	2302      	movs	r3, #2
 8001efc:	e01c      	b.n	8001f38 <HAL_PCD_EP_SetStall+0xb8>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68f9      	ldr	r1, [r7, #12]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f003 fde4 	bl	8005ada <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f12:	78fb      	ldrb	r3, [r7, #3]
 8001f14:	f003 0307 	and.w	r3, r3, #7
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d108      	bne.n	8001f2e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001f26:	4619      	mov	r1, r3
 8001f28:	4610      	mov	r0, r2
 8001f2a:	f003 ff09 	bl	8005d40 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f4c:	78fb      	ldrb	r3, [r7, #3]
 8001f4e:	f003 020f 	and.w	r2, r3, #15
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d901      	bls.n	8001f5e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e040      	b.n	8001fe0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	da0e      	bge.n	8001f84 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f66:	78fb      	ldrb	r3, [r7, #3]
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	1c5a      	adds	r2, r3, #1
 8001f6e:	4613      	mov	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	4413      	add	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	705a      	strb	r2, [r3, #1]
 8001f82:	e00e      	b.n	8001fa2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f84:	78fb      	ldrb	r3, [r7, #3]
 8001f86:	f003 0207 	and.w	r2, r3, #7
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	4413      	add	r3, r2
 8001f9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fa8:	78fb      	ldrb	r3, [r7, #3]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d101      	bne.n	8001fc2 <HAL_PCD_EP_ClrStall+0x82>
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	e00e      	b.n	8001fe0 <HAL_PCD_EP_ClrStall+0xa0>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68f9      	ldr	r1, [r7, #12]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f003 fdd2 	bl	8005b7a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3710      	adds	r7, #16
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b08e      	sub	sp, #56	; 0x38
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001ff0:	e2ec      	b.n	80025cc <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ffa:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001ffc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	f003 030f 	and.w	r3, r3, #15
 8002004:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002008:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800200c:	2b00      	cmp	r3, #0
 800200e:	f040 8161 	bne.w	80022d4 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002012:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002014:	f003 0310 	and.w	r3, r3, #16
 8002018:	2b00      	cmp	r3, #0
 800201a:	d152      	bne.n	80020c2 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	881b      	ldrh	r3, [r3, #0]
 8002022:	b29b      	uxth	r3, r3
 8002024:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800202c:	81fb      	strh	r3, [r7, #14]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	89fb      	ldrh	r3, [r7, #14]
 8002034:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002038:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800203c:	b29b      	uxth	r3, r3
 800203e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	3328      	adds	r3, #40	; 0x28
 8002044:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800204e:	b29b      	uxth	r3, r3
 8002050:	461a      	mov	r2, r3
 8002052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	4413      	add	r3, r2
 800205a:	3302      	adds	r3, #2
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	6812      	ldr	r2, [r2, #0]
 8002062:	4413      	add	r3, r2
 8002064:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002068:	881b      	ldrh	r3, [r3, #0]
 800206a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	695a      	ldr	r2, [r3, #20]
 8002076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	441a      	add	r2, r3
 800207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002080:	2100      	movs	r1, #0
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f005 fab9 	bl	80075fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2b00      	cmp	r3, #0
 8002092:	f000 829b 	beq.w	80025cc <PCD_EP_ISR_Handler+0x5e4>
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	2b00      	cmp	r3, #0
 800209c:	f040 8296 	bne.w	80025cc <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	b292      	uxth	r2, r2
 80020b4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80020c0:	e284      	b.n	80025cc <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	881b      	ldrh	r3, [r3, #0]
 80020d0:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80020d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80020d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d034      	beq.n	8002146 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	461a      	mov	r2, r3
 80020e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	4413      	add	r3, r2
 80020f0:	3306      	adds	r3, #6
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	6812      	ldr	r2, [r2, #0]
 80020f8:	4413      	add	r3, r2
 80020fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020fe:	881b      	ldrh	r3, [r3, #0]
 8002100:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6818      	ldr	r0, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002118:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800211a:	b29b      	uxth	r3, r3
 800211c:	f003 fe60 	bl	8005de0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	881b      	ldrh	r3, [r3, #0]
 8002126:	b29a      	uxth	r2, r3
 8002128:	f640 738f 	movw	r3, #3983	; 0xf8f
 800212c:	4013      	ands	r3, r2
 800212e:	823b      	strh	r3, [r7, #16]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	8a3a      	ldrh	r2, [r7, #16]
 8002136:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800213a:	b292      	uxth	r2, r2
 800213c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f005 fa2e 	bl	80075a0 <HAL_PCD_SetupStageCallback>
 8002144:	e242      	b.n	80025cc <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002146:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800214a:	2b00      	cmp	r3, #0
 800214c:	f280 823e 	bge.w	80025cc <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	881b      	ldrh	r3, [r3, #0]
 8002156:	b29a      	uxth	r2, r3
 8002158:	f640 738f 	movw	r3, #3983	; 0xf8f
 800215c:	4013      	ands	r3, r2
 800215e:	83bb      	strh	r3, [r7, #28]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	8bba      	ldrh	r2, [r7, #28]
 8002166:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800216a:	b292      	uxth	r2, r2
 800216c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002176:	b29b      	uxth	r3, r3
 8002178:	461a      	mov	r2, r3
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	4413      	add	r3, r2
 8002182:	3306      	adds	r3, #6
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	6812      	ldr	r2, [r2, #0]
 800218a:	4413      	add	r3, r2
 800218c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002190:	881b      	ldrh	r3, [r3, #0]
 8002192:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d019      	beq.n	80021d6 <PCD_EP_ISR_Handler+0x1ee>
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d015      	beq.n	80021d6 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6818      	ldr	r0, [r3, #0]
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	6959      	ldr	r1, [r3, #20]
 80021b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80021b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	f003 fe10 	bl	8005de0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	695a      	ldr	r2, [r3, #20]
 80021c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c6:	69db      	ldr	r3, [r3, #28]
 80021c8:	441a      	add	r2, r3
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80021ce:	2100      	movs	r1, #0
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f005 f9f7 	bl	80075c4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	881b      	ldrh	r3, [r3, #0]
 80021dc:	b29b      	uxth	r3, r3
 80021de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f040 81f2 	bne.w	80025cc <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	61bb      	str	r3, [r7, #24]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	461a      	mov	r2, r3
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	4413      	add	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002206:	617b      	str	r3, [r7, #20]
 8002208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d112      	bne.n	8002236 <PCD_EP_ISR_Handler+0x24e>
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	881b      	ldrh	r3, [r3, #0]
 8002214:	b29b      	uxth	r3, r3
 8002216:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800221a:	b29a      	uxth	r2, r3
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	801a      	strh	r2, [r3, #0]
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	881b      	ldrh	r3, [r3, #0]
 8002224:	b29b      	uxth	r3, r3
 8002226:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800222a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800222e:	b29a      	uxth	r2, r3
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	801a      	strh	r2, [r3, #0]
 8002234:	e02f      	b.n	8002296 <PCD_EP_ISR_Handler+0x2ae>
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	2b3e      	cmp	r3, #62	; 0x3e
 800223c:	d813      	bhi.n	8002266 <PCD_EP_ISR_Handler+0x27e>
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	085b      	lsrs	r3, r3, #1
 8002244:	633b      	str	r3, [r7, #48]	; 0x30
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b00      	cmp	r3, #0
 8002250:	d002      	beq.n	8002258 <PCD_EP_ISR_Handler+0x270>
 8002252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002254:	3301      	adds	r3, #1
 8002256:	633b      	str	r3, [r7, #48]	; 0x30
 8002258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800225a:	b29b      	uxth	r3, r3
 800225c:	029b      	lsls	r3, r3, #10
 800225e:	b29a      	uxth	r2, r3
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	801a      	strh	r2, [r3, #0]
 8002264:	e017      	b.n	8002296 <PCD_EP_ISR_Handler+0x2ae>
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	095b      	lsrs	r3, r3, #5
 800226c:	633b      	str	r3, [r7, #48]	; 0x30
 800226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	f003 031f 	and.w	r3, r3, #31
 8002276:	2b00      	cmp	r3, #0
 8002278:	d102      	bne.n	8002280 <PCD_EP_ISR_Handler+0x298>
 800227a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800227c:	3b01      	subs	r3, #1
 800227e:	633b      	str	r3, [r7, #48]	; 0x30
 8002280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002282:	b29b      	uxth	r3, r3
 8002284:	029b      	lsls	r3, r3, #10
 8002286:	b29b      	uxth	r3, r3
 8002288:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800228c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002290:	b29a      	uxth	r2, r3
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	881b      	ldrh	r3, [r3, #0]
 800229c:	b29b      	uxth	r3, r3
 800229e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022a6:	827b      	strh	r3, [r7, #18]
 80022a8:	8a7b      	ldrh	r3, [r7, #18]
 80022aa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80022ae:	827b      	strh	r3, [r7, #18]
 80022b0:	8a7b      	ldrh	r3, [r7, #18]
 80022b2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80022b6:	827b      	strh	r3, [r7, #18]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	8a7b      	ldrh	r3, [r7, #18]
 80022be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	8013      	strh	r3, [r2, #0]
 80022d2:	e17b      	b.n	80025cc <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	461a      	mov	r2, r3
 80022da:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	881b      	ldrh	r3, [r3, #0]
 80022e4:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80022e6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f280 80ea 	bge.w	80024c4 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	461a      	mov	r2, r3
 80022f6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	881b      	ldrh	r3, [r3, #0]
 8002300:	b29a      	uxth	r2, r3
 8002302:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002306:	4013      	ands	r3, r2
 8002308:	853b      	strh	r3, [r7, #40]	; 0x28
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	461a      	mov	r2, r3
 8002310:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800231a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800231e:	b292      	uxth	r2, r2
 8002320:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002322:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002326:	4613      	mov	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	4413      	add	r3, r2
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	4413      	add	r3, r2
 8002336:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233a:	7b1b      	ldrb	r3, [r3, #12]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d122      	bne.n	8002386 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002348:	b29b      	uxth	r3, r3
 800234a:	461a      	mov	r2, r3
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	4413      	add	r3, r2
 8002354:	3306      	adds	r3, #6
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6812      	ldr	r2, [r2, #0]
 800235c:	4413      	add	r3, r2
 800235e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002362:	881b      	ldrh	r3, [r3, #0]
 8002364:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002368:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800236a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800236c:	2b00      	cmp	r3, #0
 800236e:	f000 8087 	beq.w	8002480 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6818      	ldr	r0, [r3, #0]
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	6959      	ldr	r1, [r3, #20]
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	88da      	ldrh	r2, [r3, #6]
 800237e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002380:	f003 fd2e 	bl	8005de0 <USB_ReadPMA>
 8002384:	e07c      	b.n	8002480 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	78db      	ldrb	r3, [r3, #3]
 800238a:	2b02      	cmp	r3, #2
 800238c:	d108      	bne.n	80023a0 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800238e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002390:	461a      	mov	r2, r3
 8002392:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f000 f927 	bl	80025e8 <HAL_PCD_EP_DB_Receive>
 800239a:	4603      	mov	r3, r0
 800239c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800239e:	e06f      	b.n	8002480 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	461a      	mov	r2, r3
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4413      	add	r3, r2
 80023ae:	881b      	ldrh	r3, [r3, #0]
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ba:	847b      	strh	r3, [r7, #34]	; 0x22
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	461a      	mov	r2, r3
 80023c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	441a      	add	r2, r3
 80023ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80023cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80023dc:	b29b      	uxth	r3, r3
 80023de:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	461a      	mov	r2, r3
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	881b      	ldrh	r3, [r3, #0]
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d021      	beq.n	800243e <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002402:	b29b      	uxth	r3, r3
 8002404:	461a      	mov	r2, r3
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	4413      	add	r3, r2
 800240e:	3302      	adds	r3, #2
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6812      	ldr	r2, [r2, #0]
 8002416:	4413      	add	r3, r2
 8002418:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800241c:	881b      	ldrh	r3, [r3, #0]
 800241e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002422:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002424:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002426:	2b00      	cmp	r3, #0
 8002428:	d02a      	beq.n	8002480 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6818      	ldr	r0, [r3, #0]
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	6959      	ldr	r1, [r3, #20]
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	891a      	ldrh	r2, [r3, #8]
 8002436:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002438:	f003 fcd2 	bl	8005de0 <USB_ReadPMA>
 800243c:	e020      	b.n	8002480 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002446:	b29b      	uxth	r3, r3
 8002448:	461a      	mov	r2, r3
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	4413      	add	r3, r2
 8002452:	3306      	adds	r3, #6
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	6812      	ldr	r2, [r2, #0]
 800245a:	4413      	add	r3, r2
 800245c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002460:	881b      	ldrh	r3, [r3, #0]
 8002462:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002466:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002468:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800246a:	2b00      	cmp	r3, #0
 800246c:	d008      	beq.n	8002480 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6818      	ldr	r0, [r3, #0]
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	6959      	ldr	r1, [r3, #20]
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	895a      	ldrh	r2, [r3, #10]
 800247a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800247c:	f003 fcb0 	bl	8005de0 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002482:	69da      	ldr	r2, [r3, #28]
 8002484:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002486:	441a      	add	r2, r3
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	695a      	ldr	r2, [r3, #20]
 8002490:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002492:	441a      	add	r2, r3
 8002494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002496:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d004      	beq.n	80024aa <PCD_EP_ISR_Handler+0x4c2>
 80024a0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d206      	bcs.n	80024b8 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	4619      	mov	r1, r3
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f005 f887 	bl	80075c4 <HAL_PCD_DataOutStageCallback>
 80024b6:	e005      	b.n	80024c4 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024be:	4618      	mov	r0, r3
 80024c0:	f002 f814 	bl	80044ec <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80024c4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80024c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d07e      	beq.n	80025cc <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80024ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80024d2:	1c5a      	adds	r2, r3, #1
 80024d4:	4613      	mov	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4413      	add	r3, r2
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	4413      	add	r3, r2
 80024e0:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	461a      	mov	r2, r3
 80024e8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	881b      	ldrh	r3, [r3, #0]
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80024f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024fc:	843b      	strh	r3, [r7, #32]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	461a      	mov	r2, r3
 8002504:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	441a      	add	r2, r3
 800250c:	8c3b      	ldrh	r3, [r7, #32]
 800250e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002512:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002516:	b29b      	uxth	r3, r3
 8002518:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	78db      	ldrb	r3, [r3, #3]
 800251e:	2b03      	cmp	r3, #3
 8002520:	d00c      	beq.n	800253c <PCD_EP_ISR_Handler+0x554>
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	78db      	ldrb	r3, [r3, #3]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d008      	beq.n	800253c <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800252e:	2b02      	cmp	r3, #2
 8002530:	d146      	bne.n	80025c0 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002532:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002538:	2b00      	cmp	r3, #0
 800253a:	d141      	bne.n	80025c0 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002544:	b29b      	uxth	r3, r3
 8002546:	461a      	mov	r2, r3
 8002548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	4413      	add	r3, r2
 8002550:	3302      	adds	r3, #2
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	6812      	ldr	r2, [r2, #0]
 8002558:	4413      	add	r3, r2
 800255a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002564:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	699a      	ldr	r2, [r3, #24]
 800256a:	8bfb      	ldrh	r3, [r7, #30]
 800256c:	429a      	cmp	r2, r3
 800256e:	d906      	bls.n	800257e <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002572:	699a      	ldr	r2, [r3, #24]
 8002574:	8bfb      	ldrh	r3, [r7, #30]
 8002576:	1ad2      	subs	r2, r2, r3
 8002578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257a:	619a      	str	r2, [r3, #24]
 800257c:	e002      	b.n	8002584 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	2200      	movs	r2, #0
 8002582:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d106      	bne.n	800259a <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	4619      	mov	r1, r3
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f005 f831 	bl	80075fa <HAL_PCD_DataInStageCallback>
 8002598:	e018      	b.n	80025cc <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	695a      	ldr	r2, [r3, #20]
 800259e:	8bfb      	ldrh	r3, [r7, #30]
 80025a0:	441a      	add	r2, r3
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a4:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	69da      	ldr	r2, [r3, #28]
 80025aa:	8bfb      	ldrh	r3, [r7, #30]
 80025ac:	441a      	add	r2, r3
 80025ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b0:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025b8:	4618      	mov	r0, r3
 80025ba:	f001 ff97 	bl	80044ec <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80025be:	e005      	b.n	80025cc <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80025c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80025c2:	461a      	mov	r2, r3
 80025c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 f91b 	bl	8002802 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	b21b      	sxth	r3, r3
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f6ff ad0a 	blt.w	8001ff2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3738      	adds	r7, #56	; 0x38
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b088      	sub	sp, #32
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	4613      	mov	r3, r2
 80025f4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80025f6:	88fb      	ldrh	r3, [r7, #6]
 80025f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d07e      	beq.n	80026fe <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002608:	b29b      	uxth	r3, r3
 800260a:	461a      	mov	r2, r3
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	4413      	add	r3, r2
 8002614:	3302      	adds	r3, #2
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	6812      	ldr	r2, [r2, #0]
 800261c:	4413      	add	r3, r2
 800261e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002622:	881b      	ldrh	r3, [r3, #0]
 8002624:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002628:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	699a      	ldr	r2, [r3, #24]
 800262e:	8b7b      	ldrh	r3, [r7, #26]
 8002630:	429a      	cmp	r2, r3
 8002632:	d306      	bcc.n	8002642 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	699a      	ldr	r2, [r3, #24]
 8002638:	8b7b      	ldrh	r3, [r7, #26]
 800263a:	1ad2      	subs	r2, r2, r3
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	619a      	str	r2, [r3, #24]
 8002640:	e002      	b.n	8002648 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	2200      	movs	r2, #0
 8002646:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d123      	bne.n	8002698 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	461a      	mov	r2, r3
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	881b      	ldrh	r3, [r3, #0]
 8002660:	b29b      	uxth	r3, r3
 8002662:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800266a:	833b      	strh	r3, [r7, #24]
 800266c:	8b3b      	ldrh	r3, [r7, #24]
 800266e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002672:	833b      	strh	r3, [r7, #24]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	461a      	mov	r2, r3
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	441a      	add	r2, r3
 8002682:	8b3b      	ldrh	r3, [r7, #24]
 8002684:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002688:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800268c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002694:	b29b      	uxth	r3, r3
 8002696:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002698:	88fb      	ldrh	r3, [r7, #6]
 800269a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d01f      	beq.n	80026e2 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	461a      	mov	r2, r3
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	881b      	ldrh	r3, [r3, #0]
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026bc:	82fb      	strh	r3, [r7, #22]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	461a      	mov	r2, r3
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	441a      	add	r2, r3
 80026cc:	8afb      	ldrh	r3, [r7, #22]
 80026ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80026de:	b29b      	uxth	r3, r3
 80026e0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80026e2:	8b7b      	ldrh	r3, [r7, #26]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f000 8087 	beq.w	80027f8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6818      	ldr	r0, [r3, #0]
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	6959      	ldr	r1, [r3, #20]
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	891a      	ldrh	r2, [r3, #8]
 80026f6:	8b7b      	ldrh	r3, [r7, #26]
 80026f8:	f003 fb72 	bl	8005de0 <USB_ReadPMA>
 80026fc:	e07c      	b.n	80027f8 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002706:	b29b      	uxth	r3, r3
 8002708:	461a      	mov	r2, r3
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	4413      	add	r3, r2
 8002712:	3306      	adds	r3, #6
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	6812      	ldr	r2, [r2, #0]
 800271a:	4413      	add	r3, r2
 800271c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002720:	881b      	ldrh	r3, [r3, #0]
 8002722:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002726:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	699a      	ldr	r2, [r3, #24]
 800272c:	8b7b      	ldrh	r3, [r7, #26]
 800272e:	429a      	cmp	r2, r3
 8002730:	d306      	bcc.n	8002740 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	699a      	ldr	r2, [r3, #24]
 8002736:	8b7b      	ldrh	r3, [r7, #26]
 8002738:	1ad2      	subs	r2, r2, r3
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	619a      	str	r2, [r3, #24]
 800273e:	e002      	b.n	8002746 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	2200      	movs	r2, #0
 8002744:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d123      	bne.n	8002796 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	461a      	mov	r2, r3
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	4413      	add	r3, r2
 800275c:	881b      	ldrh	r3, [r3, #0]
 800275e:	b29b      	uxth	r3, r3
 8002760:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002768:	83fb      	strh	r3, [r7, #30]
 800276a:	8bfb      	ldrh	r3, [r7, #30]
 800276c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002770:	83fb      	strh	r3, [r7, #30]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	461a      	mov	r2, r3
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	441a      	add	r2, r3
 8002780:	8bfb      	ldrh	r3, [r7, #30]
 8002782:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002786:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800278a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800278e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002792:	b29b      	uxth	r3, r3
 8002794:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002796:	88fb      	ldrh	r3, [r7, #6]
 8002798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800279c:	2b00      	cmp	r3, #0
 800279e:	d11f      	bne.n	80027e0 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	461a      	mov	r2, r3
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	881b      	ldrh	r3, [r3, #0]
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ba:	83bb      	strh	r3, [r7, #28]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	461a      	mov	r2, r3
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	441a      	add	r2, r3
 80027ca:	8bbb      	ldrh	r3, [r7, #28]
 80027cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027dc:	b29b      	uxth	r3, r3
 80027de:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80027e0:	8b7b      	ldrh	r3, [r7, #26]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d008      	beq.n	80027f8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6818      	ldr	r0, [r3, #0]
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	6959      	ldr	r1, [r3, #20]
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	895a      	ldrh	r2, [r3, #10]
 80027f2:	8b7b      	ldrh	r3, [r7, #26]
 80027f4:	f003 faf4 	bl	8005de0 <USB_ReadPMA>
    }
  }

  return count;
 80027f8:	8b7b      	ldrh	r3, [r7, #26]
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3720      	adds	r7, #32
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b0a2      	sub	sp, #136	; 0x88
 8002806:	af00      	add	r7, sp, #0
 8002808:	60f8      	str	r0, [r7, #12]
 800280a:	60b9      	str	r1, [r7, #8]
 800280c:	4613      	mov	r3, r2
 800280e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002810:	88fb      	ldrh	r3, [r7, #6]
 8002812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002816:	2b00      	cmp	r3, #0
 8002818:	f000 81c7 	beq.w	8002baa <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002824:	b29b      	uxth	r3, r3
 8002826:	461a      	mov	r2, r3
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	4413      	add	r3, r2
 8002830:	3302      	adds	r3, #2
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	6812      	ldr	r2, [r2, #0]
 8002838:	4413      	add	r3, r2
 800283a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800283e:	881b      	ldrh	r3, [r3, #0]
 8002840:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002844:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	699a      	ldr	r2, [r3, #24]
 800284c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002850:	429a      	cmp	r2, r3
 8002852:	d907      	bls.n	8002864 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	699a      	ldr	r2, [r3, #24]
 8002858:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800285c:	1ad2      	subs	r2, r2, r3
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	619a      	str	r2, [r3, #24]
 8002862:	e002      	b.n	800286a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	2200      	movs	r2, #0
 8002868:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	2b00      	cmp	r3, #0
 8002870:	f040 80b9 	bne.w	80029e6 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	785b      	ldrb	r3, [r3, #1]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d126      	bne.n	80028ca <HAL_PCD_EP_DB_Transmit+0xc8>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	62bb      	str	r3, [r7, #40]	; 0x28
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800288a:	b29b      	uxth	r3, r3
 800288c:	461a      	mov	r2, r3
 800288e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002890:	4413      	add	r3, r2
 8002892:	62bb      	str	r3, [r7, #40]	; 0x28
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	011a      	lsls	r2, r3, #4
 800289a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800289c:	4413      	add	r3, r2
 800289e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80028a2:	627b      	str	r3, [r7, #36]	; 0x24
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	881b      	ldrh	r3, [r3, #0]
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	801a      	strh	r2, [r3, #0]
 80028b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b6:	881b      	ldrh	r3, [r3, #0]
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	801a      	strh	r2, [r3, #0]
 80028c8:	e01a      	b.n	8002900 <HAL_PCD_EP_DB_Transmit+0xfe>
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	785b      	ldrb	r3, [r3, #1]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d116      	bne.n	8002900 <HAL_PCD_EP_DB_Transmit+0xfe>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	633b      	str	r3, [r7, #48]	; 0x30
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	461a      	mov	r2, r3
 80028e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e6:	4413      	add	r3, r2
 80028e8:	633b      	str	r3, [r7, #48]	; 0x30
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	011a      	lsls	r2, r3, #4
 80028f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f2:	4413      	add	r3, r2
 80028f4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80028f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028fc:	2200      	movs	r2, #0
 80028fe:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	623b      	str	r3, [r7, #32]
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	785b      	ldrb	r3, [r3, #1]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d126      	bne.n	800295c <HAL_PCD_EP_DB_Transmit+0x15a>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	61bb      	str	r3, [r7, #24]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800291c:	b29b      	uxth	r3, r3
 800291e:	461a      	mov	r2, r3
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	4413      	add	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	011a      	lsls	r2, r3, #4
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	4413      	add	r3, r2
 8002930:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002934:	617b      	str	r3, [r7, #20]
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	881b      	ldrh	r3, [r3, #0]
 800293a:	b29b      	uxth	r3, r3
 800293c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002940:	b29a      	uxth	r2, r3
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	801a      	strh	r2, [r3, #0]
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	881b      	ldrh	r3, [r3, #0]
 800294a:	b29b      	uxth	r3, r3
 800294c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002950:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002954:	b29a      	uxth	r2, r3
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	801a      	strh	r2, [r3, #0]
 800295a:	e017      	b.n	800298c <HAL_PCD_EP_DB_Transmit+0x18a>
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	785b      	ldrb	r3, [r3, #1]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d113      	bne.n	800298c <HAL_PCD_EP_DB_Transmit+0x18a>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800296c:	b29b      	uxth	r3, r3
 800296e:	461a      	mov	r2, r3
 8002970:	6a3b      	ldr	r3, [r7, #32]
 8002972:	4413      	add	r3, r2
 8002974:	623b      	str	r3, [r7, #32]
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	011a      	lsls	r2, r3, #4
 800297c:	6a3b      	ldr	r3, [r7, #32]
 800297e:	4413      	add	r3, r2
 8002980:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002984:	61fb      	str	r3, [r7, #28]
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	2200      	movs	r2, #0
 800298a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	4619      	mov	r1, r3
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f004 fe31 	bl	80075fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002998:	88fb      	ldrh	r3, [r7, #6]
 800299a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f000 82d4 	beq.w	8002f4c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	461a      	mov	r2, r3
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	4413      	add	r3, r2
 80029b2:	881b      	ldrh	r3, [r3, #0]
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029be:	827b      	strh	r3, [r7, #18]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	461a      	mov	r2, r3
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	441a      	add	r2, r3
 80029ce:	8a7b      	ldrh	r3, [r7, #18]
 80029d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	8013      	strh	r3, [r2, #0]
 80029e4:	e2b2      	b.n	8002f4c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029e6:	88fb      	ldrh	r3, [r7, #6]
 80029e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d021      	beq.n	8002a34 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	461a      	mov	r2, r3
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	881b      	ldrh	r3, [r3, #0]
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a0a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	461a      	mov	r2, r3
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	441a      	add	r2, r3
 8002a1c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002a20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	f040 8286 	bne.w	8002f4c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	695a      	ldr	r2, [r3, #20]
 8002a44:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a48:	441a      	add	r2, r3
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	69da      	ldr	r2, [r3, #28]
 8002a52:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a56:	441a      	add	r2, r3
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	6a1a      	ldr	r2, [r3, #32]
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d309      	bcc.n	8002a7c <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	6a1a      	ldr	r2, [r3, #32]
 8002a72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a74:	1ad2      	subs	r2, r2, r3
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	621a      	str	r2, [r3, #32]
 8002a7a:	e015      	b.n	8002aa8 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	6a1b      	ldr	r3, [r3, #32]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d107      	bne.n	8002a94 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002a84:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a88:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002a92:	e009      	b.n	8002aa8 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	785b      	ldrb	r3, [r3, #1]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d155      	bne.n	8002b5c <HAL_PCD_EP_DB_Transmit+0x35a>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac4:	4413      	add	r3, r2
 8002ac6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	011a      	lsls	r2, r3, #4
 8002ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ad0:	4413      	add	r3, r2
 8002ad2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ad6:	637b      	str	r3, [r7, #52]	; 0x34
 8002ad8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d112      	bne.n	8002b04 <HAL_PCD_EP_DB_Transmit+0x302>
 8002ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ae0:	881b      	ldrh	r3, [r3, #0]
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aec:	801a      	strh	r2, [r3, #0]
 8002aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002af0:	881b      	ldrh	r3, [r3, #0]
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002af8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b00:	801a      	strh	r2, [r3, #0]
 8002b02:	e047      	b.n	8002b94 <HAL_PCD_EP_DB_Transmit+0x392>
 8002b04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b06:	2b3e      	cmp	r3, #62	; 0x3e
 8002b08:	d811      	bhi.n	8002b2e <HAL_PCD_EP_DB_Transmit+0x32c>
 8002b0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b0c:	085b      	lsrs	r3, r3, #1
 8002b0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d002      	beq.n	8002b20 <HAL_PCD_EP_DB_Transmit+0x31e>
 8002b1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	029b      	lsls	r3, r3, #10
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b2a:	801a      	strh	r2, [r3, #0]
 8002b2c:	e032      	b.n	8002b94 <HAL_PCD_EP_DB_Transmit+0x392>
 8002b2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b30:	095b      	lsrs	r3, r3, #5
 8002b32:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b36:	f003 031f 	and.w	r3, r3, #31
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d102      	bne.n	8002b44 <HAL_PCD_EP_DB_Transmit+0x342>
 8002b3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b40:	3b01      	subs	r3, #1
 8002b42:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	029b      	lsls	r3, r3, #10
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b58:	801a      	strh	r2, [r3, #0]
 8002b5a:	e01b      	b.n	8002b94 <HAL_PCD_EP_DB_Transmit+0x392>
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	785b      	ldrb	r3, [r3, #1]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d117      	bne.n	8002b94 <HAL_PCD_EP_DB_Transmit+0x392>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	643b      	str	r3, [r7, #64]	; 0x40
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	461a      	mov	r2, r3
 8002b76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b78:	4413      	add	r3, r2
 8002b7a:	643b      	str	r3, [r7, #64]	; 0x40
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	011a      	lsls	r2, r3, #4
 8002b82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b84:	4413      	add	r3, r2
 8002b86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b92:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6818      	ldr	r0, [r3, #0]
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	6959      	ldr	r1, [r3, #20]
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	891a      	ldrh	r2, [r3, #8]
 8002ba0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	f003 f8d7 	bl	8005d56 <USB_WritePMA>
 8002ba8:	e1d0      	b.n	8002f4c <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	4413      	add	r3, r2
 8002bbe:	3306      	adds	r3, #6
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	6812      	ldr	r2, [r2, #0]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bcc:	881b      	ldrh	r3, [r3, #0]
 8002bce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bd2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	699a      	ldr	r2, [r3, #24]
 8002bda:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d307      	bcc.n	8002bf2 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	699a      	ldr	r2, [r3, #24]
 8002be6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002bea:	1ad2      	subs	r2, r2, r3
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	619a      	str	r2, [r3, #24]
 8002bf0:	e002      	b.n	8002bf8 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f040 80c4 	bne.w	8002d8a <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	785b      	ldrb	r3, [r3, #1]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d126      	bne.n	8002c58 <HAL_PCD_EP_DB_Transmit+0x456>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c1e:	4413      	add	r3, r2
 8002c20:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	011a      	lsls	r2, r3, #4
 8002c28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c2a:	4413      	add	r3, r2
 8002c2c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c30:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c34:	881b      	ldrh	r3, [r3, #0]
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c40:	801a      	strh	r2, [r3, #0]
 8002c42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c44:	881b      	ldrh	r3, [r3, #0]
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c54:	801a      	strh	r2, [r3, #0]
 8002c56:	e01a      	b.n	8002c8e <HAL_PCD_EP_DB_Transmit+0x48c>
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	785b      	ldrb	r3, [r3, #1]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d116      	bne.n	8002c8e <HAL_PCD_EP_DB_Transmit+0x48c>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	677b      	str	r3, [r7, #116]	; 0x74
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	461a      	mov	r2, r3
 8002c72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c74:	4413      	add	r3, r2
 8002c76:	677b      	str	r3, [r7, #116]	; 0x74
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	011a      	lsls	r2, r3, #4
 8002c7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c80:	4413      	add	r3, r2
 8002c82:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c86:	673b      	str	r3, [r7, #112]	; 0x70
 8002c88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	785b      	ldrb	r3, [r3, #1]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d12f      	bne.n	8002cfc <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	461a      	mov	r2, r3
 8002cb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cb4:	4413      	add	r3, r2
 8002cb6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	011a      	lsls	r2, r3, #4
 8002cc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cc4:	4413      	add	r3, r2
 8002cc6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002cca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002cce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002cd2:	881b      	ldrh	r3, [r3, #0]
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ce0:	801a      	strh	r2, [r3, #0]
 8002ce2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ce6:	881b      	ldrh	r3, [r3, #0]
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002cf8:	801a      	strh	r2, [r3, #0]
 8002cfa:	e017      	b.n	8002d2c <HAL_PCD_EP_DB_Transmit+0x52a>
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	785b      	ldrb	r3, [r3, #1]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d113      	bne.n	8002d2c <HAL_PCD_EP_DB_Transmit+0x52a>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	461a      	mov	r2, r3
 8002d10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d12:	4413      	add	r3, r2
 8002d14:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	011a      	lsls	r2, r3, #4
 8002d1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d1e:	4413      	add	r3, r2
 8002d20:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d24:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002d26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d28:	2200      	movs	r2, #0
 8002d2a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	4619      	mov	r1, r3
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f004 fc61 	bl	80075fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002d38:	88fb      	ldrh	r3, [r7, #6]
 8002d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f040 8104 	bne.w	8002f4c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	461a      	mov	r2, r3
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	4413      	add	r3, r2
 8002d52:	881b      	ldrh	r3, [r3, #0]
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d5e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	461a      	mov	r2, r3
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	441a      	add	r2, r3
 8002d70:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002d74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	8013      	strh	r3, [r2, #0]
 8002d88:	e0e0      	b.n	8002f4c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002d8a:	88fb      	ldrh	r3, [r7, #6]
 8002d8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d121      	bne.n	8002dd8 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	461a      	mov	r2, r3
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4413      	add	r3, r2
 8002da2:	881b      	ldrh	r3, [r3, #0]
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dae:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	461a      	mov	r2, r3
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	441a      	add	r2, r3
 8002dc0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002dc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dcc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	f040 80b4 	bne.w	8002f4c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	695a      	ldr	r2, [r3, #20]
 8002de8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002dec:	441a      	add	r2, r3
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	69da      	ldr	r2, [r3, #28]
 8002df6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002dfa:	441a      	add	r2, r3
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	6a1a      	ldr	r2, [r3, #32]
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d309      	bcc.n	8002e20 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	6a1a      	ldr	r2, [r3, #32]
 8002e16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e18:	1ad2      	subs	r2, r2, r3
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	621a      	str	r2, [r3, #32]
 8002e1e:	e015      	b.n	8002e4c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d107      	bne.n	8002e38 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002e28:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e2c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002e36:	e009      	b.n	8002e4c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	2200      	movs	r2, #0
 8002e42:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	667b      	str	r3, [r7, #100]	; 0x64
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	785b      	ldrb	r3, [r3, #1]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d155      	bne.n	8002f06 <HAL_PCD_EP_DB_Transmit+0x704>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e6e:	4413      	add	r3, r2
 8002e70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	011a      	lsls	r2, r3, #4
 8002e78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e7a:	4413      	add	r3, r2
 8002e7c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e80:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d112      	bne.n	8002eae <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002e88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e8a:	881b      	ldrh	r3, [r3, #0]
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e96:	801a      	strh	r2, [r3, #0]
 8002e98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e9a:	881b      	ldrh	r3, [r3, #0]
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ea2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002eaa:	801a      	strh	r2, [r3, #0]
 8002eac:	e044      	b.n	8002f38 <HAL_PCD_EP_DB_Transmit+0x736>
 8002eae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eb0:	2b3e      	cmp	r3, #62	; 0x3e
 8002eb2:	d811      	bhi.n	8002ed8 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002eb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eb6:	085b      	lsrs	r3, r3, #1
 8002eb8:	657b      	str	r3, [r7, #84]	; 0x54
 8002eba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d002      	beq.n	8002eca <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002ec4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	657b      	str	r3, [r7, #84]	; 0x54
 8002eca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	029b      	lsls	r3, r3, #10
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ed4:	801a      	strh	r2, [r3, #0]
 8002ed6:	e02f      	b.n	8002f38 <HAL_PCD_EP_DB_Transmit+0x736>
 8002ed8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eda:	095b      	lsrs	r3, r3, #5
 8002edc:	657b      	str	r3, [r7, #84]	; 0x54
 8002ede:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ee0:	f003 031f 	and.w	r3, r3, #31
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d102      	bne.n	8002eee <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002ee8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002eea:	3b01      	subs	r3, #1
 8002eec:	657b      	str	r3, [r7, #84]	; 0x54
 8002eee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	029b      	lsls	r3, r3, #10
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002efa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f02:	801a      	strh	r2, [r3, #0]
 8002f04:	e018      	b.n	8002f38 <HAL_PCD_EP_DB_Transmit+0x736>
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	785b      	ldrb	r3, [r3, #1]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d114      	bne.n	8002f38 <HAL_PCD_EP_DB_Transmit+0x736>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	461a      	mov	r2, r3
 8002f1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f1c:	4413      	add	r3, r2
 8002f1e:	667b      	str	r3, [r7, #100]	; 0x64
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	011a      	lsls	r2, r3, #4
 8002f26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f28:	4413      	add	r3, r2
 8002f2a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f2e:	663b      	str	r3, [r7, #96]	; 0x60
 8002f30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f36:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6818      	ldr	r0, [r3, #0]
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	6959      	ldr	r1, [r3, #20]
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	895a      	ldrh	r2, [r3, #10]
 8002f44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	f002 ff05 	bl	8005d56 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	461a      	mov	r2, r3
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	4413      	add	r3, r2
 8002f5a:	881b      	ldrh	r3, [r3, #0]
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f66:	823b      	strh	r3, [r7, #16]
 8002f68:	8a3b      	ldrh	r3, [r7, #16]
 8002f6a:	f083 0310 	eor.w	r3, r3, #16
 8002f6e:	823b      	strh	r3, [r7, #16]
 8002f70:	8a3b      	ldrh	r3, [r7, #16]
 8002f72:	f083 0320 	eor.w	r3, r3, #32
 8002f76:	823b      	strh	r3, [r7, #16]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	441a      	add	r2, r3
 8002f86:	8a3b      	ldrh	r3, [r7, #16]
 8002f88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3788      	adds	r7, #136	; 0x88
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b087      	sub	sp, #28
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	60f8      	str	r0, [r7, #12]
 8002fae:	607b      	str	r3, [r7, #4]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	817b      	strh	r3, [r7, #10]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002fb8:	897b      	ldrh	r3, [r7, #10]
 8002fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00b      	beq.n	8002fdc <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fc4:	897b      	ldrh	r3, [r7, #10]
 8002fc6:	f003 0307 	and.w	r3, r3, #7
 8002fca:	1c5a      	adds	r2, r3, #1
 8002fcc:	4613      	mov	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4413      	add	r3, r2
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	617b      	str	r3, [r7, #20]
 8002fda:	e009      	b.n	8002ff0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002fdc:	897a      	ldrh	r2, [r7, #10]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	4413      	add	r3, r2
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	4413      	add	r3, r2
 8002fee:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002ff0:	893b      	ldrh	r3, [r7, #8]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d107      	bne.n	8003006 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	80da      	strh	r2, [r3, #6]
 8003004:	e00b      	b.n	800301e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	2201      	movs	r2, #1
 800300a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	b29a      	uxth	r2, r3
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	0c1b      	lsrs	r3, r3, #16
 8003018:	b29a      	uxth	r2, r3
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	371c      	adds	r7, #28
 8003024:	46bd      	mov	sp, r7
 8003026:	bc80      	pop	{r7}
 8003028:	4770      	bx	lr
	...

0800302c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e26c      	b.n	8003518 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	f000 8087 	beq.w	800315a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800304c:	4b92      	ldr	r3, [pc, #584]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f003 030c 	and.w	r3, r3, #12
 8003054:	2b04      	cmp	r3, #4
 8003056:	d00c      	beq.n	8003072 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003058:	4b8f      	ldr	r3, [pc, #572]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f003 030c 	and.w	r3, r3, #12
 8003060:	2b08      	cmp	r3, #8
 8003062:	d112      	bne.n	800308a <HAL_RCC_OscConfig+0x5e>
 8003064:	4b8c      	ldr	r3, [pc, #560]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800306c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003070:	d10b      	bne.n	800308a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003072:	4b89      	ldr	r3, [pc, #548]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d06c      	beq.n	8003158 <HAL_RCC_OscConfig+0x12c>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d168      	bne.n	8003158 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e246      	b.n	8003518 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003092:	d106      	bne.n	80030a2 <HAL_RCC_OscConfig+0x76>
 8003094:	4b80      	ldr	r3, [pc, #512]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a7f      	ldr	r2, [pc, #508]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 800309a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800309e:	6013      	str	r3, [r2, #0]
 80030a0:	e02e      	b.n	8003100 <HAL_RCC_OscConfig+0xd4>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10c      	bne.n	80030c4 <HAL_RCC_OscConfig+0x98>
 80030aa:	4b7b      	ldr	r3, [pc, #492]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a7a      	ldr	r2, [pc, #488]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 80030b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030b4:	6013      	str	r3, [r2, #0]
 80030b6:	4b78      	ldr	r3, [pc, #480]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a77      	ldr	r2, [pc, #476]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 80030bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	e01d      	b.n	8003100 <HAL_RCC_OscConfig+0xd4>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030cc:	d10c      	bne.n	80030e8 <HAL_RCC_OscConfig+0xbc>
 80030ce:	4b72      	ldr	r3, [pc, #456]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a71      	ldr	r2, [pc, #452]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 80030d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030d8:	6013      	str	r3, [r2, #0]
 80030da:	4b6f      	ldr	r3, [pc, #444]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a6e      	ldr	r2, [pc, #440]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 80030e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030e4:	6013      	str	r3, [r2, #0]
 80030e6:	e00b      	b.n	8003100 <HAL_RCC_OscConfig+0xd4>
 80030e8:	4b6b      	ldr	r3, [pc, #428]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a6a      	ldr	r2, [pc, #424]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 80030ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030f2:	6013      	str	r3, [r2, #0]
 80030f4:	4b68      	ldr	r3, [pc, #416]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a67      	ldr	r2, [pc, #412]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 80030fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d013      	beq.n	8003130 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003108:	f7fe f9a6 	bl	8001458 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003110:	f7fe f9a2 	bl	8001458 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b64      	cmp	r3, #100	; 0x64
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e1fa      	b.n	8003518 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003122:	4b5d      	ldr	r3, [pc, #372]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0f0      	beq.n	8003110 <HAL_RCC_OscConfig+0xe4>
 800312e:	e014      	b.n	800315a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003130:	f7fe f992 	bl	8001458 <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003138:	f7fe f98e 	bl	8001458 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b64      	cmp	r3, #100	; 0x64
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e1e6      	b.n	8003518 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800314a:	4b53      	ldr	r3, [pc, #332]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1f0      	bne.n	8003138 <HAL_RCC_OscConfig+0x10c>
 8003156:	e000      	b.n	800315a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d063      	beq.n	800322e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003166:	4b4c      	ldr	r3, [pc, #304]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f003 030c 	and.w	r3, r3, #12
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00b      	beq.n	800318a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003172:	4b49      	ldr	r3, [pc, #292]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f003 030c 	and.w	r3, r3, #12
 800317a:	2b08      	cmp	r3, #8
 800317c:	d11c      	bne.n	80031b8 <HAL_RCC_OscConfig+0x18c>
 800317e:	4b46      	ldr	r3, [pc, #280]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d116      	bne.n	80031b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800318a:	4b43      	ldr	r3, [pc, #268]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d005      	beq.n	80031a2 <HAL_RCC_OscConfig+0x176>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d001      	beq.n	80031a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e1ba      	b.n	8003518 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a2:	4b3d      	ldr	r3, [pc, #244]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	4939      	ldr	r1, [pc, #228]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031b6:	e03a      	b.n	800322e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d020      	beq.n	8003202 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031c0:	4b36      	ldr	r3, [pc, #216]	; (800329c <HAL_RCC_OscConfig+0x270>)
 80031c2:	2201      	movs	r2, #1
 80031c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c6:	f7fe f947 	bl	8001458 <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031cc:	e008      	b.n	80031e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031ce:	f7fe f943 	bl	8001458 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e19b      	b.n	8003518 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e0:	4b2d      	ldr	r3, [pc, #180]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0f0      	beq.n	80031ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ec:	4b2a      	ldr	r3, [pc, #168]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	4927      	ldr	r1, [pc, #156]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	600b      	str	r3, [r1, #0]
 8003200:	e015      	b.n	800322e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003202:	4b26      	ldr	r3, [pc, #152]	; (800329c <HAL_RCC_OscConfig+0x270>)
 8003204:	2200      	movs	r2, #0
 8003206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003208:	f7fe f926 	bl	8001458 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003210:	f7fe f922 	bl	8001458 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e17a      	b.n	8003518 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003222:	4b1d      	ldr	r3, [pc, #116]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1f0      	bne.n	8003210 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b00      	cmp	r3, #0
 8003238:	d03a      	beq.n	80032b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d019      	beq.n	8003276 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003242:	4b17      	ldr	r3, [pc, #92]	; (80032a0 <HAL_RCC_OscConfig+0x274>)
 8003244:	2201      	movs	r2, #1
 8003246:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003248:	f7fe f906 	bl	8001458 <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003250:	f7fe f902 	bl	8001458 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e15a      	b.n	8003518 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003262:	4b0d      	ldr	r3, [pc, #52]	; (8003298 <HAL_RCC_OscConfig+0x26c>)
 8003264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d0f0      	beq.n	8003250 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800326e:	2001      	movs	r0, #1
 8003270:	f000 faa6 	bl	80037c0 <RCC_Delay>
 8003274:	e01c      	b.n	80032b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003276:	4b0a      	ldr	r3, [pc, #40]	; (80032a0 <HAL_RCC_OscConfig+0x274>)
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800327c:	f7fe f8ec 	bl	8001458 <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003282:	e00f      	b.n	80032a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003284:	f7fe f8e8 	bl	8001458 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d908      	bls.n	80032a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e140      	b.n	8003518 <HAL_RCC_OscConfig+0x4ec>
 8003296:	bf00      	nop
 8003298:	40021000 	.word	0x40021000
 800329c:	42420000 	.word	0x42420000
 80032a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032a4:	4b9e      	ldr	r3, [pc, #632]	; (8003520 <HAL_RCC_OscConfig+0x4f4>)
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1e9      	bne.n	8003284 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0304 	and.w	r3, r3, #4
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f000 80a6 	beq.w	800340a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032be:	2300      	movs	r3, #0
 80032c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032c2:	4b97      	ldr	r3, [pc, #604]	; (8003520 <HAL_RCC_OscConfig+0x4f4>)
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10d      	bne.n	80032ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032ce:	4b94      	ldr	r3, [pc, #592]	; (8003520 <HAL_RCC_OscConfig+0x4f4>)
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	4a93      	ldr	r2, [pc, #588]	; (8003520 <HAL_RCC_OscConfig+0x4f4>)
 80032d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032d8:	61d3      	str	r3, [r2, #28]
 80032da:	4b91      	ldr	r3, [pc, #580]	; (8003520 <HAL_RCC_OscConfig+0x4f4>)
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e2:	60bb      	str	r3, [r7, #8]
 80032e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032e6:	2301      	movs	r3, #1
 80032e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ea:	4b8e      	ldr	r3, [pc, #568]	; (8003524 <HAL_RCC_OscConfig+0x4f8>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d118      	bne.n	8003328 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032f6:	4b8b      	ldr	r3, [pc, #556]	; (8003524 <HAL_RCC_OscConfig+0x4f8>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a8a      	ldr	r2, [pc, #552]	; (8003524 <HAL_RCC_OscConfig+0x4f8>)
 80032fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003300:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003302:	f7fe f8a9 	bl	8001458 <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003308:	e008      	b.n	800331c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800330a:	f7fe f8a5 	bl	8001458 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b64      	cmp	r3, #100	; 0x64
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e0fd      	b.n	8003518 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800331c:	4b81      	ldr	r3, [pc, #516]	; (8003524 <HAL_RCC_OscConfig+0x4f8>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003324:	2b00      	cmp	r3, #0
 8003326:	d0f0      	beq.n	800330a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d106      	bne.n	800333e <HAL_RCC_OscConfig+0x312>
 8003330:	4b7b      	ldr	r3, [pc, #492]	; (8003520 <HAL_RCC_OscConfig+0x4f4>)
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	4a7a      	ldr	r2, [pc, #488]	; (8003520 <HAL_RCC_OscConfig+0x4f4>)
 8003336:	f043 0301 	orr.w	r3, r3, #1
 800333a:	6213      	str	r3, [r2, #32]
 800333c:	e02d      	b.n	800339a <HAL_RCC_OscConfig+0x36e>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10c      	bne.n	8003360 <HAL_RCC_OscConfig+0x334>
 8003346:	4b76      	ldr	r3, [pc, #472]	; (8003520 <HAL_RCC_OscConfig+0x4f4>)
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	4a75      	ldr	r2, [pc, #468]	; (8003520 <HAL_RCC_OscConfig+0x4f4>)
 800334c:	f023 0301 	bic.w	r3, r3, #1
 8003350:	6213      	str	r3, [r2, #32]
 8003352:	4b73      	ldr	r3, [pc, #460]	; (8003520 <HAL_RCC_OscConfig+0x4f4>)
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	4a72      	ldr	r2, [pc, #456]	; (8003520 <HAL_RCC_OscConfig+0x4f4>)
 8003358:	f023 0304 	bic.w	r3, r3, #4
 800335c:	6213      	str	r3, [r2, #32]
 800335e:	e01c      	b.n	800339a <HAL_RCC_OscConfig+0x36e>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	2b05      	cmp	r3, #5
 8003366:	d10c      	bne.n	8003382 <HAL_RCC_OscConfig+0x356>
 8003368:	4b6d      	ldr	r3, [pc, #436]	; (8003520 <HAL_RCC_OscConfig+0x4f4>)
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	4a6c      	ldr	r2, [pc, #432]	; (8003520 <HAL_RCC_OscConfig+0x4f4>)
 800336e:	f043 0304 	orr.w	r3, r3, #4
 8003372:	6213      	str	r3, [r2, #32]
 8003374:	4b6a      	ldr	r3, [pc, #424]	; (8003520 <HAL_RCC_OscConfig+0x4f4>)
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	4a69      	ldr	r2, [pc, #420]	; (8003520 <HAL_RCC_OscConfig+0x4f4>)
 800337a:	f043 0301 	orr.w	r3, r3, #1
 800337e:	6213      	str	r3, [r2, #32]
 8003380:	e00b      	b.n	800339a <HAL_RCC_OscConfig+0x36e>
 8003382:	4b67      	ldr	r3, [pc, #412]	; (8003520 <HAL_RCC_OscConfig+0x4f4>)
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	4a66      	ldr	r2, [pc, #408]	; (8003520 <HAL_RCC_OscConfig+0x4f4>)
 8003388:	f023 0301 	bic.w	r3, r3, #1
 800338c:	6213      	str	r3, [r2, #32]
 800338e:	4b64      	ldr	r3, [pc, #400]	; (8003520 <HAL_RCC_OscConfig+0x4f4>)
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	4a63      	ldr	r2, [pc, #396]	; (8003520 <HAL_RCC_OscConfig+0x4f4>)
 8003394:	f023 0304 	bic.w	r3, r3, #4
 8003398:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d015      	beq.n	80033ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033a2:	f7fe f859 	bl	8001458 <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033a8:	e00a      	b.n	80033c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033aa:	f7fe f855 	bl	8001458 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d901      	bls.n	80033c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e0ab      	b.n	8003518 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033c0:	4b57      	ldr	r3, [pc, #348]	; (8003520 <HAL_RCC_OscConfig+0x4f4>)
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d0ee      	beq.n	80033aa <HAL_RCC_OscConfig+0x37e>
 80033cc:	e014      	b.n	80033f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ce:	f7fe f843 	bl	8001458 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033d4:	e00a      	b.n	80033ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033d6:	f7fe f83f 	bl	8001458 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d901      	bls.n	80033ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e095      	b.n	8003518 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033ec:	4b4c      	ldr	r3, [pc, #304]	; (8003520 <HAL_RCC_OscConfig+0x4f4>)
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1ee      	bne.n	80033d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033f8:	7dfb      	ldrb	r3, [r7, #23]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d105      	bne.n	800340a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033fe:	4b48      	ldr	r3, [pc, #288]	; (8003520 <HAL_RCC_OscConfig+0x4f4>)
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	4a47      	ldr	r2, [pc, #284]	; (8003520 <HAL_RCC_OscConfig+0x4f4>)
 8003404:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003408:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 8081 	beq.w	8003516 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003414:	4b42      	ldr	r3, [pc, #264]	; (8003520 <HAL_RCC_OscConfig+0x4f4>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f003 030c 	and.w	r3, r3, #12
 800341c:	2b08      	cmp	r3, #8
 800341e:	d061      	beq.n	80034e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	69db      	ldr	r3, [r3, #28]
 8003424:	2b02      	cmp	r3, #2
 8003426:	d146      	bne.n	80034b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003428:	4b3f      	ldr	r3, [pc, #252]	; (8003528 <HAL_RCC_OscConfig+0x4fc>)
 800342a:	2200      	movs	r2, #0
 800342c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342e:	f7fe f813 	bl	8001458 <HAL_GetTick>
 8003432:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003434:	e008      	b.n	8003448 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003436:	f7fe f80f 	bl	8001458 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d901      	bls.n	8003448 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e067      	b.n	8003518 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003448:	4b35      	ldr	r3, [pc, #212]	; (8003520 <HAL_RCC_OscConfig+0x4f4>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1f0      	bne.n	8003436 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800345c:	d108      	bne.n	8003470 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800345e:	4b30      	ldr	r3, [pc, #192]	; (8003520 <HAL_RCC_OscConfig+0x4f4>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	492d      	ldr	r1, [pc, #180]	; (8003520 <HAL_RCC_OscConfig+0x4f4>)
 800346c:	4313      	orrs	r3, r2
 800346e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003470:	4b2b      	ldr	r3, [pc, #172]	; (8003520 <HAL_RCC_OscConfig+0x4f4>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a19      	ldr	r1, [r3, #32]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	430b      	orrs	r3, r1
 8003482:	4927      	ldr	r1, [pc, #156]	; (8003520 <HAL_RCC_OscConfig+0x4f4>)
 8003484:	4313      	orrs	r3, r2
 8003486:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003488:	4b27      	ldr	r3, [pc, #156]	; (8003528 <HAL_RCC_OscConfig+0x4fc>)
 800348a:	2201      	movs	r2, #1
 800348c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348e:	f7fd ffe3 	bl	8001458 <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003494:	e008      	b.n	80034a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003496:	f7fd ffdf 	bl	8001458 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e037      	b.n	8003518 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034a8:	4b1d      	ldr	r3, [pc, #116]	; (8003520 <HAL_RCC_OscConfig+0x4f4>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d0f0      	beq.n	8003496 <HAL_RCC_OscConfig+0x46a>
 80034b4:	e02f      	b.n	8003516 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034b6:	4b1c      	ldr	r3, [pc, #112]	; (8003528 <HAL_RCC_OscConfig+0x4fc>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034bc:	f7fd ffcc 	bl	8001458 <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c4:	f7fd ffc8 	bl	8001458 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e020      	b.n	8003518 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034d6:	4b12      	ldr	r3, [pc, #72]	; (8003520 <HAL_RCC_OscConfig+0x4f4>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1f0      	bne.n	80034c4 <HAL_RCC_OscConfig+0x498>
 80034e2:	e018      	b.n	8003516 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	69db      	ldr	r3, [r3, #28]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d101      	bne.n	80034f0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e013      	b.n	8003518 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034f0:	4b0b      	ldr	r3, [pc, #44]	; (8003520 <HAL_RCC_OscConfig+0x4f4>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	429a      	cmp	r2, r3
 8003502:	d106      	bne.n	8003512 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800350e:	429a      	cmp	r2, r3
 8003510:	d001      	beq.n	8003516 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e000      	b.n	8003518 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3718      	adds	r7, #24
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	40021000 	.word	0x40021000
 8003524:	40007000 	.word	0x40007000
 8003528:	42420060 	.word	0x42420060

0800352c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d101      	bne.n	8003540 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e0d0      	b.n	80036e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003540:	4b6a      	ldr	r3, [pc, #424]	; (80036ec <HAL_RCC_ClockConfig+0x1c0>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0307 	and.w	r3, r3, #7
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	429a      	cmp	r2, r3
 800354c:	d910      	bls.n	8003570 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800354e:	4b67      	ldr	r3, [pc, #412]	; (80036ec <HAL_RCC_ClockConfig+0x1c0>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f023 0207 	bic.w	r2, r3, #7
 8003556:	4965      	ldr	r1, [pc, #404]	; (80036ec <HAL_RCC_ClockConfig+0x1c0>)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	4313      	orrs	r3, r2
 800355c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800355e:	4b63      	ldr	r3, [pc, #396]	; (80036ec <HAL_RCC_ClockConfig+0x1c0>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0307 	and.w	r3, r3, #7
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	429a      	cmp	r2, r3
 800356a:	d001      	beq.n	8003570 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e0b8      	b.n	80036e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d020      	beq.n	80035be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0304 	and.w	r3, r3, #4
 8003584:	2b00      	cmp	r3, #0
 8003586:	d005      	beq.n	8003594 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003588:	4b59      	ldr	r3, [pc, #356]	; (80036f0 <HAL_RCC_ClockConfig+0x1c4>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	4a58      	ldr	r2, [pc, #352]	; (80036f0 <HAL_RCC_ClockConfig+0x1c4>)
 800358e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003592:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0308 	and.w	r3, r3, #8
 800359c:	2b00      	cmp	r3, #0
 800359e:	d005      	beq.n	80035ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035a0:	4b53      	ldr	r3, [pc, #332]	; (80036f0 <HAL_RCC_ClockConfig+0x1c4>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	4a52      	ldr	r2, [pc, #328]	; (80036f0 <HAL_RCC_ClockConfig+0x1c4>)
 80035a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80035aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035ac:	4b50      	ldr	r3, [pc, #320]	; (80036f0 <HAL_RCC_ClockConfig+0x1c4>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	494d      	ldr	r1, [pc, #308]	; (80036f0 <HAL_RCC_ClockConfig+0x1c4>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d040      	beq.n	800364c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d107      	bne.n	80035e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035d2:	4b47      	ldr	r3, [pc, #284]	; (80036f0 <HAL_RCC_ClockConfig+0x1c4>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d115      	bne.n	800360a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e07f      	b.n	80036e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d107      	bne.n	80035fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ea:	4b41      	ldr	r3, [pc, #260]	; (80036f0 <HAL_RCC_ClockConfig+0x1c4>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d109      	bne.n	800360a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e073      	b.n	80036e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035fa:	4b3d      	ldr	r3, [pc, #244]	; (80036f0 <HAL_RCC_ClockConfig+0x1c4>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e06b      	b.n	80036e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800360a:	4b39      	ldr	r3, [pc, #228]	; (80036f0 <HAL_RCC_ClockConfig+0x1c4>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f023 0203 	bic.w	r2, r3, #3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	4936      	ldr	r1, [pc, #216]	; (80036f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003618:	4313      	orrs	r3, r2
 800361a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800361c:	f7fd ff1c 	bl	8001458 <HAL_GetTick>
 8003620:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003622:	e00a      	b.n	800363a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003624:	f7fd ff18 	bl	8001458 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003632:	4293      	cmp	r3, r2
 8003634:	d901      	bls.n	800363a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e053      	b.n	80036e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800363a:	4b2d      	ldr	r3, [pc, #180]	; (80036f0 <HAL_RCC_ClockConfig+0x1c4>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f003 020c 	and.w	r2, r3, #12
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	429a      	cmp	r2, r3
 800364a:	d1eb      	bne.n	8003624 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800364c:	4b27      	ldr	r3, [pc, #156]	; (80036ec <HAL_RCC_ClockConfig+0x1c0>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	429a      	cmp	r2, r3
 8003658:	d210      	bcs.n	800367c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800365a:	4b24      	ldr	r3, [pc, #144]	; (80036ec <HAL_RCC_ClockConfig+0x1c0>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f023 0207 	bic.w	r2, r3, #7
 8003662:	4922      	ldr	r1, [pc, #136]	; (80036ec <HAL_RCC_ClockConfig+0x1c0>)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	4313      	orrs	r3, r2
 8003668:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800366a:	4b20      	ldr	r3, [pc, #128]	; (80036ec <HAL_RCC_ClockConfig+0x1c0>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	683a      	ldr	r2, [r7, #0]
 8003674:	429a      	cmp	r2, r3
 8003676:	d001      	beq.n	800367c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e032      	b.n	80036e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b00      	cmp	r3, #0
 8003686:	d008      	beq.n	800369a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003688:	4b19      	ldr	r3, [pc, #100]	; (80036f0 <HAL_RCC_ClockConfig+0x1c4>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	4916      	ldr	r1, [pc, #88]	; (80036f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003696:	4313      	orrs	r3, r2
 8003698:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0308 	and.w	r3, r3, #8
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d009      	beq.n	80036ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036a6:	4b12      	ldr	r3, [pc, #72]	; (80036f0 <HAL_RCC_ClockConfig+0x1c4>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	490e      	ldr	r1, [pc, #56]	; (80036f0 <HAL_RCC_ClockConfig+0x1c4>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036ba:	f000 f821 	bl	8003700 <HAL_RCC_GetSysClockFreq>
 80036be:	4602      	mov	r2, r0
 80036c0:	4b0b      	ldr	r3, [pc, #44]	; (80036f0 <HAL_RCC_ClockConfig+0x1c4>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	091b      	lsrs	r3, r3, #4
 80036c6:	f003 030f 	and.w	r3, r3, #15
 80036ca:	490a      	ldr	r1, [pc, #40]	; (80036f4 <HAL_RCC_ClockConfig+0x1c8>)
 80036cc:	5ccb      	ldrb	r3, [r1, r3]
 80036ce:	fa22 f303 	lsr.w	r3, r2, r3
 80036d2:	4a09      	ldr	r2, [pc, #36]	; (80036f8 <HAL_RCC_ClockConfig+0x1cc>)
 80036d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036d6:	4b09      	ldr	r3, [pc, #36]	; (80036fc <HAL_RCC_ClockConfig+0x1d0>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4618      	mov	r0, r3
 80036dc:	f7fd fe7a 	bl	80013d4 <HAL_InitTick>

  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	40022000 	.word	0x40022000
 80036f0:	40021000 	.word	0x40021000
 80036f4:	08009400 	.word	0x08009400
 80036f8:	20000018 	.word	0x20000018
 80036fc:	2000001c 	.word	0x2000001c

08003700 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003700:	b490      	push	{r4, r7}
 8003702:	b08a      	sub	sp, #40	; 0x28
 8003704:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003706:	4b2a      	ldr	r3, [pc, #168]	; (80037b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003708:	1d3c      	adds	r4, r7, #4
 800370a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800370c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003710:	f240 2301 	movw	r3, #513	; 0x201
 8003714:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003716:	2300      	movs	r3, #0
 8003718:	61fb      	str	r3, [r7, #28]
 800371a:	2300      	movs	r3, #0
 800371c:	61bb      	str	r3, [r7, #24]
 800371e:	2300      	movs	r3, #0
 8003720:	627b      	str	r3, [r7, #36]	; 0x24
 8003722:	2300      	movs	r3, #0
 8003724:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003726:	2300      	movs	r3, #0
 8003728:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800372a:	4b22      	ldr	r3, [pc, #136]	; (80037b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	f003 030c 	and.w	r3, r3, #12
 8003736:	2b04      	cmp	r3, #4
 8003738:	d002      	beq.n	8003740 <HAL_RCC_GetSysClockFreq+0x40>
 800373a:	2b08      	cmp	r3, #8
 800373c:	d003      	beq.n	8003746 <HAL_RCC_GetSysClockFreq+0x46>
 800373e:	e02d      	b.n	800379c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003740:	4b1d      	ldr	r3, [pc, #116]	; (80037b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003742:	623b      	str	r3, [r7, #32]
      break;
 8003744:	e02d      	b.n	80037a2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	0c9b      	lsrs	r3, r3, #18
 800374a:	f003 030f 	and.w	r3, r3, #15
 800374e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003752:	4413      	add	r3, r2
 8003754:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003758:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d013      	beq.n	800378c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003764:	4b13      	ldr	r3, [pc, #76]	; (80037b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	0c5b      	lsrs	r3, r3, #17
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003772:	4413      	add	r3, r2
 8003774:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003778:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	4a0e      	ldr	r2, [pc, #56]	; (80037b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800377e:	fb02 f203 	mul.w	r2, r2, r3
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	fbb2 f3f3 	udiv	r3, r2, r3
 8003788:	627b      	str	r3, [r7, #36]	; 0x24
 800378a:	e004      	b.n	8003796 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	4a0b      	ldr	r2, [pc, #44]	; (80037bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003790:	fb02 f303 	mul.w	r3, r2, r3
 8003794:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003798:	623b      	str	r3, [r7, #32]
      break;
 800379a:	e002      	b.n	80037a2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800379c:	4b06      	ldr	r3, [pc, #24]	; (80037b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800379e:	623b      	str	r3, [r7, #32]
      break;
 80037a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037a2:	6a3b      	ldr	r3, [r7, #32]
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3728      	adds	r7, #40	; 0x28
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bc90      	pop	{r4, r7}
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	080093a8 	.word	0x080093a8
 80037b4:	40021000 	.word	0x40021000
 80037b8:	007a1200 	.word	0x007a1200
 80037bc:	003d0900 	.word	0x003d0900

080037c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80037c8:	4b0a      	ldr	r3, [pc, #40]	; (80037f4 <RCC_Delay+0x34>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a0a      	ldr	r2, [pc, #40]	; (80037f8 <RCC_Delay+0x38>)
 80037ce:	fba2 2303 	umull	r2, r3, r2, r3
 80037d2:	0a5b      	lsrs	r3, r3, #9
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	fb02 f303 	mul.w	r3, r2, r3
 80037da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80037dc:	bf00      	nop
  }
  while (Delay --);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	1e5a      	subs	r2, r3, #1
 80037e2:	60fa      	str	r2, [r7, #12]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1f9      	bne.n	80037dc <RCC_Delay+0x1c>
}
 80037e8:	bf00      	nop
 80037ea:	bf00      	nop
 80037ec:	3714      	adds	r7, #20
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bc80      	pop	{r7}
 80037f2:	4770      	bx	lr
 80037f4:	20000018 	.word	0x20000018
 80037f8:	10624dd3 	.word	0x10624dd3

080037fc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003804:	2300      	movs	r3, #0
 8003806:	613b      	str	r3, [r7, #16]
 8003808:	2300      	movs	r3, #0
 800380a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	2b00      	cmp	r3, #0
 8003816:	d07d      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003818:	2300      	movs	r3, #0
 800381a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800381c:	4b4f      	ldr	r3, [pc, #316]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800381e:	69db      	ldr	r3, [r3, #28]
 8003820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10d      	bne.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003828:	4b4c      	ldr	r3, [pc, #304]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800382a:	69db      	ldr	r3, [r3, #28]
 800382c:	4a4b      	ldr	r2, [pc, #300]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800382e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003832:	61d3      	str	r3, [r2, #28]
 8003834:	4b49      	ldr	r3, [pc, #292]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003836:	69db      	ldr	r3, [r3, #28]
 8003838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800383c:	60bb      	str	r3, [r7, #8]
 800383e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003840:	2301      	movs	r3, #1
 8003842:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003844:	4b46      	ldr	r3, [pc, #280]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800384c:	2b00      	cmp	r3, #0
 800384e:	d118      	bne.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003850:	4b43      	ldr	r3, [pc, #268]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a42      	ldr	r2, [pc, #264]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800385a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800385c:	f7fd fdfc 	bl	8001458 <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003862:	e008      	b.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003864:	f7fd fdf8 	bl	8001458 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b64      	cmp	r3, #100	; 0x64
 8003870:	d901      	bls.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e06d      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003876:	4b3a      	ldr	r3, [pc, #232]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800387e:	2b00      	cmp	r3, #0
 8003880:	d0f0      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003882:	4b36      	ldr	r3, [pc, #216]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800388a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d02e      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	429a      	cmp	r2, r3
 800389e:	d027      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038a0:	4b2e      	ldr	r3, [pc, #184]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038a8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038aa:	4b2e      	ldr	r3, [pc, #184]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80038ac:	2201      	movs	r2, #1
 80038ae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038b0:	4b2c      	ldr	r3, [pc, #176]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80038b6:	4a29      	ldr	r2, [pc, #164]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d014      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c6:	f7fd fdc7 	bl	8001458 <HAL_GetTick>
 80038ca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038cc:	e00a      	b.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ce:	f7fd fdc3 	bl	8001458 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038dc:	4293      	cmp	r3, r2
 80038de:	d901      	bls.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e036      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038e4:	4b1d      	ldr	r3, [pc, #116]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d0ee      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038f0:	4b1a      	ldr	r3, [pc, #104]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	4917      	ldr	r1, [pc, #92]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003902:	7dfb      	ldrb	r3, [r7, #23]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d105      	bne.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003908:	4b14      	ldr	r3, [pc, #80]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800390a:	69db      	ldr	r3, [r3, #28]
 800390c:	4a13      	ldr	r2, [pc, #76]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800390e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003912:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d008      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003920:	4b0e      	ldr	r3, [pc, #56]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	490b      	ldr	r1, [pc, #44]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800392e:	4313      	orrs	r3, r2
 8003930:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0310 	and.w	r3, r3, #16
 800393a:	2b00      	cmp	r3, #0
 800393c:	d008      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800393e:	4b07      	ldr	r3, [pc, #28]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	4904      	ldr	r1, [pc, #16]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800394c:	4313      	orrs	r3, r2
 800394e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3718      	adds	r7, #24
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	40021000 	.word	0x40021000
 8003960:	40007000 	.word	0x40007000
 8003964:	42420440 	.word	0x42420440

08003968 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003968:	b084      	sub	sp, #16
 800396a:	b480      	push	{r7}
 800396c:	b083      	sub	sp, #12
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
 8003972:	f107 0014 	add.w	r0, r7, #20
 8003976:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	bc80      	pop	{r7}
 8003984:	b004      	add	sp, #16
 8003986:	4770      	bx	lr

08003988 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003998:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800399c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3714      	adds	r7, #20
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bc80      	pop	{r7}
 80039b2:	4770      	bx	lr

080039b4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80039bc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80039c0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	43db      	mvns	r3, r3
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	4013      	ands	r3, r2
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3714      	adds	r7, #20
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bc80      	pop	{r7}
 80039e6:	4770      	bx	lr

080039e8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	460b      	mov	r3, r1
 80039f2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bc80      	pop	{r7}
 80039fe:	4770      	bx	lr

08003a00 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003a00:	b084      	sub	sp, #16
 8003a02:	b480      	push	{r7}
 8003a04:	b083      	sub	sp, #12
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
 8003a0a:	f107 0014 	add.w	r0, r7, #20
 8003a0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bc80      	pop	{r7}
 8003a3c:	b004      	add	sp, #16
 8003a3e:	4770      	bx	lr

08003a40 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b09b      	sub	sp, #108	; 0x6c
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4413      	add	r3, r2
 8003a5a:	881b      	ldrh	r3, [r3, #0]
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a66:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	78db      	ldrb	r3, [r3, #3]
 8003a6e:	2b03      	cmp	r3, #3
 8003a70:	d81f      	bhi.n	8003ab2 <USB_ActivateEndpoint+0x72>
 8003a72:	a201      	add	r2, pc, #4	; (adr r2, 8003a78 <USB_ActivateEndpoint+0x38>)
 8003a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a78:	08003a89 	.word	0x08003a89
 8003a7c:	08003aa5 	.word	0x08003aa5
 8003a80:	08003abb 	.word	0x08003abb
 8003a84:	08003a97 	.word	0x08003a97
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003a88:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003a8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a90:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003a94:	e012      	b.n	8003abc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003a96:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003a9a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003a9e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003aa2:	e00b      	b.n	8003abc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003aa4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003aa8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003aac:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003ab0:	e004      	b.n	8003abc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003ab8:	e000      	b.n	8003abc <USB_ActivateEndpoint+0x7c>
      break;
 8003aba:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	441a      	add	r2, r3
 8003ac6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003aca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ace:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ad2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	4413      	add	r3, r2
 8003ae8:	881b      	ldrh	r3, [r3, #0]
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003af0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	4313      	orrs	r3, r2
 8003afe:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	441a      	add	r2, r3
 8003b0c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003b10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	7b1b      	ldrb	r3, [r3, #12]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f040 8149 	bne.w	8003dc0 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	785b      	ldrb	r3, [r3, #1]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	f000 8084 	beq.w	8003c40 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	617b      	str	r3, [r7, #20]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	461a      	mov	r2, r3
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	4413      	add	r3, r2
 8003b4a:	617b      	str	r3, [r7, #20]
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	011a      	lsls	r2, r3, #4
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	4413      	add	r3, r2
 8003b56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b5a:	613b      	str	r3, [r7, #16]
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	88db      	ldrh	r3, [r3, #6]
 8003b60:	085b      	lsrs	r3, r3, #1
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	4413      	add	r3, r2
 8003b76:	881b      	ldrh	r3, [r3, #0]
 8003b78:	81fb      	strh	r3, [r7, #14]
 8003b7a:	89fb      	ldrh	r3, [r7, #14]
 8003b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d01b      	beq.n	8003bbc <USB_ActivateEndpoint+0x17c>
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	4413      	add	r3, r2
 8003b8e:	881b      	ldrh	r3, [r3, #0]
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b9a:	81bb      	strh	r3, [r7, #12]
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	441a      	add	r2, r3
 8003ba6:	89bb      	ldrh	r3, [r7, #12]
 8003ba8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bb4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	78db      	ldrb	r3, [r3, #3]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d020      	beq.n	8003c06 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	4413      	add	r3, r2
 8003bce:	881b      	ldrh	r3, [r3, #0]
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bda:	813b      	strh	r3, [r7, #8]
 8003bdc:	893b      	ldrh	r3, [r7, #8]
 8003bde:	f083 0320 	eor.w	r3, r3, #32
 8003be2:	813b      	strh	r3, [r7, #8]
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	441a      	add	r2, r3
 8003bee:	893b      	ldrh	r3, [r7, #8]
 8003bf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	8013      	strh	r3, [r2, #0]
 8003c04:	e27f      	b.n	8004106 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	4413      	add	r3, r2
 8003c10:	881b      	ldrh	r3, [r3, #0]
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c1c:	817b      	strh	r3, [r7, #10]
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	441a      	add	r2, r3
 8003c28:	897b      	ldrh	r3, [r7, #10]
 8003c2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	8013      	strh	r3, [r2, #0]
 8003c3e:	e262      	b.n	8004106 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c50:	4413      	add	r3, r2
 8003c52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	011a      	lsls	r2, r3, #4
 8003c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003c62:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	88db      	ldrh	r3, [r3, #6]
 8003c68:	085b      	lsrs	r3, r3, #1
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c72:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	627b      	str	r3, [r7, #36]	; 0x24
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	461a      	mov	r2, r3
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	4413      	add	r3, r2
 8003c86:	627b      	str	r3, [r7, #36]	; 0x24
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	011a      	lsls	r2, r3, #4
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c90:	4413      	add	r3, r2
 8003c92:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c96:	623b      	str	r3, [r7, #32]
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d112      	bne.n	8003cc6 <USB_ActivateEndpoint+0x286>
 8003ca0:	6a3b      	ldr	r3, [r7, #32]
 8003ca2:	881b      	ldrh	r3, [r3, #0]
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	6a3b      	ldr	r3, [r7, #32]
 8003cae:	801a      	strh	r2, [r3, #0]
 8003cb0:	6a3b      	ldr	r3, [r7, #32]
 8003cb2:	881b      	ldrh	r3, [r3, #0]
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	6a3b      	ldr	r3, [r7, #32]
 8003cc2:	801a      	strh	r2, [r3, #0]
 8003cc4:	e02f      	b.n	8003d26 <USB_ActivateEndpoint+0x2e6>
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	2b3e      	cmp	r3, #62	; 0x3e
 8003ccc:	d813      	bhi.n	8003cf6 <USB_ActivateEndpoint+0x2b6>
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	085b      	lsrs	r3, r3, #1
 8003cd4:	663b      	str	r3, [r7, #96]	; 0x60
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d002      	beq.n	8003ce8 <USB_ActivateEndpoint+0x2a8>
 8003ce2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	663b      	str	r3, [r7, #96]	; 0x60
 8003ce8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	029b      	lsls	r3, r3, #10
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	6a3b      	ldr	r3, [r7, #32]
 8003cf2:	801a      	strh	r2, [r3, #0]
 8003cf4:	e017      	b.n	8003d26 <USB_ActivateEndpoint+0x2e6>
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	095b      	lsrs	r3, r3, #5
 8003cfc:	663b      	str	r3, [r7, #96]	; 0x60
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	f003 031f 	and.w	r3, r3, #31
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d102      	bne.n	8003d10 <USB_ActivateEndpoint+0x2d0>
 8003d0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	663b      	str	r3, [r7, #96]	; 0x60
 8003d10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	029b      	lsls	r3, r3, #10
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	6a3b      	ldr	r3, [r7, #32]
 8003d24:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	4413      	add	r3, r2
 8003d30:	881b      	ldrh	r3, [r3, #0]
 8003d32:	83fb      	strh	r3, [r7, #30]
 8003d34:	8bfb      	ldrh	r3, [r7, #30]
 8003d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d01b      	beq.n	8003d76 <USB_ActivateEndpoint+0x336>
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	4413      	add	r3, r2
 8003d48:	881b      	ldrh	r3, [r3, #0]
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d54:	83bb      	strh	r3, [r7, #28]
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	441a      	add	r2, r3
 8003d60:	8bbb      	ldrh	r3, [r7, #28]
 8003d62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	4413      	add	r3, r2
 8003d80:	881b      	ldrh	r3, [r3, #0]
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d8c:	837b      	strh	r3, [r7, #26]
 8003d8e:	8b7b      	ldrh	r3, [r7, #26]
 8003d90:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003d94:	837b      	strh	r3, [r7, #26]
 8003d96:	8b7b      	ldrh	r3, [r7, #26]
 8003d98:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003d9c:	837b      	strh	r3, [r7, #26]
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	441a      	add	r2, r3
 8003da8:	8b7b      	ldrh	r3, [r7, #26]
 8003daa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003db2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003db6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	8013      	strh	r3, [r2, #0]
 8003dbe:	e1a2      	b.n	8004106 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	4413      	add	r3, r2
 8003dca:	881b      	ldrh	r3, [r3, #0]
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dd6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	441a      	add	r2, r3
 8003de4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003de8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003df0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	461a      	mov	r2, r3
 8003e0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e0c:	4413      	add	r3, r2
 8003e0e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	011a      	lsls	r2, r3, #4
 8003e16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e18:	4413      	add	r3, r2
 8003e1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e1e:	657b      	str	r3, [r7, #84]	; 0x54
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	891b      	ldrh	r3, [r3, #8]
 8003e24:	085b      	lsrs	r3, r3, #1
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e2e:	801a      	strh	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	653b      	str	r3, [r7, #80]	; 0x50
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e40:	4413      	add	r3, r2
 8003e42:	653b      	str	r3, [r7, #80]	; 0x50
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	011a      	lsls	r2, r3, #4
 8003e4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e4c:	4413      	add	r3, r2
 8003e4e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003e52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	895b      	ldrh	r3, [r3, #10]
 8003e58:	085b      	lsrs	r3, r3, #1
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	005b      	lsls	r3, r3, #1
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e62:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	785b      	ldrb	r3, [r3, #1]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f040 8091 	bne.w	8003f90 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	4413      	add	r3, r2
 8003e78:	881b      	ldrh	r3, [r3, #0]
 8003e7a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003e7c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003e7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d01b      	beq.n	8003ebe <USB_ActivateEndpoint+0x47e>
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	4413      	add	r3, r2
 8003e90:	881b      	ldrh	r3, [r3, #0]
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e9c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	441a      	add	r2, r3
 8003ea8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003eaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003eae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003eb2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4413      	add	r3, r2
 8003ec8:	881b      	ldrh	r3, [r3, #0]
 8003eca:	873b      	strh	r3, [r7, #56]	; 0x38
 8003ecc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d01b      	beq.n	8003f0e <USB_ActivateEndpoint+0x4ce>
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	4413      	add	r3, r2
 8003ee0:	881b      	ldrh	r3, [r3, #0]
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ee8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eec:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	441a      	add	r2, r3
 8003ef8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003efa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003efe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f06:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	4413      	add	r3, r2
 8003f18:	881b      	ldrh	r3, [r3, #0]
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f24:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003f26:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003f28:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003f2c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003f2e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003f30:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003f34:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	441a      	add	r2, r3
 8003f40:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003f42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	4413      	add	r3, r2
 8003f60:	881b      	ldrh	r3, [r3, #0]
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f6c:	867b      	strh	r3, [r7, #50]	; 0x32
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	441a      	add	r2, r3
 8003f78:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003f7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	8013      	strh	r3, [r2, #0]
 8003f8e:	e0ba      	b.n	8004106 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	4413      	add	r3, r2
 8003f9a:	881b      	ldrh	r3, [r3, #0]
 8003f9c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003fa0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003fa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d01d      	beq.n	8003fe8 <USB_ActivateEndpoint+0x5a8>
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	4413      	add	r3, r2
 8003fb6:	881b      	ldrh	r3, [r3, #0]
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fc2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	441a      	add	r2, r3
 8003fd0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003fd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	4413      	add	r3, r2
 8003ff2:	881b      	ldrh	r3, [r3, #0]
 8003ff4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003ff8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004000:	2b00      	cmp	r3, #0
 8004002:	d01d      	beq.n	8004040 <USB_ActivateEndpoint+0x600>
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	4413      	add	r3, r2
 800400e:	881b      	ldrh	r3, [r3, #0]
 8004010:	b29b      	uxth	r3, r3
 8004012:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800401a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	441a      	add	r2, r3
 8004028:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800402c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004030:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004034:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004038:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800403c:	b29b      	uxth	r3, r3
 800403e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	78db      	ldrb	r3, [r3, #3]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d024      	beq.n	8004092 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	4413      	add	r3, r2
 8004052:	881b      	ldrh	r3, [r3, #0]
 8004054:	b29b      	uxth	r3, r3
 8004056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800405a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800405e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004062:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004066:	f083 0320 	eor.w	r3, r3, #32
 800406a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	441a      	add	r2, r3
 8004078:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800407c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004080:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004084:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800408c:	b29b      	uxth	r3, r3
 800408e:	8013      	strh	r3, [r2, #0]
 8004090:	e01d      	b.n	80040ce <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	4413      	add	r3, r2
 800409c:	881b      	ldrh	r3, [r3, #0]
 800409e:	b29b      	uxth	r3, r3
 80040a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040a8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	441a      	add	r2, r3
 80040b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80040ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4413      	add	r3, r2
 80040d8:	881b      	ldrh	r3, [r3, #0]
 80040da:	b29b      	uxth	r3, r3
 80040dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040e4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	441a      	add	r2, r3
 80040f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80040f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004102:	b29b      	uxth	r3, r3
 8004104:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004106:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800410a:	4618      	mov	r0, r3
 800410c:	376c      	adds	r7, #108	; 0x6c
 800410e:	46bd      	mov	sp, r7
 8004110:	bc80      	pop	{r7}
 8004112:	4770      	bx	lr

08004114 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004114:	b480      	push	{r7}
 8004116:	b08d      	sub	sp, #52	; 0x34
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	7b1b      	ldrb	r3, [r3, #12]
 8004122:	2b00      	cmp	r3, #0
 8004124:	f040 808e 	bne.w	8004244 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	785b      	ldrb	r3, [r3, #1]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d044      	beq.n	80041ba <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4413      	add	r3, r2
 800413a:	881b      	ldrh	r3, [r3, #0]
 800413c:	81bb      	strh	r3, [r7, #12]
 800413e:	89bb      	ldrh	r3, [r7, #12]
 8004140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004144:	2b00      	cmp	r3, #0
 8004146:	d01b      	beq.n	8004180 <USB_DeactivateEndpoint+0x6c>
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	4413      	add	r3, r2
 8004152:	881b      	ldrh	r3, [r3, #0]
 8004154:	b29b      	uxth	r3, r3
 8004156:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800415a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800415e:	817b      	strh	r3, [r7, #10]
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	441a      	add	r2, r3
 800416a:	897b      	ldrh	r3, [r7, #10]
 800416c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004170:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004174:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004178:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800417c:	b29b      	uxth	r3, r3
 800417e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	4413      	add	r3, r2
 800418a:	881b      	ldrh	r3, [r3, #0]
 800418c:	b29b      	uxth	r3, r3
 800418e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004192:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004196:	813b      	strh	r3, [r7, #8]
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	441a      	add	r2, r3
 80041a2:	893b      	ldrh	r3, [r7, #8]
 80041a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	8013      	strh	r3, [r2, #0]
 80041b8:	e192      	b.n	80044e0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	4413      	add	r3, r2
 80041c4:	881b      	ldrh	r3, [r3, #0]
 80041c6:	827b      	strh	r3, [r7, #18]
 80041c8:	8a7b      	ldrh	r3, [r7, #18]
 80041ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d01b      	beq.n	800420a <USB_DeactivateEndpoint+0xf6>
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	4413      	add	r3, r2
 80041dc:	881b      	ldrh	r3, [r3, #0]
 80041de:	b29b      	uxth	r3, r3
 80041e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e8:	823b      	strh	r3, [r7, #16]
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	441a      	add	r2, r3
 80041f4:	8a3b      	ldrh	r3, [r7, #16]
 80041f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004202:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004206:	b29b      	uxth	r3, r3
 8004208:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	4413      	add	r3, r2
 8004214:	881b      	ldrh	r3, [r3, #0]
 8004216:	b29b      	uxth	r3, r3
 8004218:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800421c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004220:	81fb      	strh	r3, [r7, #14]
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	441a      	add	r2, r3
 800422c:	89fb      	ldrh	r3, [r7, #14]
 800422e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004232:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004236:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800423a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800423e:	b29b      	uxth	r3, r3
 8004240:	8013      	strh	r3, [r2, #0]
 8004242:	e14d      	b.n	80044e0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	785b      	ldrb	r3, [r3, #1]
 8004248:	2b00      	cmp	r3, #0
 800424a:	f040 80a5 	bne.w	8004398 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4413      	add	r3, r2
 8004258:	881b      	ldrh	r3, [r3, #0]
 800425a:	843b      	strh	r3, [r7, #32]
 800425c:	8c3b      	ldrh	r3, [r7, #32]
 800425e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d01b      	beq.n	800429e <USB_DeactivateEndpoint+0x18a>
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	4413      	add	r3, r2
 8004270:	881b      	ldrh	r3, [r3, #0]
 8004272:	b29b      	uxth	r3, r3
 8004274:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800427c:	83fb      	strh	r3, [r7, #30]
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	441a      	add	r2, r3
 8004288:	8bfb      	ldrh	r3, [r7, #30]
 800428a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800428e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004292:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800429a:	b29b      	uxth	r3, r3
 800429c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	4413      	add	r3, r2
 80042a8:	881b      	ldrh	r3, [r3, #0]
 80042aa:	83bb      	strh	r3, [r7, #28]
 80042ac:	8bbb      	ldrh	r3, [r7, #28]
 80042ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d01b      	beq.n	80042ee <USB_DeactivateEndpoint+0x1da>
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	4413      	add	r3, r2
 80042c0:	881b      	ldrh	r3, [r3, #0]
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042cc:	837b      	strh	r3, [r7, #26]
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	441a      	add	r2, r3
 80042d8:	8b7b      	ldrh	r3, [r7, #26]
 80042da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	4413      	add	r3, r2
 80042f8:	881b      	ldrh	r3, [r3, #0]
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004300:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004304:	833b      	strh	r3, [r7, #24]
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	441a      	add	r2, r3
 8004310:	8b3b      	ldrh	r3, [r7, #24]
 8004312:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004316:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800431a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800431e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004322:	b29b      	uxth	r3, r3
 8004324:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4413      	add	r3, r2
 8004330:	881b      	ldrh	r3, [r3, #0]
 8004332:	b29b      	uxth	r3, r3
 8004334:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800433c:	82fb      	strh	r3, [r7, #22]
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	441a      	add	r2, r3
 8004348:	8afb      	ldrh	r3, [r7, #22]
 800434a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800434e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004352:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800435a:	b29b      	uxth	r3, r3
 800435c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	4413      	add	r3, r2
 8004368:	881b      	ldrh	r3, [r3, #0]
 800436a:	b29b      	uxth	r3, r3
 800436c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004370:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004374:	82bb      	strh	r3, [r7, #20]
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	441a      	add	r2, r3
 8004380:	8abb      	ldrh	r3, [r7, #20]
 8004382:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004386:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800438a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800438e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004392:	b29b      	uxth	r3, r3
 8004394:	8013      	strh	r3, [r2, #0]
 8004396:	e0a3      	b.n	80044e0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	4413      	add	r3, r2
 80043a2:	881b      	ldrh	r3, [r3, #0]
 80043a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80043a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80043a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d01b      	beq.n	80043e8 <USB_DeactivateEndpoint+0x2d4>
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4413      	add	r3, r2
 80043ba:	881b      	ldrh	r3, [r3, #0]
 80043bc:	b29b      	uxth	r3, r3
 80043be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043c6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	441a      	add	r2, r3
 80043d2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80043d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	4413      	add	r3, r2
 80043f2:	881b      	ldrh	r3, [r3, #0]
 80043f4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80043f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80043f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d01b      	beq.n	8004438 <USB_DeactivateEndpoint+0x324>
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	4413      	add	r3, r2
 800440a:	881b      	ldrh	r3, [r3, #0]
 800440c:	b29b      	uxth	r3, r3
 800440e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004416:	853b      	strh	r3, [r7, #40]	; 0x28
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	441a      	add	r2, r3
 8004422:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004424:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004428:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800442c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004430:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004434:	b29b      	uxth	r3, r3
 8004436:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	4413      	add	r3, r2
 8004442:	881b      	ldrh	r3, [r3, #0]
 8004444:	b29b      	uxth	r3, r3
 8004446:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800444a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800444e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	441a      	add	r2, r3
 800445a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800445c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004460:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004464:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800446c:	b29b      	uxth	r3, r3
 800446e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4413      	add	r3, r2
 800447a:	881b      	ldrh	r3, [r3, #0]
 800447c:	b29b      	uxth	r3, r3
 800447e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004482:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004486:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	441a      	add	r2, r3
 8004492:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004494:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004498:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800449c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	4413      	add	r3, r2
 80044b2:	881b      	ldrh	r3, [r3, #0]
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044be:	847b      	strh	r3, [r7, #34]	; 0x22
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	441a      	add	r2, r3
 80044ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80044cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044dc:	b29b      	uxth	r3, r3
 80044de:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3734      	adds	r7, #52	; 0x34
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bc80      	pop	{r7}
 80044ea:	4770      	bx	lr

080044ec <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b0cc      	sub	sp, #304	; 0x130
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	1d3b      	adds	r3, r7, #4
 80044f4:	6018      	str	r0, [r3, #0]
 80044f6:	463b      	mov	r3, r7
 80044f8:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80044fa:	463b      	mov	r3, r7
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	785b      	ldrb	r3, [r3, #1]
 8004500:	2b01      	cmp	r3, #1
 8004502:	f040 872e 	bne.w	8005362 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004506:	463b      	mov	r3, r7
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	699a      	ldr	r2, [r3, #24]
 800450c:	463b      	mov	r3, r7
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	429a      	cmp	r2, r3
 8004514:	d905      	bls.n	8004522 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004516:	463b      	mov	r3, r7
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004520:	e004      	b.n	800452c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004522:	463b      	mov	r3, r7
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800452c:	463b      	mov	r3, r7
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	7b1b      	ldrb	r3, [r3, #12]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d134      	bne.n	80045a0 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004536:	463b      	mov	r3, r7
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	6959      	ldr	r1, [r3, #20]
 800453c:	463b      	mov	r3, r7
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	88da      	ldrh	r2, [r3, #6]
 8004542:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004546:	b29b      	uxth	r3, r3
 8004548:	1d38      	adds	r0, r7, #4
 800454a:	6800      	ldr	r0, [r0, #0]
 800454c:	f001 fc03 	bl	8005d56 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004550:	f107 0310 	add.w	r3, r7, #16
 8004554:	1d3a      	adds	r2, r7, #4
 8004556:	6812      	ldr	r2, [r2, #0]
 8004558:	601a      	str	r2, [r3, #0]
 800455a:	1d3b      	adds	r3, r7, #4
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004562:	b29b      	uxth	r3, r3
 8004564:	4619      	mov	r1, r3
 8004566:	f107 0310 	add.w	r3, r7, #16
 800456a:	f107 0210 	add.w	r2, r7, #16
 800456e:	6812      	ldr	r2, [r2, #0]
 8004570:	440a      	add	r2, r1
 8004572:	601a      	str	r2, [r3, #0]
 8004574:	463b      	mov	r3, r7
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	011a      	lsls	r2, r3, #4
 800457c:	f107 0310 	add.w	r3, r7, #16
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4413      	add	r3, r2
 8004584:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004588:	f107 030c 	add.w	r3, r7, #12
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004592:	b29a      	uxth	r2, r3
 8004594:	f107 030c 	add.w	r3, r7, #12
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	801a      	strh	r2, [r3, #0]
 800459c:	f000 beac 	b.w	80052f8 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80045a0:	463b      	mov	r3, r7
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	78db      	ldrb	r3, [r3, #3]
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	f040 838c 	bne.w	8004cc4 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80045ac:	463b      	mov	r3, r7
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6a1a      	ldr	r2, [r3, #32]
 80045b2:	463b      	mov	r3, r7
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	f240 8330 	bls.w	8004c1e <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80045be:	1d3b      	adds	r3, r7, #4
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	463b      	mov	r3, r7
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	4413      	add	r3, r2
 80045cc:	881b      	ldrh	r3, [r3, #0]
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045d8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80045dc:	1d3b      	adds	r3, r7, #4
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	463b      	mov	r3, r7
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	441a      	add	r2, r3
 80045ea:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80045ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045f6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80045fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045fe:	b29b      	uxth	r3, r3
 8004600:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004602:	463b      	mov	r3, r7
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	6a1a      	ldr	r2, [r3, #32]
 8004608:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800460c:	1ad2      	subs	r2, r2, r3
 800460e:	463b      	mov	r3, r7
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004614:	1d3b      	adds	r3, r7, #4
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	463b      	mov	r3, r7
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	4413      	add	r3, r2
 8004622:	881b      	ldrh	r3, [r3, #0]
 8004624:	b29b      	uxth	r3, r3
 8004626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800462a:	2b00      	cmp	r3, #0
 800462c:	f000 819e 	beq.w	800496c <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004630:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004634:	1d3a      	adds	r2, r7, #4
 8004636:	6812      	ldr	r2, [r2, #0]
 8004638:	601a      	str	r2, [r3, #0]
 800463a:	463b      	mov	r3, r7
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	785b      	ldrb	r3, [r3, #1]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d17a      	bne.n	800473a <USB_EPStartXfer+0x24e>
 8004644:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004648:	1d3a      	adds	r2, r7, #4
 800464a:	6812      	ldr	r2, [r2, #0]
 800464c:	601a      	str	r2, [r3, #0]
 800464e:	1d3b      	adds	r3, r7, #4
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004656:	b29b      	uxth	r3, r3
 8004658:	4619      	mov	r1, r3
 800465a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800465e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004662:	6812      	ldr	r2, [r2, #0]
 8004664:	440a      	add	r2, r1
 8004666:	601a      	str	r2, [r3, #0]
 8004668:	463b      	mov	r3, r7
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	011a      	lsls	r2, r3, #4
 8004670:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4413      	add	r3, r2
 8004678:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800467c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004680:	601a      	str	r2, [r3, #0]
 8004682:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004686:	2b00      	cmp	r3, #0
 8004688:	d11a      	bne.n	80046c0 <USB_EPStartXfer+0x1d4>
 800468a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	881b      	ldrh	r3, [r3, #0]
 8004692:	b29b      	uxth	r3, r3
 8004694:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004698:	b29a      	uxth	r2, r3
 800469a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	801a      	strh	r2, [r3, #0]
 80046a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	881b      	ldrh	r3, [r3, #0]
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046b4:	b29a      	uxth	r2, r3
 80046b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	801a      	strh	r2, [r3, #0]
 80046be:	e062      	b.n	8004786 <USB_EPStartXfer+0x29a>
 80046c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046c4:	2b3e      	cmp	r3, #62	; 0x3e
 80046c6:	d819      	bhi.n	80046fc <USB_EPStartXfer+0x210>
 80046c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046cc:	085b      	lsrs	r3, r3, #1
 80046ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80046d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d004      	beq.n	80046e8 <USB_EPStartXfer+0x1fc>
 80046de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80046e2:	3301      	adds	r3, #1
 80046e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80046e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	029b      	lsls	r3, r3, #10
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	801a      	strh	r2, [r3, #0]
 80046fa:	e044      	b.n	8004786 <USB_EPStartXfer+0x29a>
 80046fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004700:	095b      	lsrs	r3, r3, #5
 8004702:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004706:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800470a:	f003 031f 	and.w	r3, r3, #31
 800470e:	2b00      	cmp	r3, #0
 8004710:	d104      	bne.n	800471c <USB_EPStartXfer+0x230>
 8004712:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004716:	3b01      	subs	r3, #1
 8004718:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800471c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004720:	b29b      	uxth	r3, r3
 8004722:	029b      	lsls	r3, r3, #10
 8004724:	b29b      	uxth	r3, r3
 8004726:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800472a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800472e:	b29a      	uxth	r2, r3
 8004730:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	801a      	strh	r2, [r3, #0]
 8004738:	e025      	b.n	8004786 <USB_EPStartXfer+0x29a>
 800473a:	463b      	mov	r3, r7
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	785b      	ldrb	r3, [r3, #1]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d120      	bne.n	8004786 <USB_EPStartXfer+0x29a>
 8004744:	1d3b      	adds	r3, r7, #4
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800474c:	b29b      	uxth	r3, r3
 800474e:	4619      	mov	r1, r3
 8004750:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004754:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004758:	6812      	ldr	r2, [r2, #0]
 800475a:	440a      	add	r2, r1
 800475c:	601a      	str	r2, [r3, #0]
 800475e:	463b      	mov	r3, r7
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	011a      	lsls	r2, r3, #4
 8004766:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4413      	add	r3, r2
 800476e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004772:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004776:	601a      	str	r2, [r3, #0]
 8004778:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800477c:	b29a      	uxth	r2, r3
 800477e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004786:	463b      	mov	r3, r7
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	895b      	ldrh	r3, [r3, #10]
 800478c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004790:	463b      	mov	r3, r7
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	6959      	ldr	r1, [r3, #20]
 8004796:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800479a:	b29b      	uxth	r3, r3
 800479c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80047a0:	1d38      	adds	r0, r7, #4
 80047a2:	6800      	ldr	r0, [r0, #0]
 80047a4:	f001 fad7 	bl	8005d56 <USB_WritePMA>
            ep->xfer_buff += len;
 80047a8:	463b      	mov	r3, r7
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	695a      	ldr	r2, [r3, #20]
 80047ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047b2:	441a      	add	r2, r3
 80047b4:	463b      	mov	r3, r7
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80047ba:	463b      	mov	r3, r7
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	6a1a      	ldr	r2, [r3, #32]
 80047c0:	463b      	mov	r3, r7
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d909      	bls.n	80047de <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 80047ca:	463b      	mov	r3, r7
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	6a1a      	ldr	r2, [r3, #32]
 80047d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047d4:	1ad2      	subs	r2, r2, r3
 80047d6:	463b      	mov	r3, r7
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	621a      	str	r2, [r3, #32]
 80047dc:	e008      	b.n	80047f0 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 80047de:	463b      	mov	r3, r7
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80047e8:	463b      	mov	r3, r7
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2200      	movs	r2, #0
 80047ee:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80047f0:	463b      	mov	r3, r7
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	785b      	ldrb	r3, [r3, #1]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d17a      	bne.n	80048f0 <USB_EPStartXfer+0x404>
 80047fa:	f107 0318 	add.w	r3, r7, #24
 80047fe:	1d3a      	adds	r2, r7, #4
 8004800:	6812      	ldr	r2, [r2, #0]
 8004802:	601a      	str	r2, [r3, #0]
 8004804:	1d3b      	adds	r3, r7, #4
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800480c:	b29b      	uxth	r3, r3
 800480e:	4619      	mov	r1, r3
 8004810:	f107 0318 	add.w	r3, r7, #24
 8004814:	f107 0218 	add.w	r2, r7, #24
 8004818:	6812      	ldr	r2, [r2, #0]
 800481a:	440a      	add	r2, r1
 800481c:	601a      	str	r2, [r3, #0]
 800481e:	463b      	mov	r3, r7
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	011a      	lsls	r2, r3, #4
 8004826:	f107 0318 	add.w	r3, r7, #24
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4413      	add	r3, r2
 800482e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004832:	f107 0314 	add.w	r3, r7, #20
 8004836:	601a      	str	r2, [r3, #0]
 8004838:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800483c:	2b00      	cmp	r3, #0
 800483e:	d11a      	bne.n	8004876 <USB_EPStartXfer+0x38a>
 8004840:	f107 0314 	add.w	r3, r7, #20
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	881b      	ldrh	r3, [r3, #0]
 8004848:	b29b      	uxth	r3, r3
 800484a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800484e:	b29a      	uxth	r2, r3
 8004850:	f107 0314 	add.w	r3, r7, #20
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	801a      	strh	r2, [r3, #0]
 8004858:	f107 0314 	add.w	r3, r7, #20
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	881b      	ldrh	r3, [r3, #0]
 8004860:	b29b      	uxth	r3, r3
 8004862:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004866:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800486a:	b29a      	uxth	r2, r3
 800486c:	f107 0314 	add.w	r3, r7, #20
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	801a      	strh	r2, [r3, #0]
 8004874:	e067      	b.n	8004946 <USB_EPStartXfer+0x45a>
 8004876:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800487a:	2b3e      	cmp	r3, #62	; 0x3e
 800487c:	d819      	bhi.n	80048b2 <USB_EPStartXfer+0x3c6>
 800487e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004882:	085b      	lsrs	r3, r3, #1
 8004884:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004888:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	2b00      	cmp	r3, #0
 8004892:	d004      	beq.n	800489e <USB_EPStartXfer+0x3b2>
 8004894:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004898:	3301      	adds	r3, #1
 800489a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800489e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	029b      	lsls	r3, r3, #10
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	f107 0314 	add.w	r3, r7, #20
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	801a      	strh	r2, [r3, #0]
 80048b0:	e049      	b.n	8004946 <USB_EPStartXfer+0x45a>
 80048b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048b6:	095b      	lsrs	r3, r3, #5
 80048b8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80048bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048c0:	f003 031f 	and.w	r3, r3, #31
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d104      	bne.n	80048d2 <USB_EPStartXfer+0x3e6>
 80048c8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80048cc:	3b01      	subs	r3, #1
 80048ce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80048d2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	029b      	lsls	r3, r3, #10
 80048da:	b29b      	uxth	r3, r3
 80048dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	f107 0314 	add.w	r3, r7, #20
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	801a      	strh	r2, [r3, #0]
 80048ee:	e02a      	b.n	8004946 <USB_EPStartXfer+0x45a>
 80048f0:	463b      	mov	r3, r7
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	785b      	ldrb	r3, [r3, #1]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d125      	bne.n	8004946 <USB_EPStartXfer+0x45a>
 80048fa:	f107 0320 	add.w	r3, r7, #32
 80048fe:	1d3a      	adds	r2, r7, #4
 8004900:	6812      	ldr	r2, [r2, #0]
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	1d3b      	adds	r3, r7, #4
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800490c:	b29b      	uxth	r3, r3
 800490e:	4619      	mov	r1, r3
 8004910:	f107 0320 	add.w	r3, r7, #32
 8004914:	f107 0220 	add.w	r2, r7, #32
 8004918:	6812      	ldr	r2, [r2, #0]
 800491a:	440a      	add	r2, r1
 800491c:	601a      	str	r2, [r3, #0]
 800491e:	463b      	mov	r3, r7
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	011a      	lsls	r2, r3, #4
 8004926:	f107 0320 	add.w	r3, r7, #32
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4413      	add	r3, r2
 800492e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004932:	f107 031c 	add.w	r3, r7, #28
 8004936:	601a      	str	r2, [r3, #0]
 8004938:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800493c:	b29a      	uxth	r2, r3
 800493e:	f107 031c 	add.w	r3, r7, #28
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004946:	463b      	mov	r3, r7
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	891b      	ldrh	r3, [r3, #8]
 800494c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004950:	463b      	mov	r3, r7
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6959      	ldr	r1, [r3, #20]
 8004956:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800495a:	b29b      	uxth	r3, r3
 800495c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004960:	1d38      	adds	r0, r7, #4
 8004962:	6800      	ldr	r0, [r0, #0]
 8004964:	f001 f9f7 	bl	8005d56 <USB_WritePMA>
 8004968:	f000 bcc6 	b.w	80052f8 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800496c:	463b      	mov	r3, r7
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	785b      	ldrb	r3, [r3, #1]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d164      	bne.n	8004a40 <USB_EPStartXfer+0x554>
 8004976:	1d3b      	adds	r3, r7, #4
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	64bb      	str	r3, [r7, #72]	; 0x48
 800497c:	1d3b      	adds	r3, r7, #4
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004984:	b29b      	uxth	r3, r3
 8004986:	461a      	mov	r2, r3
 8004988:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800498a:	4413      	add	r3, r2
 800498c:	64bb      	str	r3, [r7, #72]	; 0x48
 800498e:	463b      	mov	r3, r7
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	011a      	lsls	r2, r3, #4
 8004996:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004998:	4413      	add	r3, r2
 800499a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800499e:	647b      	str	r3, [r7, #68]	; 0x44
 80049a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d112      	bne.n	80049ce <USB_EPStartXfer+0x4e2>
 80049a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049aa:	881b      	ldrh	r3, [r3, #0]
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80049b2:	b29a      	uxth	r2, r3
 80049b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049b6:	801a      	strh	r2, [r3, #0]
 80049b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049ba:	881b      	ldrh	r3, [r3, #0]
 80049bc:	b29b      	uxth	r3, r3
 80049be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049ca:	801a      	strh	r2, [r3, #0]
 80049cc:	e057      	b.n	8004a7e <USB_EPStartXfer+0x592>
 80049ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049d2:	2b3e      	cmp	r3, #62	; 0x3e
 80049d4:	d817      	bhi.n	8004a06 <USB_EPStartXfer+0x51a>
 80049d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049da:	085b      	lsrs	r3, r3, #1
 80049dc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80049e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049e4:	f003 0301 	and.w	r3, r3, #1
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d004      	beq.n	80049f6 <USB_EPStartXfer+0x50a>
 80049ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80049f0:	3301      	adds	r3, #1
 80049f2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80049f6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	029b      	lsls	r3, r3, #10
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a02:	801a      	strh	r2, [r3, #0]
 8004a04:	e03b      	b.n	8004a7e <USB_EPStartXfer+0x592>
 8004a06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a0a:	095b      	lsrs	r3, r3, #5
 8004a0c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004a10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a14:	f003 031f 	and.w	r3, r3, #31
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d104      	bne.n	8004a26 <USB_EPStartXfer+0x53a>
 8004a1c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004a20:	3b01      	subs	r3, #1
 8004a22:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004a26:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	029b      	lsls	r3, r3, #10
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a3c:	801a      	strh	r2, [r3, #0]
 8004a3e:	e01e      	b.n	8004a7e <USB_EPStartXfer+0x592>
 8004a40:	463b      	mov	r3, r7
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	785b      	ldrb	r3, [r3, #1]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d119      	bne.n	8004a7e <USB_EPStartXfer+0x592>
 8004a4a:	1d3b      	adds	r3, r7, #4
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	653b      	str	r3, [r7, #80]	; 0x50
 8004a50:	1d3b      	adds	r3, r7, #4
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a5e:	4413      	add	r3, r2
 8004a60:	653b      	str	r3, [r7, #80]	; 0x50
 8004a62:	463b      	mov	r3, r7
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	011a      	lsls	r2, r3, #4
 8004a6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a6c:	4413      	add	r3, r2
 8004a6e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a78:	b29a      	uxth	r2, r3
 8004a7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a7c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004a7e:	463b      	mov	r3, r7
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	891b      	ldrh	r3, [r3, #8]
 8004a84:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a88:	463b      	mov	r3, r7
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	6959      	ldr	r1, [r3, #20]
 8004a8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004a98:	1d38      	adds	r0, r7, #4
 8004a9a:	6800      	ldr	r0, [r0, #0]
 8004a9c:	f001 f95b 	bl	8005d56 <USB_WritePMA>
            ep->xfer_buff += len;
 8004aa0:	463b      	mov	r3, r7
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	695a      	ldr	r2, [r3, #20]
 8004aa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004aaa:	441a      	add	r2, r3
 8004aac:	463b      	mov	r3, r7
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004ab2:	463b      	mov	r3, r7
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	6a1a      	ldr	r2, [r3, #32]
 8004ab8:	463b      	mov	r3, r7
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d909      	bls.n	8004ad6 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8004ac2:	463b      	mov	r3, r7
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	6a1a      	ldr	r2, [r3, #32]
 8004ac8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004acc:	1ad2      	subs	r2, r2, r3
 8004ace:	463b      	mov	r3, r7
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	621a      	str	r2, [r3, #32]
 8004ad4:	e008      	b.n	8004ae8 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8004ad6:	463b      	mov	r3, r7
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	6a1b      	ldr	r3, [r3, #32]
 8004adc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004ae0:	463b      	mov	r3, r7
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004ae8:	1d3b      	adds	r3, r7, #4
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	643b      	str	r3, [r7, #64]	; 0x40
 8004aee:	463b      	mov	r3, r7
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	785b      	ldrb	r3, [r3, #1]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d164      	bne.n	8004bc2 <USB_EPStartXfer+0x6d6>
 8004af8:	1d3b      	adds	r3, r7, #4
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	63bb      	str	r3, [r7, #56]	; 0x38
 8004afe:	1d3b      	adds	r3, r7, #4
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	461a      	mov	r2, r3
 8004b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b0c:	4413      	add	r3, r2
 8004b0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b10:	463b      	mov	r3, r7
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	011a      	lsls	r2, r3, #4
 8004b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b1a:	4413      	add	r3, r2
 8004b1c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b20:	637b      	str	r3, [r7, #52]	; 0x34
 8004b22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d112      	bne.n	8004b50 <USB_EPStartXfer+0x664>
 8004b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b2c:	881b      	ldrh	r3, [r3, #0]
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b34:	b29a      	uxth	r2, r3
 8004b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b38:	801a      	strh	r2, [r3, #0]
 8004b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b3c:	881b      	ldrh	r3, [r3, #0]
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b4c:	801a      	strh	r2, [r3, #0]
 8004b4e:	e054      	b.n	8004bfa <USB_EPStartXfer+0x70e>
 8004b50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b54:	2b3e      	cmp	r3, #62	; 0x3e
 8004b56:	d817      	bhi.n	8004b88 <USB_EPStartXfer+0x69c>
 8004b58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b5c:	085b      	lsrs	r3, r3, #1
 8004b5e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004b62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d004      	beq.n	8004b78 <USB_EPStartXfer+0x68c>
 8004b6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004b72:	3301      	adds	r3, #1
 8004b74:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004b78:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	029b      	lsls	r3, r3, #10
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b84:	801a      	strh	r2, [r3, #0]
 8004b86:	e038      	b.n	8004bfa <USB_EPStartXfer+0x70e>
 8004b88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b8c:	095b      	lsrs	r3, r3, #5
 8004b8e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004b92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b96:	f003 031f 	and.w	r3, r3, #31
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d104      	bne.n	8004ba8 <USB_EPStartXfer+0x6bc>
 8004b9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004ba8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	029b      	lsls	r3, r3, #10
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bba:	b29a      	uxth	r2, r3
 8004bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bbe:	801a      	strh	r2, [r3, #0]
 8004bc0:	e01b      	b.n	8004bfa <USB_EPStartXfer+0x70e>
 8004bc2:	463b      	mov	r3, r7
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	785b      	ldrb	r3, [r3, #1]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d116      	bne.n	8004bfa <USB_EPStartXfer+0x70e>
 8004bcc:	1d3b      	adds	r3, r7, #4
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bda:	4413      	add	r3, r2
 8004bdc:	643b      	str	r3, [r7, #64]	; 0x40
 8004bde:	463b      	mov	r3, r7
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	011a      	lsls	r2, r3, #4
 8004be6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004be8:	4413      	add	r3, r2
 8004bea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004bee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bf4:	b29a      	uxth	r2, r3
 8004bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bf8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004bfa:	463b      	mov	r3, r7
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	895b      	ldrh	r3, [r3, #10]
 8004c00:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004c04:	463b      	mov	r3, r7
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6959      	ldr	r1, [r3, #20]
 8004c0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004c14:	1d38      	adds	r0, r7, #4
 8004c16:	6800      	ldr	r0, [r0, #0]
 8004c18:	f001 f89d 	bl	8005d56 <USB_WritePMA>
 8004c1c:	e36c      	b.n	80052f8 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004c1e:	463b      	mov	r3, r7
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	6a1b      	ldr	r3, [r3, #32]
 8004c24:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004c28:	1d3b      	adds	r3, r7, #4
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	463b      	mov	r3, r7
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	4413      	add	r3, r2
 8004c36:	881b      	ldrh	r3, [r3, #0]
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c42:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004c46:	1d3b      	adds	r3, r7, #4
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	463b      	mov	r3, r7
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	441a      	add	r2, r3
 8004c54:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004c58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004c6c:	1d3b      	adds	r3, r7, #4
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c72:	1d3b      	adds	r3, r7, #4
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c80:	4413      	add	r3, r2
 8004c82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c84:	463b      	mov	r3, r7
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	011a      	lsls	r2, r3, #4
 8004c8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c8e:	4413      	add	r3, r2
 8004c90:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c94:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c9e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004ca0:	463b      	mov	r3, r7
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	891b      	ldrh	r3, [r3, #8]
 8004ca6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004caa:	463b      	mov	r3, r7
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	6959      	ldr	r1, [r3, #20]
 8004cb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004cba:	1d38      	adds	r0, r7, #4
 8004cbc:	6800      	ldr	r0, [r0, #0]
 8004cbe:	f001 f84a 	bl	8005d56 <USB_WritePMA>
 8004cc2:	e319      	b.n	80052f8 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8004cc4:	1d3b      	adds	r3, r7, #4
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	463b      	mov	r3, r7
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	4413      	add	r3, r2
 8004cd2:	881b      	ldrh	r3, [r3, #0]
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cde:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8004ce2:	1d3b      	adds	r3, r7, #4
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	463b      	mov	r3, r7
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	441a      	add	r2, r3
 8004cf0:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8004cf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cfc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004d08:	463b      	mov	r3, r7
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6a1a      	ldr	r2, [r3, #32]
 8004d0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d12:	1ad2      	subs	r2, r2, r3
 8004d14:	463b      	mov	r3, r7
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004d1a:	1d3b      	adds	r3, r7, #4
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	463b      	mov	r3, r7
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	4413      	add	r3, r2
 8004d28:	881b      	ldrh	r3, [r3, #0]
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f000 8162 	beq.w	8004ffa <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004d36:	1d3b      	adds	r3, r7, #4
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d3e:	463b      	mov	r3, r7
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	785b      	ldrb	r3, [r3, #1]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d164      	bne.n	8004e12 <USB_EPStartXfer+0x926>
 8004d48:	1d3b      	adds	r3, r7, #4
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d4e:	1d3b      	adds	r3, r7, #4
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	461a      	mov	r2, r3
 8004d5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d5c:	4413      	add	r3, r2
 8004d5e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d60:	463b      	mov	r3, r7
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	011a      	lsls	r2, r3, #4
 8004d68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d70:	677b      	str	r3, [r7, #116]	; 0x74
 8004d72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d112      	bne.n	8004da0 <USB_EPStartXfer+0x8b4>
 8004d7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d7c:	881b      	ldrh	r3, [r3, #0]
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d88:	801a      	strh	r2, [r3, #0]
 8004d8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d8c:	881b      	ldrh	r3, [r3, #0]
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d98:	b29a      	uxth	r2, r3
 8004d9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d9c:	801a      	strh	r2, [r3, #0]
 8004d9e:	e057      	b.n	8004e50 <USB_EPStartXfer+0x964>
 8004da0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004da4:	2b3e      	cmp	r3, #62	; 0x3e
 8004da6:	d817      	bhi.n	8004dd8 <USB_EPStartXfer+0x8ec>
 8004da8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dac:	085b      	lsrs	r3, r3, #1
 8004dae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004db2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004db6:	f003 0301 	and.w	r3, r3, #1
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d004      	beq.n	8004dc8 <USB_EPStartXfer+0x8dc>
 8004dbe:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004dc8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	029b      	lsls	r3, r3, #10
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dd4:	801a      	strh	r2, [r3, #0]
 8004dd6:	e03b      	b.n	8004e50 <USB_EPStartXfer+0x964>
 8004dd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ddc:	095b      	lsrs	r3, r3, #5
 8004dde:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004de2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004de6:	f003 031f 	and.w	r3, r3, #31
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d104      	bne.n	8004df8 <USB_EPStartXfer+0x90c>
 8004dee:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004df2:	3b01      	subs	r3, #1
 8004df4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004df8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	029b      	lsls	r3, r3, #10
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e0a:	b29a      	uxth	r2, r3
 8004e0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e0e:	801a      	strh	r2, [r3, #0]
 8004e10:	e01e      	b.n	8004e50 <USB_EPStartXfer+0x964>
 8004e12:	463b      	mov	r3, r7
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	785b      	ldrb	r3, [r3, #1]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d119      	bne.n	8004e50 <USB_EPStartXfer+0x964>
 8004e1c:	1d3b      	adds	r3, r7, #4
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	461a      	mov	r2, r3
 8004e28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e2c:	4413      	add	r3, r2
 8004e2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e32:	463b      	mov	r3, r7
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	011a      	lsls	r2, r3, #4
 8004e3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e3e:	4413      	add	r3, r2
 8004e40:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e44:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004e46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e4e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004e50:	463b      	mov	r3, r7
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	895b      	ldrh	r3, [r3, #10]
 8004e56:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e5a:	463b      	mov	r3, r7
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	6959      	ldr	r1, [r3, #20]
 8004e60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004e6a:	1d38      	adds	r0, r7, #4
 8004e6c:	6800      	ldr	r0, [r0, #0]
 8004e6e:	f000 ff72 	bl	8005d56 <USB_WritePMA>
          ep->xfer_buff += len;
 8004e72:	463b      	mov	r3, r7
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	695a      	ldr	r2, [r3, #20]
 8004e78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e7c:	441a      	add	r2, r3
 8004e7e:	463b      	mov	r3, r7
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8004e84:	463b      	mov	r3, r7
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	6a1a      	ldr	r2, [r3, #32]
 8004e8a:	463b      	mov	r3, r7
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d909      	bls.n	8004ea8 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8004e94:	463b      	mov	r3, r7
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6a1a      	ldr	r2, [r3, #32]
 8004e9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e9e:	1ad2      	subs	r2, r2, r3
 8004ea0:	463b      	mov	r3, r7
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	621a      	str	r2, [r3, #32]
 8004ea6:	e008      	b.n	8004eba <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8004ea8:	463b      	mov	r3, r7
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6a1b      	ldr	r3, [r3, #32]
 8004eae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8004eb2:	463b      	mov	r3, r7
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8004eba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f000 821a 	beq.w	80052f8 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004ec4:	463b      	mov	r3, r7
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	785b      	ldrb	r3, [r3, #1]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d164      	bne.n	8004f98 <USB_EPStartXfer+0xaac>
 8004ece:	1d3b      	adds	r3, r7, #4
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ed4:	1d3b      	adds	r3, r7, #4
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	461a      	mov	r2, r3
 8004ee0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ee2:	4413      	add	r3, r2
 8004ee4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ee6:	463b      	mov	r3, r7
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	011a      	lsls	r2, r3, #4
 8004eee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ef0:	4413      	add	r3, r2
 8004ef2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ef6:	667b      	str	r3, [r7, #100]	; 0x64
 8004ef8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d112      	bne.n	8004f26 <USB_EPStartXfer+0xa3a>
 8004f00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f02:	881b      	ldrh	r3, [r3, #0]
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f0e:	801a      	strh	r2, [r3, #0]
 8004f10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f12:	881b      	ldrh	r3, [r3, #0]
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f22:	801a      	strh	r2, [r3, #0]
 8004f24:	e057      	b.n	8004fd6 <USB_EPStartXfer+0xaea>
 8004f26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f2a:	2b3e      	cmp	r3, #62	; 0x3e
 8004f2c:	d817      	bhi.n	8004f5e <USB_EPStartXfer+0xa72>
 8004f2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f32:	085b      	lsrs	r3, r3, #1
 8004f34:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004f38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f3c:	f003 0301 	and.w	r3, r3, #1
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d004      	beq.n	8004f4e <USB_EPStartXfer+0xa62>
 8004f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f48:	3301      	adds	r3, #1
 8004f4a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	029b      	lsls	r3, r3, #10
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f5a:	801a      	strh	r2, [r3, #0]
 8004f5c:	e03b      	b.n	8004fd6 <USB_EPStartXfer+0xaea>
 8004f5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f62:	095b      	lsrs	r3, r3, #5
 8004f64:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004f68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f6c:	f003 031f 	and.w	r3, r3, #31
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d104      	bne.n	8004f7e <USB_EPStartXfer+0xa92>
 8004f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	029b      	lsls	r3, r3, #10
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f94:	801a      	strh	r2, [r3, #0]
 8004f96:	e01e      	b.n	8004fd6 <USB_EPStartXfer+0xaea>
 8004f98:	463b      	mov	r3, r7
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	785b      	ldrb	r3, [r3, #1]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d119      	bne.n	8004fd6 <USB_EPStartXfer+0xaea>
 8004fa2:	1d3b      	adds	r3, r7, #4
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	673b      	str	r3, [r7, #112]	; 0x70
 8004fa8:	1d3b      	adds	r3, r7, #4
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004fb6:	4413      	add	r3, r2
 8004fb8:	673b      	str	r3, [r7, #112]	; 0x70
 8004fba:	463b      	mov	r3, r7
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	011a      	lsls	r2, r3, #4
 8004fc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004fc4:	4413      	add	r3, r2
 8004fc6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004fca:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004fcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fd4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004fd6:	463b      	mov	r3, r7
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	891b      	ldrh	r3, [r3, #8]
 8004fdc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004fe0:	463b      	mov	r3, r7
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6959      	ldr	r1, [r3, #20]
 8004fe6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004ff0:	1d38      	adds	r0, r7, #4
 8004ff2:	6800      	ldr	r0, [r0, #0]
 8004ff4:	f000 feaf 	bl	8005d56 <USB_WritePMA>
 8004ff8:	e17e      	b.n	80052f8 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004ffa:	463b      	mov	r3, r7
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	785b      	ldrb	r3, [r3, #1]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d16f      	bne.n	80050e4 <USB_EPStartXfer+0xbf8>
 8005004:	1d3b      	adds	r3, r7, #4
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800500c:	1d3b      	adds	r3, r7, #4
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005014:	b29b      	uxth	r3, r3
 8005016:	461a      	mov	r2, r3
 8005018:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800501c:	4413      	add	r3, r2
 800501e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005022:	463b      	mov	r3, r7
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	011a      	lsls	r2, r3, #4
 800502a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800502e:	4413      	add	r3, r2
 8005030:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005034:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005038:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800503c:	2b00      	cmp	r3, #0
 800503e:	d116      	bne.n	800506e <USB_EPStartXfer+0xb82>
 8005040:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005044:	881b      	ldrh	r3, [r3, #0]
 8005046:	b29b      	uxth	r3, r3
 8005048:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800504c:	b29a      	uxth	r2, r3
 800504e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005052:	801a      	strh	r2, [r3, #0]
 8005054:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005058:	881b      	ldrh	r3, [r3, #0]
 800505a:	b29b      	uxth	r3, r3
 800505c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005060:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005064:	b29a      	uxth	r2, r3
 8005066:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800506a:	801a      	strh	r2, [r3, #0]
 800506c:	e05f      	b.n	800512e <USB_EPStartXfer+0xc42>
 800506e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005072:	2b3e      	cmp	r3, #62	; 0x3e
 8005074:	d818      	bhi.n	80050a8 <USB_EPStartXfer+0xbbc>
 8005076:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800507a:	085b      	lsrs	r3, r3, #1
 800507c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005080:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005084:	f003 0301 	and.w	r3, r3, #1
 8005088:	2b00      	cmp	r3, #0
 800508a:	d004      	beq.n	8005096 <USB_EPStartXfer+0xbaa>
 800508c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005090:	3301      	adds	r3, #1
 8005092:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005096:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800509a:	b29b      	uxth	r3, r3
 800509c:	029b      	lsls	r3, r3, #10
 800509e:	b29a      	uxth	r2, r3
 80050a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80050a4:	801a      	strh	r2, [r3, #0]
 80050a6:	e042      	b.n	800512e <USB_EPStartXfer+0xc42>
 80050a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050ac:	095b      	lsrs	r3, r3, #5
 80050ae:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80050b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050b6:	f003 031f 	and.w	r3, r3, #31
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d104      	bne.n	80050c8 <USB_EPStartXfer+0xbdc>
 80050be:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80050c2:	3b01      	subs	r3, #1
 80050c4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80050c8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	029b      	lsls	r3, r3, #10
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050da:	b29a      	uxth	r2, r3
 80050dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80050e0:	801a      	strh	r2, [r3, #0]
 80050e2:	e024      	b.n	800512e <USB_EPStartXfer+0xc42>
 80050e4:	463b      	mov	r3, r7
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	785b      	ldrb	r3, [r3, #1]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d11f      	bne.n	800512e <USB_EPStartXfer+0xc42>
 80050ee:	1d3b      	adds	r3, r7, #4
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80050f6:	1d3b      	adds	r3, r7, #4
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050fe:	b29b      	uxth	r3, r3
 8005100:	461a      	mov	r2, r3
 8005102:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005106:	4413      	add	r3, r2
 8005108:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800510c:	463b      	mov	r3, r7
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	011a      	lsls	r2, r3, #4
 8005114:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005118:	4413      	add	r3, r2
 800511a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800511e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005122:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005126:	b29a      	uxth	r2, r3
 8005128:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800512c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800512e:	463b      	mov	r3, r7
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	891b      	ldrh	r3, [r3, #8]
 8005134:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005138:	463b      	mov	r3, r7
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6959      	ldr	r1, [r3, #20]
 800513e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005142:	b29b      	uxth	r3, r3
 8005144:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005148:	1d38      	adds	r0, r7, #4
 800514a:	6800      	ldr	r0, [r0, #0]
 800514c:	f000 fe03 	bl	8005d56 <USB_WritePMA>
          ep->xfer_buff += len;
 8005150:	463b      	mov	r3, r7
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	695a      	ldr	r2, [r3, #20]
 8005156:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800515a:	441a      	add	r2, r3
 800515c:	463b      	mov	r3, r7
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005162:	463b      	mov	r3, r7
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	6a1a      	ldr	r2, [r3, #32]
 8005168:	463b      	mov	r3, r7
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	429a      	cmp	r2, r3
 8005170:	d909      	bls.n	8005186 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8005172:	463b      	mov	r3, r7
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	6a1a      	ldr	r2, [r3, #32]
 8005178:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800517c:	1ad2      	subs	r2, r2, r3
 800517e:	463b      	mov	r3, r7
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	621a      	str	r2, [r3, #32]
 8005184:	e008      	b.n	8005198 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8005186:	463b      	mov	r3, r7
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	6a1b      	ldr	r3, [r3, #32]
 800518c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005190:	463b      	mov	r3, r7
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2200      	movs	r2, #0
 8005196:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005198:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800519c:	2b00      	cmp	r3, #0
 800519e:	f000 80ab 	beq.w	80052f8 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80051a2:	1d3b      	adds	r3, r7, #4
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80051aa:	463b      	mov	r3, r7
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	785b      	ldrb	r3, [r3, #1]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d16f      	bne.n	8005294 <USB_EPStartXfer+0xda8>
 80051b4:	1d3b      	adds	r3, r7, #4
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80051bc:	1d3b      	adds	r3, r7, #4
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	461a      	mov	r2, r3
 80051c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051cc:	4413      	add	r3, r2
 80051ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80051d2:	463b      	mov	r3, r7
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	011a      	lsls	r2, r3, #4
 80051da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051de:	4413      	add	r3, r2
 80051e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80051e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80051e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d116      	bne.n	800521e <USB_EPStartXfer+0xd32>
 80051f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051f4:	881b      	ldrh	r3, [r3, #0]
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005202:	801a      	strh	r2, [r3, #0]
 8005204:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005208:	881b      	ldrh	r3, [r3, #0]
 800520a:	b29b      	uxth	r3, r3
 800520c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005210:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005214:	b29a      	uxth	r2, r3
 8005216:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800521a:	801a      	strh	r2, [r3, #0]
 800521c:	e05b      	b.n	80052d6 <USB_EPStartXfer+0xdea>
 800521e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005222:	2b3e      	cmp	r3, #62	; 0x3e
 8005224:	d818      	bhi.n	8005258 <USB_EPStartXfer+0xd6c>
 8005226:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800522a:	085b      	lsrs	r3, r3, #1
 800522c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005230:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005234:	f003 0301 	and.w	r3, r3, #1
 8005238:	2b00      	cmp	r3, #0
 800523a:	d004      	beq.n	8005246 <USB_EPStartXfer+0xd5a>
 800523c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005240:	3301      	adds	r3, #1
 8005242:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005246:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800524a:	b29b      	uxth	r3, r3
 800524c:	029b      	lsls	r3, r3, #10
 800524e:	b29a      	uxth	r2, r3
 8005250:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005254:	801a      	strh	r2, [r3, #0]
 8005256:	e03e      	b.n	80052d6 <USB_EPStartXfer+0xdea>
 8005258:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800525c:	095b      	lsrs	r3, r3, #5
 800525e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005262:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005266:	f003 031f 	and.w	r3, r3, #31
 800526a:	2b00      	cmp	r3, #0
 800526c:	d104      	bne.n	8005278 <USB_EPStartXfer+0xd8c>
 800526e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005272:	3b01      	subs	r3, #1
 8005274:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005278:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800527c:	b29b      	uxth	r3, r3
 800527e:	029b      	lsls	r3, r3, #10
 8005280:	b29b      	uxth	r3, r3
 8005282:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005286:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800528a:	b29a      	uxth	r2, r3
 800528c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005290:	801a      	strh	r2, [r3, #0]
 8005292:	e020      	b.n	80052d6 <USB_EPStartXfer+0xdea>
 8005294:	463b      	mov	r3, r7
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	785b      	ldrb	r3, [r3, #1]
 800529a:	2b01      	cmp	r3, #1
 800529c:	d11b      	bne.n	80052d6 <USB_EPStartXfer+0xdea>
 800529e:	1d3b      	adds	r3, r7, #4
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	461a      	mov	r2, r3
 80052aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80052ae:	4413      	add	r3, r2
 80052b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80052b4:	463b      	mov	r3, r7
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	011a      	lsls	r2, r3, #4
 80052bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80052c0:	4413      	add	r3, r2
 80052c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80052ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052d4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80052d6:	463b      	mov	r3, r7
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	895b      	ldrh	r3, [r3, #10]
 80052dc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052e0:	463b      	mov	r3, r7
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	6959      	ldr	r1, [r3, #20]
 80052e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80052f0:	1d38      	adds	r0, r7, #4
 80052f2:	6800      	ldr	r0, [r0, #0]
 80052f4:	f000 fd2f 	bl	8005d56 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80052f8:	1d3b      	adds	r3, r7, #4
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	463b      	mov	r3, r7
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4413      	add	r3, r2
 8005306:	881b      	ldrh	r3, [r3, #0]
 8005308:	b29b      	uxth	r3, r3
 800530a:	f107 020a 	add.w	r2, r7, #10
 800530e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005312:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005316:	8013      	strh	r3, [r2, #0]
 8005318:	f107 030a 	add.w	r3, r7, #10
 800531c:	f107 020a 	add.w	r2, r7, #10
 8005320:	8812      	ldrh	r2, [r2, #0]
 8005322:	f082 0210 	eor.w	r2, r2, #16
 8005326:	801a      	strh	r2, [r3, #0]
 8005328:	f107 030a 	add.w	r3, r7, #10
 800532c:	f107 020a 	add.w	r2, r7, #10
 8005330:	8812      	ldrh	r2, [r2, #0]
 8005332:	f082 0220 	eor.w	r2, r2, #32
 8005336:	801a      	strh	r2, [r3, #0]
 8005338:	1d3b      	adds	r3, r7, #4
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	463b      	mov	r3, r7
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	441a      	add	r2, r3
 8005346:	f107 030a 	add.w	r3, r7, #10
 800534a:	881b      	ldrh	r3, [r3, #0]
 800534c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005350:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005354:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800535c:	b29b      	uxth	r3, r3
 800535e:	8013      	strh	r3, [r2, #0]
 8005360:	e3b5      	b.n	8005ace <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005362:	463b      	mov	r3, r7
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	7b1b      	ldrb	r3, [r3, #12]
 8005368:	2b00      	cmp	r3, #0
 800536a:	f040 8090 	bne.w	800548e <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800536e:	463b      	mov	r3, r7
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	699a      	ldr	r2, [r3, #24]
 8005374:	463b      	mov	r3, r7
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	429a      	cmp	r2, r3
 800537c:	d90e      	bls.n	800539c <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 800537e:	463b      	mov	r3, r7
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8005388:	463b      	mov	r3, r7
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	699a      	ldr	r2, [r3, #24]
 800538e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005392:	1ad2      	subs	r2, r2, r3
 8005394:	463b      	mov	r3, r7
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	619a      	str	r2, [r3, #24]
 800539a:	e008      	b.n	80053ae <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 800539c:	463b      	mov	r3, r7
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80053a6:	463b      	mov	r3, r7
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2200      	movs	r2, #0
 80053ac:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80053ae:	1d3b      	adds	r3, r7, #4
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80053b6:	1d3b      	adds	r3, r7, #4
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053be:	b29b      	uxth	r3, r3
 80053c0:	461a      	mov	r2, r3
 80053c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80053c6:	4413      	add	r3, r2
 80053c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80053cc:	463b      	mov	r3, r7
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	011a      	lsls	r2, r3, #4
 80053d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80053d8:	4413      	add	r3, r2
 80053da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80053e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d116      	bne.n	8005418 <USB_EPStartXfer+0xf2c>
 80053ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80053ee:	881b      	ldrh	r3, [r3, #0]
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80053fc:	801a      	strh	r2, [r3, #0]
 80053fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005402:	881b      	ldrh	r3, [r3, #0]
 8005404:	b29b      	uxth	r3, r3
 8005406:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800540a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800540e:	b29a      	uxth	r2, r3
 8005410:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005414:	801a      	strh	r2, [r3, #0]
 8005416:	e32c      	b.n	8005a72 <USB_EPStartXfer+0x1586>
 8005418:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800541c:	2b3e      	cmp	r3, #62	; 0x3e
 800541e:	d818      	bhi.n	8005452 <USB_EPStartXfer+0xf66>
 8005420:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005424:	085b      	lsrs	r3, r3, #1
 8005426:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800542a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b00      	cmp	r3, #0
 8005434:	d004      	beq.n	8005440 <USB_EPStartXfer+0xf54>
 8005436:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800543a:	3301      	adds	r3, #1
 800543c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005440:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005444:	b29b      	uxth	r3, r3
 8005446:	029b      	lsls	r3, r3, #10
 8005448:	b29a      	uxth	r2, r3
 800544a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800544e:	801a      	strh	r2, [r3, #0]
 8005450:	e30f      	b.n	8005a72 <USB_EPStartXfer+0x1586>
 8005452:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005456:	095b      	lsrs	r3, r3, #5
 8005458:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800545c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005460:	f003 031f 	and.w	r3, r3, #31
 8005464:	2b00      	cmp	r3, #0
 8005466:	d104      	bne.n	8005472 <USB_EPStartXfer+0xf86>
 8005468:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800546c:	3b01      	subs	r3, #1
 800546e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005472:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005476:	b29b      	uxth	r3, r3
 8005478:	029b      	lsls	r3, r3, #10
 800547a:	b29b      	uxth	r3, r3
 800547c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005480:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005484:	b29a      	uxth	r2, r3
 8005486:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800548a:	801a      	strh	r2, [r3, #0]
 800548c:	e2f1      	b.n	8005a72 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800548e:	463b      	mov	r3, r7
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	78db      	ldrb	r3, [r3, #3]
 8005494:	2b02      	cmp	r3, #2
 8005496:	f040 818f 	bne.w	80057b8 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800549a:	463b      	mov	r3, r7
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	785b      	ldrb	r3, [r3, #1]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d175      	bne.n	8005590 <USB_EPStartXfer+0x10a4>
 80054a4:	1d3b      	adds	r3, r7, #4
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80054ac:	1d3b      	adds	r3, r7, #4
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	461a      	mov	r2, r3
 80054b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80054bc:	4413      	add	r3, r2
 80054be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80054c2:	463b      	mov	r3, r7
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	011a      	lsls	r2, r3, #4
 80054ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80054ce:	4413      	add	r3, r2
 80054d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80054d8:	463b      	mov	r3, r7
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d116      	bne.n	8005510 <USB_EPStartXfer+0x1024>
 80054e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80054e6:	881b      	ldrh	r3, [r3, #0]
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80054f4:	801a      	strh	r2, [r3, #0]
 80054f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80054fa:	881b      	ldrh	r3, [r3, #0]
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005502:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005506:	b29a      	uxth	r2, r3
 8005508:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800550c:	801a      	strh	r2, [r3, #0]
 800550e:	e065      	b.n	80055dc <USB_EPStartXfer+0x10f0>
 8005510:	463b      	mov	r3, r7
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	2b3e      	cmp	r3, #62	; 0x3e
 8005518:	d81a      	bhi.n	8005550 <USB_EPStartXfer+0x1064>
 800551a:	463b      	mov	r3, r7
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	085b      	lsrs	r3, r3, #1
 8005522:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005526:	463b      	mov	r3, r7
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	f003 0301 	and.w	r3, r3, #1
 8005530:	2b00      	cmp	r3, #0
 8005532:	d004      	beq.n	800553e <USB_EPStartXfer+0x1052>
 8005534:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005538:	3301      	adds	r3, #1
 800553a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800553e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005542:	b29b      	uxth	r3, r3
 8005544:	029b      	lsls	r3, r3, #10
 8005546:	b29a      	uxth	r2, r3
 8005548:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800554c:	801a      	strh	r2, [r3, #0]
 800554e:	e045      	b.n	80055dc <USB_EPStartXfer+0x10f0>
 8005550:	463b      	mov	r3, r7
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	095b      	lsrs	r3, r3, #5
 8005558:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800555c:	463b      	mov	r3, r7
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	f003 031f 	and.w	r3, r3, #31
 8005566:	2b00      	cmp	r3, #0
 8005568:	d104      	bne.n	8005574 <USB_EPStartXfer+0x1088>
 800556a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800556e:	3b01      	subs	r3, #1
 8005570:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005574:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005578:	b29b      	uxth	r3, r3
 800557a:	029b      	lsls	r3, r3, #10
 800557c:	b29b      	uxth	r3, r3
 800557e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005582:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005586:	b29a      	uxth	r2, r3
 8005588:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800558c:	801a      	strh	r2, [r3, #0]
 800558e:	e025      	b.n	80055dc <USB_EPStartXfer+0x10f0>
 8005590:	463b      	mov	r3, r7
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	785b      	ldrb	r3, [r3, #1]
 8005596:	2b01      	cmp	r3, #1
 8005598:	d120      	bne.n	80055dc <USB_EPStartXfer+0x10f0>
 800559a:	1d3b      	adds	r3, r7, #4
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80055a2:	1d3b      	adds	r3, r7, #4
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	461a      	mov	r2, r3
 80055ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055b2:	4413      	add	r3, r2
 80055b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80055b8:	463b      	mov	r3, r7
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	011a      	lsls	r2, r3, #4
 80055c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055c4:	4413      	add	r3, r2
 80055c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80055ce:	463b      	mov	r3, r7
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	b29a      	uxth	r2, r3
 80055d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80055da:	801a      	strh	r2, [r3, #0]
 80055dc:	1d3b      	adds	r3, r7, #4
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80055e4:	463b      	mov	r3, r7
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	785b      	ldrb	r3, [r3, #1]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d175      	bne.n	80056da <USB_EPStartXfer+0x11ee>
 80055ee:	1d3b      	adds	r3, r7, #4
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80055f6:	1d3b      	adds	r3, r7, #4
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055fe:	b29b      	uxth	r3, r3
 8005600:	461a      	mov	r2, r3
 8005602:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005606:	4413      	add	r3, r2
 8005608:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800560c:	463b      	mov	r3, r7
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	011a      	lsls	r2, r3, #4
 8005614:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005618:	4413      	add	r3, r2
 800561a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800561e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005622:	463b      	mov	r3, r7
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d116      	bne.n	800565a <USB_EPStartXfer+0x116e>
 800562c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005630:	881b      	ldrh	r3, [r3, #0]
 8005632:	b29b      	uxth	r3, r3
 8005634:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005638:	b29a      	uxth	r2, r3
 800563a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800563e:	801a      	strh	r2, [r3, #0]
 8005640:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005644:	881b      	ldrh	r3, [r3, #0]
 8005646:	b29b      	uxth	r3, r3
 8005648:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800564c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005650:	b29a      	uxth	r2, r3
 8005652:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005656:	801a      	strh	r2, [r3, #0]
 8005658:	e061      	b.n	800571e <USB_EPStartXfer+0x1232>
 800565a:	463b      	mov	r3, r7
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	2b3e      	cmp	r3, #62	; 0x3e
 8005662:	d81a      	bhi.n	800569a <USB_EPStartXfer+0x11ae>
 8005664:	463b      	mov	r3, r7
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	085b      	lsrs	r3, r3, #1
 800566c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005670:	463b      	mov	r3, r7
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b00      	cmp	r3, #0
 800567c:	d004      	beq.n	8005688 <USB_EPStartXfer+0x119c>
 800567e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005682:	3301      	adds	r3, #1
 8005684:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005688:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800568c:	b29b      	uxth	r3, r3
 800568e:	029b      	lsls	r3, r3, #10
 8005690:	b29a      	uxth	r2, r3
 8005692:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005696:	801a      	strh	r2, [r3, #0]
 8005698:	e041      	b.n	800571e <USB_EPStartXfer+0x1232>
 800569a:	463b      	mov	r3, r7
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	095b      	lsrs	r3, r3, #5
 80056a2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80056a6:	463b      	mov	r3, r7
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	f003 031f 	and.w	r3, r3, #31
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d104      	bne.n	80056be <USB_EPStartXfer+0x11d2>
 80056b4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80056b8:	3b01      	subs	r3, #1
 80056ba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80056be:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	029b      	lsls	r3, r3, #10
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80056d6:	801a      	strh	r2, [r3, #0]
 80056d8:	e021      	b.n	800571e <USB_EPStartXfer+0x1232>
 80056da:	463b      	mov	r3, r7
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	785b      	ldrb	r3, [r3, #1]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d11c      	bne.n	800571e <USB_EPStartXfer+0x1232>
 80056e4:	1d3b      	adds	r3, r7, #4
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	461a      	mov	r2, r3
 80056f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80056f4:	4413      	add	r3, r2
 80056f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80056fa:	463b      	mov	r3, r7
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	011a      	lsls	r2, r3, #4
 8005702:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005706:	4413      	add	r3, r2
 8005708:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800570c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005710:	463b      	mov	r3, r7
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	b29a      	uxth	r2, r3
 8005718:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800571c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800571e:	463b      	mov	r3, r7
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	69db      	ldr	r3, [r3, #28]
 8005724:	2b00      	cmp	r3, #0
 8005726:	f000 81a4 	beq.w	8005a72 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800572a:	1d3b      	adds	r3, r7, #4
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	463b      	mov	r3, r7
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	4413      	add	r3, r2
 8005738:	881b      	ldrh	r3, [r3, #0]
 800573a:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800573e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d005      	beq.n	8005756 <USB_EPStartXfer+0x126a>
 800574a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800574e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005752:	2b00      	cmp	r3, #0
 8005754:	d10d      	bne.n	8005772 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005756:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800575a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800575e:	2b00      	cmp	r3, #0
 8005760:	f040 8187 	bne.w	8005a72 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005764:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800576c:	2b00      	cmp	r3, #0
 800576e:	f040 8180 	bne.w	8005a72 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005772:	1d3b      	adds	r3, r7, #4
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	463b      	mov	r3, r7
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	4413      	add	r3, r2
 8005780:	881b      	ldrh	r3, [r3, #0]
 8005782:	b29b      	uxth	r3, r3
 8005784:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800578c:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8005790:	1d3b      	adds	r3, r7, #4
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	463b      	mov	r3, r7
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	441a      	add	r2, r3
 800579e:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80057a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	8013      	strh	r3, [r2, #0]
 80057b6:	e15c      	b.n	8005a72 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80057b8:	463b      	mov	r3, r7
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	78db      	ldrb	r3, [r3, #3]
 80057be:	2b01      	cmp	r3, #1
 80057c0:	f040 8155 	bne.w	8005a6e <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80057c4:	463b      	mov	r3, r7
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	699a      	ldr	r2, [r3, #24]
 80057ca:	463b      	mov	r3, r7
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d90e      	bls.n	80057f2 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 80057d4:	463b      	mov	r3, r7
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80057de:	463b      	mov	r3, r7
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	699a      	ldr	r2, [r3, #24]
 80057e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057e8:	1ad2      	subs	r2, r2, r3
 80057ea:	463b      	mov	r3, r7
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	619a      	str	r2, [r3, #24]
 80057f0:	e008      	b.n	8005804 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 80057f2:	463b      	mov	r3, r7
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	699b      	ldr	r3, [r3, #24]
 80057f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80057fc:	463b      	mov	r3, r7
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2200      	movs	r2, #0
 8005802:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005804:	463b      	mov	r3, r7
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	785b      	ldrb	r3, [r3, #1]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d16f      	bne.n	80058ee <USB_EPStartXfer+0x1402>
 800580e:	1d3b      	adds	r3, r7, #4
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005816:	1d3b      	adds	r3, r7, #4
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800581e:	b29b      	uxth	r3, r3
 8005820:	461a      	mov	r2, r3
 8005822:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005826:	4413      	add	r3, r2
 8005828:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800582c:	463b      	mov	r3, r7
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	011a      	lsls	r2, r3, #4
 8005834:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005838:	4413      	add	r3, r2
 800583a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800583e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005842:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005846:	2b00      	cmp	r3, #0
 8005848:	d116      	bne.n	8005878 <USB_EPStartXfer+0x138c>
 800584a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800584e:	881b      	ldrh	r3, [r3, #0]
 8005850:	b29b      	uxth	r3, r3
 8005852:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005856:	b29a      	uxth	r2, r3
 8005858:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800585c:	801a      	strh	r2, [r3, #0]
 800585e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005862:	881b      	ldrh	r3, [r3, #0]
 8005864:	b29b      	uxth	r3, r3
 8005866:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800586a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800586e:	b29a      	uxth	r2, r3
 8005870:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005874:	801a      	strh	r2, [r3, #0]
 8005876:	e05f      	b.n	8005938 <USB_EPStartXfer+0x144c>
 8005878:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800587c:	2b3e      	cmp	r3, #62	; 0x3e
 800587e:	d818      	bhi.n	80058b2 <USB_EPStartXfer+0x13c6>
 8005880:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005884:	085b      	lsrs	r3, r3, #1
 8005886:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800588a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	2b00      	cmp	r3, #0
 8005894:	d004      	beq.n	80058a0 <USB_EPStartXfer+0x13b4>
 8005896:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800589a:	3301      	adds	r3, #1
 800589c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80058a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	029b      	lsls	r3, r3, #10
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80058ae:	801a      	strh	r2, [r3, #0]
 80058b0:	e042      	b.n	8005938 <USB_EPStartXfer+0x144c>
 80058b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058b6:	095b      	lsrs	r3, r3, #5
 80058b8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80058bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058c0:	f003 031f 	and.w	r3, r3, #31
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d104      	bne.n	80058d2 <USB_EPStartXfer+0x13e6>
 80058c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058cc:	3b01      	subs	r3, #1
 80058ce:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80058d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	029b      	lsls	r3, r3, #10
 80058da:	b29b      	uxth	r3, r3
 80058dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058e4:	b29a      	uxth	r2, r3
 80058e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80058ea:	801a      	strh	r2, [r3, #0]
 80058ec:	e024      	b.n	8005938 <USB_EPStartXfer+0x144c>
 80058ee:	463b      	mov	r3, r7
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	785b      	ldrb	r3, [r3, #1]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d11f      	bne.n	8005938 <USB_EPStartXfer+0x144c>
 80058f8:	1d3b      	adds	r3, r7, #4
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005900:	1d3b      	adds	r3, r7, #4
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005908:	b29b      	uxth	r3, r3
 800590a:	461a      	mov	r2, r3
 800590c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005910:	4413      	add	r3, r2
 8005912:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005916:	463b      	mov	r3, r7
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	011a      	lsls	r2, r3, #4
 800591e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005922:	4413      	add	r3, r2
 8005924:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005928:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800592c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005930:	b29a      	uxth	r2, r3
 8005932:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005936:	801a      	strh	r2, [r3, #0]
 8005938:	1d3b      	adds	r3, r7, #4
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005940:	463b      	mov	r3, r7
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	785b      	ldrb	r3, [r3, #1]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d16f      	bne.n	8005a2a <USB_EPStartXfer+0x153e>
 800594a:	1d3b      	adds	r3, r7, #4
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005952:	1d3b      	adds	r3, r7, #4
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800595a:	b29b      	uxth	r3, r3
 800595c:	461a      	mov	r2, r3
 800595e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005962:	4413      	add	r3, r2
 8005964:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005968:	463b      	mov	r3, r7
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	011a      	lsls	r2, r3, #4
 8005970:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005974:	4413      	add	r3, r2
 8005976:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800597a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800597e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005982:	2b00      	cmp	r3, #0
 8005984:	d116      	bne.n	80059b4 <USB_EPStartXfer+0x14c8>
 8005986:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800598a:	881b      	ldrh	r3, [r3, #0]
 800598c:	b29b      	uxth	r3, r3
 800598e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005992:	b29a      	uxth	r2, r3
 8005994:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005998:	801a      	strh	r2, [r3, #0]
 800599a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800599e:	881b      	ldrh	r3, [r3, #0]
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059aa:	b29a      	uxth	r2, r3
 80059ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059b0:	801a      	strh	r2, [r3, #0]
 80059b2:	e05e      	b.n	8005a72 <USB_EPStartXfer+0x1586>
 80059b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059b8:	2b3e      	cmp	r3, #62	; 0x3e
 80059ba:	d818      	bhi.n	80059ee <USB_EPStartXfer+0x1502>
 80059bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059c0:	085b      	lsrs	r3, r3, #1
 80059c2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80059c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d004      	beq.n	80059dc <USB_EPStartXfer+0x14f0>
 80059d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80059d6:	3301      	adds	r3, #1
 80059d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80059dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	029b      	lsls	r3, r3, #10
 80059e4:	b29a      	uxth	r2, r3
 80059e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059ea:	801a      	strh	r2, [r3, #0]
 80059ec:	e041      	b.n	8005a72 <USB_EPStartXfer+0x1586>
 80059ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059f2:	095b      	lsrs	r3, r3, #5
 80059f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80059f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059fc:	f003 031f 	and.w	r3, r3, #31
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d104      	bne.n	8005a0e <USB_EPStartXfer+0x1522>
 8005a04:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005a0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	029b      	lsls	r3, r3, #10
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a20:	b29a      	uxth	r2, r3
 8005a22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a26:	801a      	strh	r2, [r3, #0]
 8005a28:	e023      	b.n	8005a72 <USB_EPStartXfer+0x1586>
 8005a2a:	463b      	mov	r3, r7
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	785b      	ldrb	r3, [r3, #1]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d11e      	bne.n	8005a72 <USB_EPStartXfer+0x1586>
 8005a34:	1d3b      	adds	r3, r7, #4
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	461a      	mov	r2, r3
 8005a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a44:	4413      	add	r3, r2
 8005a46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005a4a:	463b      	mov	r3, r7
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	011a      	lsls	r2, r3, #4
 8005a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a56:	4413      	add	r3, r2
 8005a58:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005a60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a6a:	801a      	strh	r2, [r3, #0]
 8005a6c:	e001      	b.n	8005a72 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e02e      	b.n	8005ad0 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005a72:	1d3b      	adds	r3, r7, #4
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	463b      	mov	r3, r7
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	4413      	add	r3, r2
 8005a80:	881b      	ldrh	r3, [r3, #0]
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a8c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005a90:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005a94:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005a98:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005a9c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005aa0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005aa4:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005aa8:	1d3b      	adds	r3, r7, #4
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	463b      	mov	r3, r7
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	441a      	add	r2, r3
 8005ab6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005aba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005abe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ac2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ada:	b480      	push	{r7}
 8005adc:	b085      	sub	sp, #20
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
 8005ae2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	785b      	ldrb	r3, [r3, #1]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d020      	beq.n	8005b2e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	4413      	add	r3, r2
 8005af6:	881b      	ldrh	r3, [r3, #0]
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005afe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b02:	81bb      	strh	r3, [r7, #12]
 8005b04:	89bb      	ldrh	r3, [r7, #12]
 8005b06:	f083 0310 	eor.w	r3, r3, #16
 8005b0a:	81bb      	strh	r3, [r7, #12]
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	441a      	add	r2, r3
 8005b16:	89bb      	ldrh	r3, [r7, #12]
 8005b18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	8013      	strh	r3, [r2, #0]
 8005b2c:	e01f      	b.n	8005b6e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	4413      	add	r3, r2
 8005b38:	881b      	ldrh	r3, [r3, #0]
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b44:	81fb      	strh	r3, [r7, #14]
 8005b46:	89fb      	ldrh	r3, [r7, #14]
 8005b48:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005b4c:	81fb      	strh	r3, [r7, #14]
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	441a      	add	r2, r3
 8005b58:	89fb      	ldrh	r3, [r7, #14]
 8005b5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3714      	adds	r7, #20
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bc80      	pop	{r7}
 8005b78:	4770      	bx	lr

08005b7a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	b087      	sub	sp, #28
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
 8005b82:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	7b1b      	ldrb	r3, [r3, #12]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f040 809d 	bne.w	8005cc8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	785b      	ldrb	r3, [r3, #1]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d04c      	beq.n	8005c30 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	4413      	add	r3, r2
 8005ba0:	881b      	ldrh	r3, [r3, #0]
 8005ba2:	823b      	strh	r3, [r7, #16]
 8005ba4:	8a3b      	ldrh	r3, [r7, #16]
 8005ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d01b      	beq.n	8005be6 <USB_EPClearStall+0x6c>
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	4413      	add	r3, r2
 8005bb8:	881b      	ldrh	r3, [r3, #0]
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bc4:	81fb      	strh	r3, [r7, #14]
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	441a      	add	r2, r3
 8005bd0:	89fb      	ldrh	r3, [r7, #14]
 8005bd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bde:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	78db      	ldrb	r3, [r3, #3]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d06c      	beq.n	8005cc8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	4413      	add	r3, r2
 8005bf8:	881b      	ldrh	r3, [r3, #0]
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c04:	81bb      	strh	r3, [r7, #12]
 8005c06:	89bb      	ldrh	r3, [r7, #12]
 8005c08:	f083 0320 	eor.w	r3, r3, #32
 8005c0c:	81bb      	strh	r3, [r7, #12]
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	441a      	add	r2, r3
 8005c18:	89bb      	ldrh	r3, [r7, #12]
 8005c1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	8013      	strh	r3, [r2, #0]
 8005c2e:	e04b      	b.n	8005cc8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	4413      	add	r3, r2
 8005c3a:	881b      	ldrh	r3, [r3, #0]
 8005c3c:	82fb      	strh	r3, [r7, #22]
 8005c3e:	8afb      	ldrh	r3, [r7, #22]
 8005c40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d01b      	beq.n	8005c80 <USB_EPClearStall+0x106>
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4413      	add	r3, r2
 8005c52:	881b      	ldrh	r3, [r3, #0]
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c5e:	82bb      	strh	r3, [r7, #20]
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	441a      	add	r2, r3
 8005c6a:	8abb      	ldrh	r3, [r7, #20]
 8005c6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	4413      	add	r3, r2
 8005c8a:	881b      	ldrh	r3, [r3, #0]
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c96:	827b      	strh	r3, [r7, #18]
 8005c98:	8a7b      	ldrh	r3, [r7, #18]
 8005c9a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005c9e:	827b      	strh	r3, [r7, #18]
 8005ca0:	8a7b      	ldrh	r3, [r7, #18]
 8005ca2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005ca6:	827b      	strh	r3, [r7, #18]
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	441a      	add	r2, r3
 8005cb2:	8a7b      	ldrh	r3, [r7, #18]
 8005cb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	371c      	adds	r7, #28
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bc80      	pop	{r7}
 8005cd2:	4770      	bx	lr

08005cd4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	460b      	mov	r3, r1
 8005cde:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005ce0:	78fb      	ldrb	r3, [r7, #3]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d103      	bne.n	8005cee <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2280      	movs	r2, #128	; 0x80
 8005cea:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bc80      	pop	{r7}
 8005cf8:	4770      	bx	lr

08005cfa <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b083      	sub	sp, #12
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bc80      	pop	{r7}
 8005d0c:	4770      	bx	lr

08005d0e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005d0e:	b480      	push	{r7}
 8005d10:	b083      	sub	sp, #12
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bc80      	pop	{r7}
 8005d20:	4770      	bx	lr

08005d22 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005d22:	b480      	push	{r7}
 8005d24:	b085      	sub	sp, #20
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005d34:	68fb      	ldr	r3, [r7, #12]
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3714      	adds	r7, #20
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bc80      	pop	{r7}
 8005d3e:	4770      	bx	lr

08005d40 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005d4a:	2300      	movs	r3, #0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bc80      	pop	{r7}
 8005d54:	4770      	bx	lr

08005d56 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005d56:	b480      	push	{r7}
 8005d58:	b08d      	sub	sp, #52	; 0x34
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	60f8      	str	r0, [r7, #12]
 8005d5e:	60b9      	str	r1, [r7, #8]
 8005d60:	4611      	mov	r1, r2
 8005d62:	461a      	mov	r2, r3
 8005d64:	460b      	mov	r3, r1
 8005d66:	80fb      	strh	r3, [r7, #6]
 8005d68:	4613      	mov	r3, r2
 8005d6a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005d6c:	88bb      	ldrh	r3, [r7, #4]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	085b      	lsrs	r3, r3, #1
 8005d72:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005d7c:	88fb      	ldrh	r3, [r7, #6]
 8005d7e:	005a      	lsls	r2, r3, #1
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	4413      	add	r3, r2
 8005d84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d88:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005d8a:	6a3b      	ldr	r3, [r7, #32]
 8005d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d8e:	e01e      	b.n	8005dce <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d98:	3301      	adds	r3, #1
 8005d9a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	021b      	lsls	r3, r3, #8
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	461a      	mov	r2, r3
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	b29a      	uxth	r2, r3
 8005db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db8:	3302      	adds	r3, #2
 8005dba:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dbe:	3302      	adds	r3, #2
 8005dc0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d1dd      	bne.n	8005d90 <USB_WritePMA+0x3a>
  }
}
 8005dd4:	bf00      	nop
 8005dd6:	bf00      	nop
 8005dd8:	3734      	adds	r7, #52	; 0x34
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bc80      	pop	{r7}
 8005dde:	4770      	bx	lr

08005de0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b08b      	sub	sp, #44	; 0x2c
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	4611      	mov	r1, r2
 8005dec:	461a      	mov	r2, r3
 8005dee:	460b      	mov	r3, r1
 8005df0:	80fb      	strh	r3, [r7, #6]
 8005df2:	4613      	mov	r3, r2
 8005df4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005df6:	88bb      	ldrh	r3, [r7, #4]
 8005df8:	085b      	lsrs	r3, r3, #1
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005e06:	88fb      	ldrh	r3, [r7, #6]
 8005e08:	005a      	lsls	r2, r3, #1
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e12:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	627b      	str	r3, [r7, #36]	; 0x24
 8005e18:	e01b      	b.n	8005e52 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005e1a:	6a3b      	ldr	r3, [r7, #32]
 8005e1c:	881b      	ldrh	r3, [r3, #0]
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005e22:	6a3b      	ldr	r3, [r7, #32]
 8005e24:	3302      	adds	r3, #2
 8005e26:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	b2da      	uxtb	r2, r3
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	3301      	adds	r3, #1
 8005e34:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	0a1b      	lsrs	r3, r3, #8
 8005e3a:	b2da      	uxtb	r2, r3
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	3301      	adds	r3, #1
 8005e44:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005e46:	6a3b      	ldr	r3, [r7, #32]
 8005e48:	3302      	adds	r3, #2
 8005e4a:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	627b      	str	r3, [r7, #36]	; 0x24
 8005e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d1e0      	bne.n	8005e1a <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005e58:	88bb      	ldrh	r3, [r7, #4]
 8005e5a:	f003 0301 	and.w	r3, r3, #1
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d007      	beq.n	8005e74 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8005e64:	6a3b      	ldr	r3, [r7, #32]
 8005e66:	881b      	ldrh	r3, [r3, #0]
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	b2da      	uxtb	r2, r3
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	701a      	strb	r2, [r3, #0]
  }
}
 8005e74:	bf00      	nop
 8005e76:	372c      	adds	r7, #44	; 0x2c
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bc80      	pop	{r7}
 8005e7c:	4770      	bx	lr

08005e7e <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b082      	sub	sp, #8
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
 8005e86:	460b      	mov	r3, r1
 8005e88:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005e8a:	2304      	movs	r3, #4
 8005e8c:	2203      	movs	r2, #3
 8005e8e:	2181      	movs	r1, #129	; 0x81
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f001 fc84 	bl	800779e <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005e9c:	2010      	movs	r0, #16
 8005e9e:	f001 fd93 	bl	80079c8 <USBD_static_malloc>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d101      	bne.n	8005eb8 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8005eb4:	2302      	movs	r3, #2
 8005eb6:	e005      	b.n	8005ec4 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3708      	adds	r7, #8
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8005ed8:	2181      	movs	r1, #129	; 0x81
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f001 fc85 	bl	80077ea <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d009      	beq.n	8005f04 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f001 fd72 	bl	80079e0 <USBD_static_free>
    pdev->pClassData = NULL;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3708      	adds	r7, #8
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
	...

08005f10 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b088      	sub	sp, #32
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f20:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8005f22:	2300      	movs	r3, #0
 8005f24:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8005f26:	2300      	movs	r3, #0
 8005f28:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d045      	beq.n	8005fca <USBD_HID_Setup+0xba>
 8005f3e:	2b20      	cmp	r3, #32
 8005f40:	f040 80d3 	bne.w	80060ea <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	785b      	ldrb	r3, [r3, #1]
 8005f48:	3b02      	subs	r3, #2
 8005f4a:	2b09      	cmp	r3, #9
 8005f4c:	d835      	bhi.n	8005fba <USBD_HID_Setup+0xaa>
 8005f4e:	a201      	add	r2, pc, #4	; (adr r2, 8005f54 <USBD_HID_Setup+0x44>)
 8005f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f54:	08005fab 	.word	0x08005fab
 8005f58:	08005f8b 	.word	0x08005f8b
 8005f5c:	08005fbb 	.word	0x08005fbb
 8005f60:	08005fbb 	.word	0x08005fbb
 8005f64:	08005fbb 	.word	0x08005fbb
 8005f68:	08005fbb 	.word	0x08005fbb
 8005f6c:	08005fbb 	.word	0x08005fbb
 8005f70:	08005fbb 	.word	0x08005fbb
 8005f74:	08005f99 	.word	0x08005f99
 8005f78:	08005f7d 	.word	0x08005f7d
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	885b      	ldrh	r3, [r3, #2]
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	461a      	mov	r2, r3
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	601a      	str	r2, [r3, #0]
          break;
 8005f88:	e01e      	b.n	8005fc8 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	4619      	mov	r1, r3
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f001 f944 	bl	800721e <USBD_CtlSendData>
          break;
 8005f96:	e017      	b.n	8005fc8 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	885b      	ldrh	r3, [r3, #2]
 8005f9c:	0a1b      	lsrs	r3, r3, #8
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	605a      	str	r2, [r3, #4]
          break;
 8005fa8:	e00e      	b.n	8005fc8 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	3304      	adds	r3, #4
 8005fae:	2201      	movs	r2, #1
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f001 f933 	bl	800721e <USBD_CtlSendData>
          break;
 8005fb8:	e006      	b.n	8005fc8 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8005fba:	6839      	ldr	r1, [r7, #0]
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f001 f8c4 	bl	800714a <USBD_CtlError>
          ret = USBD_FAIL;
 8005fc2:	2302      	movs	r3, #2
 8005fc4:	75fb      	strb	r3, [r7, #23]
          break;
 8005fc6:	bf00      	nop
      }
      break;
 8005fc8:	e096      	b.n	80060f8 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	785b      	ldrb	r3, [r3, #1]
 8005fce:	2b0b      	cmp	r3, #11
 8005fd0:	f200 8083 	bhi.w	80060da <USBD_HID_Setup+0x1ca>
 8005fd4:	a201      	add	r2, pc, #4	; (adr r2, 8005fdc <USBD_HID_Setup+0xcc>)
 8005fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fda:	bf00      	nop
 8005fdc:	0800600d 	.word	0x0800600d
 8005fe0:	080060db 	.word	0x080060db
 8005fe4:	080060db 	.word	0x080060db
 8005fe8:	080060db 	.word	0x080060db
 8005fec:	080060db 	.word	0x080060db
 8005ff0:	080060db 	.word	0x080060db
 8005ff4:	08006035 	.word	0x08006035
 8005ff8:	080060db 	.word	0x080060db
 8005ffc:	080060db 	.word	0x080060db
 8006000:	080060db 	.word	0x080060db
 8006004:	0800608d 	.word	0x0800608d
 8006008:	080060b5 	.word	0x080060b5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006012:	2b03      	cmp	r3, #3
 8006014:	d107      	bne.n	8006026 <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006016:	f107 030e 	add.w	r3, r7, #14
 800601a:	2202      	movs	r2, #2
 800601c:	4619      	mov	r1, r3
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f001 f8fd 	bl	800721e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006024:	e060      	b.n	80060e8 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006026:	6839      	ldr	r1, [r7, #0]
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f001 f88e 	bl	800714a <USBD_CtlError>
            ret = USBD_FAIL;
 800602e:	2302      	movs	r3, #2
 8006030:	75fb      	strb	r3, [r7, #23]
          break;
 8006032:	e059      	b.n	80060e8 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	885b      	ldrh	r3, [r3, #2]
 8006038:	0a1b      	lsrs	r3, r3, #8
 800603a:	b29b      	uxth	r3, r3
 800603c:	2b22      	cmp	r3, #34	; 0x22
 800603e:	d108      	bne.n	8006052 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	88db      	ldrh	r3, [r3, #6]
 8006044:	2b3f      	cmp	r3, #63	; 0x3f
 8006046:	bf28      	it	cs
 8006048:	233f      	movcs	r3, #63	; 0x3f
 800604a:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 800604c:	4b2d      	ldr	r3, [pc, #180]	; (8006104 <USBD_HID_Setup+0x1f4>)
 800604e:	61bb      	str	r3, [r7, #24]
 8006050:	e015      	b.n	800607e <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	885b      	ldrh	r3, [r3, #2]
 8006056:	0a1b      	lsrs	r3, r3, #8
 8006058:	b29b      	uxth	r3, r3
 800605a:	2b21      	cmp	r3, #33	; 0x21
 800605c:	d108      	bne.n	8006070 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 800605e:	4b2a      	ldr	r3, [pc, #168]	; (8006108 <USBD_HID_Setup+0x1f8>)
 8006060:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	88db      	ldrh	r3, [r3, #6]
 8006066:	2b09      	cmp	r3, #9
 8006068:	bf28      	it	cs
 800606a:	2309      	movcs	r3, #9
 800606c:	83fb      	strh	r3, [r7, #30]
 800606e:	e006      	b.n	800607e <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006070:	6839      	ldr	r1, [r7, #0]
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f001 f869 	bl	800714a <USBD_CtlError>
            ret = USBD_FAIL;
 8006078:	2302      	movs	r3, #2
 800607a:	75fb      	strb	r3, [r7, #23]
            break;
 800607c:	e034      	b.n	80060e8 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 800607e:	8bfb      	ldrh	r3, [r7, #30]
 8006080:	461a      	mov	r2, r3
 8006082:	69b9      	ldr	r1, [r7, #24]
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f001 f8ca 	bl	800721e <USBD_CtlSendData>
          break;
 800608a:	e02d      	b.n	80060e8 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006092:	2b03      	cmp	r3, #3
 8006094:	d107      	bne.n	80060a6 <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	3308      	adds	r3, #8
 800609a:	2201      	movs	r2, #1
 800609c:	4619      	mov	r1, r3
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f001 f8bd 	bl	800721e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80060a4:	e020      	b.n	80060e8 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80060a6:	6839      	ldr	r1, [r7, #0]
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f001 f84e 	bl	800714a <USBD_CtlError>
            ret = USBD_FAIL;
 80060ae:	2302      	movs	r3, #2
 80060b0:	75fb      	strb	r3, [r7, #23]
          break;
 80060b2:	e019      	b.n	80060e8 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060ba:	2b03      	cmp	r3, #3
 80060bc:	d106      	bne.n	80060cc <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	885b      	ldrh	r3, [r3, #2]
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	461a      	mov	r2, r3
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80060ca:	e00d      	b.n	80060e8 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80060cc:	6839      	ldr	r1, [r7, #0]
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f001 f83b 	bl	800714a <USBD_CtlError>
            ret = USBD_FAIL;
 80060d4:	2302      	movs	r3, #2
 80060d6:	75fb      	strb	r3, [r7, #23]
          break;
 80060d8:	e006      	b.n	80060e8 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 80060da:	6839      	ldr	r1, [r7, #0]
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f001 f834 	bl	800714a <USBD_CtlError>
          ret = USBD_FAIL;
 80060e2:	2302      	movs	r3, #2
 80060e4:	75fb      	strb	r3, [r7, #23]
          break;
 80060e6:	bf00      	nop
      }
      break;
 80060e8:	e006      	b.n	80060f8 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 80060ea:	6839      	ldr	r1, [r7, #0]
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f001 f82c 	bl	800714a <USBD_CtlError>
      ret = USBD_FAIL;
 80060f2:	2302      	movs	r3, #2
 80060f4:	75fb      	strb	r3, [r7, #23]
      break;
 80060f6:	bf00      	nop
  }

  return ret;
 80060f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3720      	adds	r7, #32
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	200000e0 	.word	0x200000e0
 8006108:	200000c8 	.word	0x200000c8

0800610c <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b086      	sub	sp, #24
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	4613      	mov	r3, r2
 8006118:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006120:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006128:	2b03      	cmp	r3, #3
 800612a:	d10c      	bne.n	8006146 <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	7b1b      	ldrb	r3, [r3, #12]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d108      	bne.n	8006146 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	2201      	movs	r2, #1
 8006138:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 800613a:	88fb      	ldrh	r3, [r7, #6]
 800613c:	68ba      	ldr	r2, [r7, #8]
 800613e:	2181      	movs	r1, #129	; 0x81
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f001 fbfa 	bl	800793a <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8006146:	2300      	movs	r3, #0
}
 8006148:	4618      	mov	r0, r3
 800614a:	3718      	adds	r7, #24
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2222      	movs	r2, #34	; 0x22
 800615c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 800615e:	4b03      	ldr	r3, [pc, #12]	; (800616c <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8006160:	4618      	mov	r0, r3
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	bc80      	pop	{r7}
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	2000005c 	.word	0x2000005c

08006170 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2222      	movs	r2, #34	; 0x22
 800617c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 800617e:	4b03      	ldr	r3, [pc, #12]	; (800618c <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8006180:	4618      	mov	r0, r3
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	bc80      	pop	{r7}
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop
 800618c:	20000080 	.word	0x20000080

08006190 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2222      	movs	r2, #34	; 0x22
 800619c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 800619e:	4b03      	ldr	r3, [pc, #12]	; (80061ac <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bc80      	pop	{r7}
 80061a8:	4770      	bx	lr
 80061aa:	bf00      	nop
 80061ac:	200000a4 	.word	0x200000a4

080061b0 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	460b      	mov	r3, r1
 80061ba:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061c2:	2200      	movs	r2, #0
 80061c4:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bc80      	pop	{r7}
 80061d0:	4770      	bx	lr
	...

080061d4 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	220a      	movs	r2, #10
 80061e0:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 80061e2:	4b03      	ldr	r3, [pc, #12]	; (80061f0 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bc80      	pop	{r7}
 80061ec:	4770      	bx	lr
 80061ee:	bf00      	nop
 80061f0:	200000d4 	.word	0x200000d4

080061f4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	4613      	mov	r3, r2
 8006200:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d101      	bne.n	800620c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006208:	2302      	movs	r3, #2
 800620a:	e01a      	b.n	8006242 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006212:	2b00      	cmp	r3, #0
 8006214:	d003      	beq.n	800621e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2200      	movs	r2, #0
 800621a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d003      	beq.n	800622c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	68ba      	ldr	r2, [r7, #8]
 8006228:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	79fa      	ldrb	r2, [r7, #7]
 8006238:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800623a:	68f8      	ldr	r0, [r7, #12]
 800623c:	f001 fa4c 	bl	80076d8 <USBD_LL_Init>

  return USBD_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800624a:	b480      	push	{r7}
 800624c:	b085      	sub	sp, #20
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
 8006252:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006254:	2300      	movs	r3, #0
 8006256:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d006      	beq.n	800626c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	683a      	ldr	r2, [r7, #0]
 8006262:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006266:	2300      	movs	r3, #0
 8006268:	73fb      	strb	r3, [r7, #15]
 800626a:	e001      	b.n	8006270 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800626c:	2302      	movs	r3, #2
 800626e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006270:	7bfb      	ldrb	r3, [r7, #15]
}
 8006272:	4618      	mov	r0, r3
 8006274:	3714      	adds	r7, #20
 8006276:	46bd      	mov	sp, r7
 8006278:	bc80      	pop	{r7}
 800627a:	4770      	bx	lr

0800627c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b082      	sub	sp, #8
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f001 fa6f 	bl	8007768 <USBD_LL_Start>

  return USBD_OK;
 800628a:	2300      	movs	r3, #0
}
 800628c:	4618      	mov	r0, r3
 800628e:	3708      	adds	r7, #8
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	370c      	adds	r7, #12
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bc80      	pop	{r7}
 80062a6:	4770      	bx	lr

080062a8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	460b      	mov	r3, r1
 80062b2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80062b4:	2302      	movs	r3, #2
 80062b6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00c      	beq.n	80062dc <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	78fa      	ldrb	r2, [r7, #3]
 80062cc:	4611      	mov	r1, r2
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	4798      	blx	r3
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d101      	bne.n	80062dc <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80062d8:	2300      	movs	r3, #0
 80062da:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80062dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3710      	adds	r7, #16
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}

080062e6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80062e6:	b580      	push	{r7, lr}
 80062e8:	b082      	sub	sp, #8
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
 80062ee:	460b      	mov	r3, r1
 80062f0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	78fa      	ldrb	r2, [r7, #3]
 80062fc:	4611      	mov	r1, r2
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	4798      	blx	r3

  return USBD_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3708      	adds	r7, #8
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800631c:	6839      	ldr	r1, [r7, #0]
 800631e:	4618      	mov	r0, r3
 8006320:	f000 fed7 	bl	80070d2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006332:	461a      	mov	r2, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006340:	f003 031f 	and.w	r3, r3, #31
 8006344:	2b02      	cmp	r3, #2
 8006346:	d016      	beq.n	8006376 <USBD_LL_SetupStage+0x6a>
 8006348:	2b02      	cmp	r3, #2
 800634a:	d81c      	bhi.n	8006386 <USBD_LL_SetupStage+0x7a>
 800634c:	2b00      	cmp	r3, #0
 800634e:	d002      	beq.n	8006356 <USBD_LL_SetupStage+0x4a>
 8006350:	2b01      	cmp	r3, #1
 8006352:	d008      	beq.n	8006366 <USBD_LL_SetupStage+0x5a>
 8006354:	e017      	b.n	8006386 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800635c:	4619      	mov	r1, r3
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 f9ca 	bl	80066f8 <USBD_StdDevReq>
      break;
 8006364:	e01a      	b.n	800639c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800636c:	4619      	mov	r1, r3
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 fa2c 	bl	80067cc <USBD_StdItfReq>
      break;
 8006374:	e012      	b.n	800639c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800637c:	4619      	mov	r1, r3
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 fa6c 	bl	800685c <USBD_StdEPReq>
      break;
 8006384:	e00a      	b.n	800639c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800638c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006390:	b2db      	uxtb	r3, r3
 8006392:	4619      	mov	r1, r3
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f001 fa47 	bl	8007828 <USBD_LL_StallEP>
      break;
 800639a:	bf00      	nop
  }

  return USBD_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3708      	adds	r7, #8
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b086      	sub	sp, #24
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	60f8      	str	r0, [r7, #12]
 80063ae:	460b      	mov	r3, r1
 80063b0:	607a      	str	r2, [r7, #4]
 80063b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80063b4:	7afb      	ldrb	r3, [r7, #11]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d14b      	bne.n	8006452 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80063c0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80063c8:	2b03      	cmp	r3, #3
 80063ca:	d134      	bne.n	8006436 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	68da      	ldr	r2, [r3, #12]
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d919      	bls.n	800640c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	68da      	ldr	r2, [r3, #12]
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	1ad2      	subs	r2, r2, r3
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	68da      	ldr	r2, [r3, #12]
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d203      	bcs.n	80063fa <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	e002      	b.n	8006400 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80063fe:	b29b      	uxth	r3, r3
 8006400:	461a      	mov	r2, r3
 8006402:	6879      	ldr	r1, [r7, #4]
 8006404:	68f8      	ldr	r0, [r7, #12]
 8006406:	f000 ff38 	bl	800727a <USBD_CtlContinueRx>
 800640a:	e038      	b.n	800647e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00a      	beq.n	800642e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800641e:	2b03      	cmp	r3, #3
 8006420:	d105      	bne.n	800642e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	68f8      	ldr	r0, [r7, #12]
 800642c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800642e:	68f8      	ldr	r0, [r7, #12]
 8006430:	f000 ff35 	bl	800729e <USBD_CtlSendStatus>
 8006434:	e023      	b.n	800647e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800643c:	2b05      	cmp	r3, #5
 800643e:	d11e      	bne.n	800647e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006448:	2100      	movs	r1, #0
 800644a:	68f8      	ldr	r0, [r7, #12]
 800644c:	f001 f9ec 	bl	8007828 <USBD_LL_StallEP>
 8006450:	e015      	b.n	800647e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d00d      	beq.n	800647a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006464:	2b03      	cmp	r3, #3
 8006466:	d108      	bne.n	800647a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800646e:	699b      	ldr	r3, [r3, #24]
 8006470:	7afa      	ldrb	r2, [r7, #11]
 8006472:	4611      	mov	r1, r2
 8006474:	68f8      	ldr	r0, [r7, #12]
 8006476:	4798      	blx	r3
 8006478:	e001      	b.n	800647e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800647a:	2302      	movs	r3, #2
 800647c:	e000      	b.n	8006480 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800647e:	2300      	movs	r3, #0
}
 8006480:	4618      	mov	r0, r3
 8006482:	3718      	adds	r7, #24
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b086      	sub	sp, #24
 800648c:	af00      	add	r7, sp, #0
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	460b      	mov	r3, r1
 8006492:	607a      	str	r2, [r7, #4]
 8006494:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006496:	7afb      	ldrb	r3, [r7, #11]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d17f      	bne.n	800659c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	3314      	adds	r3, #20
 80064a0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d15c      	bne.n	8006566 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	68da      	ldr	r2, [r3, #12]
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d915      	bls.n	80064e4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	68da      	ldr	r2, [r3, #12]
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	1ad2      	subs	r2, r2, r3
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	461a      	mov	r2, r3
 80064ce:	6879      	ldr	r1, [r7, #4]
 80064d0:	68f8      	ldr	r0, [r7, #12]
 80064d2:	f000 fec0 	bl	8007256 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80064d6:	2300      	movs	r3, #0
 80064d8:	2200      	movs	r2, #0
 80064da:	2100      	movs	r1, #0
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	f001 fa4f 	bl	8007980 <USBD_LL_PrepareReceive>
 80064e2:	e04e      	b.n	8006582 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	697a      	ldr	r2, [r7, #20]
 80064ea:	6912      	ldr	r2, [r2, #16]
 80064ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80064f0:	fb02 f201 	mul.w	r2, r2, r1
 80064f4:	1a9b      	subs	r3, r3, r2
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d11c      	bne.n	8006534 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	689a      	ldr	r2, [r3, #8]
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006502:	429a      	cmp	r2, r3
 8006504:	d316      	bcc.n	8006534 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	689a      	ldr	r2, [r3, #8]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006510:	429a      	cmp	r2, r3
 8006512:	d20f      	bcs.n	8006534 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006514:	2200      	movs	r2, #0
 8006516:	2100      	movs	r1, #0
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f000 fe9c 	bl	8007256 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006526:	2300      	movs	r3, #0
 8006528:	2200      	movs	r2, #0
 800652a:	2100      	movs	r1, #0
 800652c:	68f8      	ldr	r0, [r7, #12]
 800652e:	f001 fa27 	bl	8007980 <USBD_LL_PrepareReceive>
 8006532:	e026      	b.n	8006582 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00a      	beq.n	8006556 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006546:	2b03      	cmp	r3, #3
 8006548:	d105      	bne.n	8006556 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	68f8      	ldr	r0, [r7, #12]
 8006554:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006556:	2180      	movs	r1, #128	; 0x80
 8006558:	68f8      	ldr	r0, [r7, #12]
 800655a:	f001 f965 	bl	8007828 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f000 feb0 	bl	80072c4 <USBD_CtlReceiveStatus>
 8006564:	e00d      	b.n	8006582 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800656c:	2b04      	cmp	r3, #4
 800656e:	d004      	beq.n	800657a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006576:	2b00      	cmp	r3, #0
 8006578:	d103      	bne.n	8006582 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800657a:	2180      	movs	r1, #128	; 0x80
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	f001 f953 	bl	8007828 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006588:	2b01      	cmp	r3, #1
 800658a:	d11d      	bne.n	80065c8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	f7ff fe81 	bl	8006294 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800659a:	e015      	b.n	80065c8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065a2:	695b      	ldr	r3, [r3, #20]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d00d      	beq.n	80065c4 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80065ae:	2b03      	cmp	r3, #3
 80065b0:	d108      	bne.n	80065c4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065b8:	695b      	ldr	r3, [r3, #20]
 80065ba:	7afa      	ldrb	r2, [r7, #11]
 80065bc:	4611      	mov	r1, r2
 80065be:	68f8      	ldr	r0, [r7, #12]
 80065c0:	4798      	blx	r3
 80065c2:	e001      	b.n	80065c8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80065c4:	2302      	movs	r3, #2
 80065c6:	e000      	b.n	80065ca <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3718      	adds	r7, #24
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}

080065d2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80065d2:	b580      	push	{r7, lr}
 80065d4:	b082      	sub	sp, #8
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80065da:	2340      	movs	r3, #64	; 0x40
 80065dc:	2200      	movs	r2, #0
 80065de:	2100      	movs	r1, #0
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f001 f8dc 	bl	800779e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2201      	movs	r2, #1
 80065ea:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2240      	movs	r2, #64	; 0x40
 80065f2:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80065f6:	2340      	movs	r3, #64	; 0x40
 80065f8:	2200      	movs	r2, #0
 80065fa:	2180      	movs	r1, #128	; 0x80
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f001 f8ce 	bl	800779e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2201      	movs	r2, #1
 8006606:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2240      	movs	r2, #64	; 0x40
 800660c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2201      	movs	r2, #1
 8006612:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006632:	2b00      	cmp	r3, #0
 8006634:	d009      	beq.n	800664a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	6852      	ldr	r2, [r2, #4]
 8006642:	b2d2      	uxtb	r2, r2
 8006644:	4611      	mov	r1, r2
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	4798      	blx	r3
  }

  return USBD_OK;
 800664a:	2300      	movs	r3, #0
}
 800664c:	4618      	mov	r0, r3
 800664e:	3708      	adds	r7, #8
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	460b      	mov	r3, r1
 800665e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	78fa      	ldrb	r2, [r7, #3]
 8006664:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006666:	2300      	movs	r3, #0
}
 8006668:	4618      	mov	r0, r3
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	bc80      	pop	{r7}
 8006670:	4770      	bx	lr

08006672 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006672:	b480      	push	{r7}
 8006674:	b083      	sub	sp, #12
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2204      	movs	r2, #4
 800668a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	bc80      	pop	{r7}
 8006698:	4770      	bx	lr

0800669a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800669a:	b480      	push	{r7}
 800669c:	b083      	sub	sp, #12
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066a8:	2b04      	cmp	r3, #4
 80066aa:	d105      	bne.n	80066b8 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	370c      	adds	r7, #12
 80066be:	46bd      	mov	sp, r7
 80066c0:	bc80      	pop	{r7}
 80066c2:	4770      	bx	lr

080066c4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b082      	sub	sp, #8
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066d2:	2b03      	cmp	r3, #3
 80066d4:	d10b      	bne.n	80066ee <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066dc:	69db      	ldr	r3, [r3, #28]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d005      	beq.n	80066ee <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066e8:	69db      	ldr	r3, [r3, #28]
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3708      	adds	r7, #8
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006702:	2300      	movs	r3, #0
 8006704:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800670e:	2b40      	cmp	r3, #64	; 0x40
 8006710:	d005      	beq.n	800671e <USBD_StdDevReq+0x26>
 8006712:	2b40      	cmp	r3, #64	; 0x40
 8006714:	d84f      	bhi.n	80067b6 <USBD_StdDevReq+0xbe>
 8006716:	2b00      	cmp	r3, #0
 8006718:	d009      	beq.n	800672e <USBD_StdDevReq+0x36>
 800671a:	2b20      	cmp	r3, #32
 800671c:	d14b      	bne.n	80067b6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	6839      	ldr	r1, [r7, #0]
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	4798      	blx	r3
      break;
 800672c:	e048      	b.n	80067c0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	785b      	ldrb	r3, [r3, #1]
 8006732:	2b09      	cmp	r3, #9
 8006734:	d839      	bhi.n	80067aa <USBD_StdDevReq+0xb2>
 8006736:	a201      	add	r2, pc, #4	; (adr r2, 800673c <USBD_StdDevReq+0x44>)
 8006738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800673c:	0800678d 	.word	0x0800678d
 8006740:	080067a1 	.word	0x080067a1
 8006744:	080067ab 	.word	0x080067ab
 8006748:	08006797 	.word	0x08006797
 800674c:	080067ab 	.word	0x080067ab
 8006750:	0800676f 	.word	0x0800676f
 8006754:	08006765 	.word	0x08006765
 8006758:	080067ab 	.word	0x080067ab
 800675c:	08006783 	.word	0x08006783
 8006760:	08006779 	.word	0x08006779
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006764:	6839      	ldr	r1, [r7, #0]
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 f9dc 	bl	8006b24 <USBD_GetDescriptor>
          break;
 800676c:	e022      	b.n	80067b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800676e:	6839      	ldr	r1, [r7, #0]
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 fb3f 	bl	8006df4 <USBD_SetAddress>
          break;
 8006776:	e01d      	b.n	80067b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006778:	6839      	ldr	r1, [r7, #0]
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 fb7e 	bl	8006e7c <USBD_SetConfig>
          break;
 8006780:	e018      	b.n	80067b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006782:	6839      	ldr	r1, [r7, #0]
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 fc07 	bl	8006f98 <USBD_GetConfig>
          break;
 800678a:	e013      	b.n	80067b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800678c:	6839      	ldr	r1, [r7, #0]
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 fc37 	bl	8007002 <USBD_GetStatus>
          break;
 8006794:	e00e      	b.n	80067b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006796:	6839      	ldr	r1, [r7, #0]
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 fc65 	bl	8007068 <USBD_SetFeature>
          break;
 800679e:	e009      	b.n	80067b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80067a0:	6839      	ldr	r1, [r7, #0]
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 fc74 	bl	8007090 <USBD_ClrFeature>
          break;
 80067a8:	e004      	b.n	80067b4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80067aa:	6839      	ldr	r1, [r7, #0]
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 fccc 	bl	800714a <USBD_CtlError>
          break;
 80067b2:	bf00      	nop
      }
      break;
 80067b4:	e004      	b.n	80067c0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80067b6:	6839      	ldr	r1, [r7, #0]
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 fcc6 	bl	800714a <USBD_CtlError>
      break;
 80067be:	bf00      	nop
  }

  return ret;
 80067c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3710      	adds	r7, #16
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop

080067cc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80067d6:	2300      	movs	r3, #0
 80067d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067e2:	2b40      	cmp	r3, #64	; 0x40
 80067e4:	d005      	beq.n	80067f2 <USBD_StdItfReq+0x26>
 80067e6:	2b40      	cmp	r3, #64	; 0x40
 80067e8:	d82e      	bhi.n	8006848 <USBD_StdItfReq+0x7c>
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d001      	beq.n	80067f2 <USBD_StdItfReq+0x26>
 80067ee:	2b20      	cmp	r3, #32
 80067f0:	d12a      	bne.n	8006848 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067f8:	3b01      	subs	r3, #1
 80067fa:	2b02      	cmp	r3, #2
 80067fc:	d81d      	bhi.n	800683a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	889b      	ldrh	r3, [r3, #4]
 8006802:	b2db      	uxtb	r3, r3
 8006804:	2b01      	cmp	r3, #1
 8006806:	d813      	bhi.n	8006830 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	6839      	ldr	r1, [r7, #0]
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	4798      	blx	r3
 8006816:	4603      	mov	r3, r0
 8006818:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	88db      	ldrh	r3, [r3, #6]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d110      	bne.n	8006844 <USBD_StdItfReq+0x78>
 8006822:	7bfb      	ldrb	r3, [r7, #15]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d10d      	bne.n	8006844 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 fd38 	bl	800729e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800682e:	e009      	b.n	8006844 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006830:	6839      	ldr	r1, [r7, #0]
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 fc89 	bl	800714a <USBD_CtlError>
          break;
 8006838:	e004      	b.n	8006844 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800683a:	6839      	ldr	r1, [r7, #0]
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 fc84 	bl	800714a <USBD_CtlError>
          break;
 8006842:	e000      	b.n	8006846 <USBD_StdItfReq+0x7a>
          break;
 8006844:	bf00      	nop
      }
      break;
 8006846:	e004      	b.n	8006852 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006848:	6839      	ldr	r1, [r7, #0]
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 fc7d 	bl	800714a <USBD_CtlError>
      break;
 8006850:	bf00      	nop
  }

  return USBD_OK;
 8006852:	2300      	movs	r3, #0
}
 8006854:	4618      	mov	r0, r3
 8006856:	3710      	adds	r7, #16
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006866:	2300      	movs	r3, #0
 8006868:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	889b      	ldrh	r3, [r3, #4]
 800686e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006878:	2b40      	cmp	r3, #64	; 0x40
 800687a:	d007      	beq.n	800688c <USBD_StdEPReq+0x30>
 800687c:	2b40      	cmp	r3, #64	; 0x40
 800687e:	f200 8146 	bhi.w	8006b0e <USBD_StdEPReq+0x2b2>
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00a      	beq.n	800689c <USBD_StdEPReq+0x40>
 8006886:	2b20      	cmp	r3, #32
 8006888:	f040 8141 	bne.w	8006b0e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	6839      	ldr	r1, [r7, #0]
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	4798      	blx	r3
      break;
 800689a:	e13d      	b.n	8006b18 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80068a4:	2b20      	cmp	r3, #32
 80068a6:	d10a      	bne.n	80068be <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	6839      	ldr	r1, [r7, #0]
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	4798      	blx	r3
 80068b6:	4603      	mov	r3, r0
 80068b8:	73fb      	strb	r3, [r7, #15]

        return ret;
 80068ba:	7bfb      	ldrb	r3, [r7, #15]
 80068bc:	e12d      	b.n	8006b1a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	785b      	ldrb	r3, [r3, #1]
 80068c2:	2b03      	cmp	r3, #3
 80068c4:	d007      	beq.n	80068d6 <USBD_StdEPReq+0x7a>
 80068c6:	2b03      	cmp	r3, #3
 80068c8:	f300 811b 	bgt.w	8006b02 <USBD_StdEPReq+0x2a6>
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d072      	beq.n	80069b6 <USBD_StdEPReq+0x15a>
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d03a      	beq.n	800694a <USBD_StdEPReq+0xee>
 80068d4:	e115      	b.n	8006b02 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d002      	beq.n	80068e6 <USBD_StdEPReq+0x8a>
 80068e0:	2b03      	cmp	r3, #3
 80068e2:	d015      	beq.n	8006910 <USBD_StdEPReq+0xb4>
 80068e4:	e02b      	b.n	800693e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80068e6:	7bbb      	ldrb	r3, [r7, #14]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d00c      	beq.n	8006906 <USBD_StdEPReq+0xaa>
 80068ec:	7bbb      	ldrb	r3, [r7, #14]
 80068ee:	2b80      	cmp	r3, #128	; 0x80
 80068f0:	d009      	beq.n	8006906 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80068f2:	7bbb      	ldrb	r3, [r7, #14]
 80068f4:	4619      	mov	r1, r3
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 ff96 	bl	8007828 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80068fc:	2180      	movs	r1, #128	; 0x80
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 ff92 	bl	8007828 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006904:	e020      	b.n	8006948 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006906:	6839      	ldr	r1, [r7, #0]
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 fc1e 	bl	800714a <USBD_CtlError>
              break;
 800690e:	e01b      	b.n	8006948 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	885b      	ldrh	r3, [r3, #2]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d10e      	bne.n	8006936 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006918:	7bbb      	ldrb	r3, [r7, #14]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00b      	beq.n	8006936 <USBD_StdEPReq+0xda>
 800691e:	7bbb      	ldrb	r3, [r7, #14]
 8006920:	2b80      	cmp	r3, #128	; 0x80
 8006922:	d008      	beq.n	8006936 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	88db      	ldrh	r3, [r3, #6]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d104      	bne.n	8006936 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800692c:	7bbb      	ldrb	r3, [r7, #14]
 800692e:	4619      	mov	r1, r3
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 ff79 	bl	8007828 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 fcb1 	bl	800729e <USBD_CtlSendStatus>

              break;
 800693c:	e004      	b.n	8006948 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800693e:	6839      	ldr	r1, [r7, #0]
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 fc02 	bl	800714a <USBD_CtlError>
              break;
 8006946:	bf00      	nop
          }
          break;
 8006948:	e0e0      	b.n	8006b0c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006950:	2b02      	cmp	r3, #2
 8006952:	d002      	beq.n	800695a <USBD_StdEPReq+0xfe>
 8006954:	2b03      	cmp	r3, #3
 8006956:	d015      	beq.n	8006984 <USBD_StdEPReq+0x128>
 8006958:	e026      	b.n	80069a8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800695a:	7bbb      	ldrb	r3, [r7, #14]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d00c      	beq.n	800697a <USBD_StdEPReq+0x11e>
 8006960:	7bbb      	ldrb	r3, [r7, #14]
 8006962:	2b80      	cmp	r3, #128	; 0x80
 8006964:	d009      	beq.n	800697a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006966:	7bbb      	ldrb	r3, [r7, #14]
 8006968:	4619      	mov	r1, r3
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 ff5c 	bl	8007828 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006970:	2180      	movs	r1, #128	; 0x80
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 ff58 	bl	8007828 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006978:	e01c      	b.n	80069b4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800697a:	6839      	ldr	r1, [r7, #0]
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 fbe4 	bl	800714a <USBD_CtlError>
              break;
 8006982:	e017      	b.n	80069b4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	885b      	ldrh	r3, [r3, #2]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d112      	bne.n	80069b2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800698c:	7bbb      	ldrb	r3, [r7, #14]
 800698e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006992:	2b00      	cmp	r3, #0
 8006994:	d004      	beq.n	80069a0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006996:	7bbb      	ldrb	r3, [r7, #14]
 8006998:	4619      	mov	r1, r3
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 ff63 	bl	8007866 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 fc7c 	bl	800729e <USBD_CtlSendStatus>
              }
              break;
 80069a6:	e004      	b.n	80069b2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80069a8:	6839      	ldr	r1, [r7, #0]
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 fbcd 	bl	800714a <USBD_CtlError>
              break;
 80069b0:	e000      	b.n	80069b4 <USBD_StdEPReq+0x158>
              break;
 80069b2:	bf00      	nop
          }
          break;
 80069b4:	e0aa      	b.n	8006b0c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069bc:	2b02      	cmp	r3, #2
 80069be:	d002      	beq.n	80069c6 <USBD_StdEPReq+0x16a>
 80069c0:	2b03      	cmp	r3, #3
 80069c2:	d032      	beq.n	8006a2a <USBD_StdEPReq+0x1ce>
 80069c4:	e097      	b.n	8006af6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80069c6:	7bbb      	ldrb	r3, [r7, #14]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d007      	beq.n	80069dc <USBD_StdEPReq+0x180>
 80069cc:	7bbb      	ldrb	r3, [r7, #14]
 80069ce:	2b80      	cmp	r3, #128	; 0x80
 80069d0:	d004      	beq.n	80069dc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80069d2:	6839      	ldr	r1, [r7, #0]
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 fbb8 	bl	800714a <USBD_CtlError>
                break;
 80069da:	e091      	b.n	8006b00 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	da0b      	bge.n	80069fc <USBD_StdEPReq+0x1a0>
 80069e4:	7bbb      	ldrb	r3, [r7, #14]
 80069e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80069ea:	4613      	mov	r3, r2
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	4413      	add	r3, r2
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	3310      	adds	r3, #16
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	4413      	add	r3, r2
 80069f8:	3304      	adds	r3, #4
 80069fa:	e00b      	b.n	8006a14 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80069fc:	7bbb      	ldrb	r3, [r7, #14]
 80069fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a02:	4613      	mov	r3, r2
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	4413      	add	r3, r2
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	4413      	add	r3, r2
 8006a12:	3304      	adds	r3, #4
 8006a14:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	2202      	movs	r2, #2
 8006a20:	4619      	mov	r1, r3
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 fbfb 	bl	800721e <USBD_CtlSendData>
              break;
 8006a28:	e06a      	b.n	8006b00 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006a2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	da11      	bge.n	8006a56 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006a32:	7bbb      	ldrb	r3, [r7, #14]
 8006a34:	f003 020f 	and.w	r2, r3, #15
 8006a38:	6879      	ldr	r1, [r7, #4]
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	4413      	add	r3, r2
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	440b      	add	r3, r1
 8006a44:	3318      	adds	r3, #24
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d117      	bne.n	8006a7c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006a4c:	6839      	ldr	r1, [r7, #0]
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 fb7b 	bl	800714a <USBD_CtlError>
                  break;
 8006a54:	e054      	b.n	8006b00 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006a56:	7bbb      	ldrb	r3, [r7, #14]
 8006a58:	f003 020f 	and.w	r2, r3, #15
 8006a5c:	6879      	ldr	r1, [r7, #4]
 8006a5e:	4613      	mov	r3, r2
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	4413      	add	r3, r2
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	440b      	add	r3, r1
 8006a68:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d104      	bne.n	8006a7c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006a72:	6839      	ldr	r1, [r7, #0]
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 fb68 	bl	800714a <USBD_CtlError>
                  break;
 8006a7a:	e041      	b.n	8006b00 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	da0b      	bge.n	8006a9c <USBD_StdEPReq+0x240>
 8006a84:	7bbb      	ldrb	r3, [r7, #14]
 8006a86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	4413      	add	r3, r2
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	3310      	adds	r3, #16
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	4413      	add	r3, r2
 8006a98:	3304      	adds	r3, #4
 8006a9a:	e00b      	b.n	8006ab4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a9c:	7bbb      	ldrb	r3, [r7, #14]
 8006a9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	4413      	add	r3, r2
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	3304      	adds	r3, #4
 8006ab4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006ab6:	7bbb      	ldrb	r3, [r7, #14]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d002      	beq.n	8006ac2 <USBD_StdEPReq+0x266>
 8006abc:	7bbb      	ldrb	r3, [r7, #14]
 8006abe:	2b80      	cmp	r3, #128	; 0x80
 8006ac0:	d103      	bne.n	8006aca <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	601a      	str	r2, [r3, #0]
 8006ac8:	e00e      	b.n	8006ae8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006aca:	7bbb      	ldrb	r3, [r7, #14]
 8006acc:	4619      	mov	r1, r3
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 fee8 	bl	80078a4 <USBD_LL_IsStallEP>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d003      	beq.n	8006ae2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	2201      	movs	r2, #1
 8006ade:	601a      	str	r2, [r3, #0]
 8006ae0:	e002      	b.n	8006ae8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	2202      	movs	r2, #2
 8006aec:	4619      	mov	r1, r3
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 fb95 	bl	800721e <USBD_CtlSendData>
              break;
 8006af4:	e004      	b.n	8006b00 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8006af6:	6839      	ldr	r1, [r7, #0]
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 fb26 	bl	800714a <USBD_CtlError>
              break;
 8006afe:	bf00      	nop
          }
          break;
 8006b00:	e004      	b.n	8006b0c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8006b02:	6839      	ldr	r1, [r7, #0]
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 fb20 	bl	800714a <USBD_CtlError>
          break;
 8006b0a:	bf00      	nop
      }
      break;
 8006b0c:	e004      	b.n	8006b18 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006b0e:	6839      	ldr	r1, [r7, #0]
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 fb1a 	bl	800714a <USBD_CtlError>
      break;
 8006b16:	bf00      	nop
  }

  return ret;
 8006b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3710      	adds	r7, #16
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
	...

08006b24 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006b32:	2300      	movs	r3, #0
 8006b34:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006b36:	2300      	movs	r3, #0
 8006b38:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	885b      	ldrh	r3, [r3, #2]
 8006b3e:	0a1b      	lsrs	r3, r3, #8
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	3b01      	subs	r3, #1
 8006b44:	2b06      	cmp	r3, #6
 8006b46:	f200 8128 	bhi.w	8006d9a <USBD_GetDescriptor+0x276>
 8006b4a:	a201      	add	r2, pc, #4	; (adr r2, 8006b50 <USBD_GetDescriptor+0x2c>)
 8006b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b50:	08006b6d 	.word	0x08006b6d
 8006b54:	08006b85 	.word	0x08006b85
 8006b58:	08006bc5 	.word	0x08006bc5
 8006b5c:	08006d9b 	.word	0x08006d9b
 8006b60:	08006d9b 	.word	0x08006d9b
 8006b64:	08006d3b 	.word	0x08006d3b
 8006b68:	08006d67 	.word	0x08006d67
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	7c12      	ldrb	r2, [r2, #16]
 8006b78:	f107 0108 	add.w	r1, r7, #8
 8006b7c:	4610      	mov	r0, r2
 8006b7e:	4798      	blx	r3
 8006b80:	60f8      	str	r0, [r7, #12]
      break;
 8006b82:	e112      	b.n	8006daa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	7c1b      	ldrb	r3, [r3, #16]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d10d      	bne.n	8006ba8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b94:	f107 0208 	add.w	r2, r7, #8
 8006b98:	4610      	mov	r0, r2
 8006b9a:	4798      	blx	r3
 8006b9c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	2202      	movs	r2, #2
 8006ba4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006ba6:	e100      	b.n	8006daa <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb0:	f107 0208 	add.w	r2, r7, #8
 8006bb4:	4610      	mov	r0, r2
 8006bb6:	4798      	blx	r3
 8006bb8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	2202      	movs	r2, #2
 8006bc0:	701a      	strb	r2, [r3, #0]
      break;
 8006bc2:	e0f2      	b.n	8006daa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	885b      	ldrh	r3, [r3, #2]
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	2b05      	cmp	r3, #5
 8006bcc:	f200 80ac 	bhi.w	8006d28 <USBD_GetDescriptor+0x204>
 8006bd0:	a201      	add	r2, pc, #4	; (adr r2, 8006bd8 <USBD_GetDescriptor+0xb4>)
 8006bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd6:	bf00      	nop
 8006bd8:	08006bf1 	.word	0x08006bf1
 8006bdc:	08006c25 	.word	0x08006c25
 8006be0:	08006c59 	.word	0x08006c59
 8006be4:	08006c8d 	.word	0x08006c8d
 8006be8:	08006cc1 	.word	0x08006cc1
 8006bec:	08006cf5 	.word	0x08006cf5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d00b      	beq.n	8006c14 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	7c12      	ldrb	r2, [r2, #16]
 8006c08:	f107 0108 	add.w	r1, r7, #8
 8006c0c:	4610      	mov	r0, r2
 8006c0e:	4798      	blx	r3
 8006c10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c12:	e091      	b.n	8006d38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c14:	6839      	ldr	r1, [r7, #0]
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 fa97 	bl	800714a <USBD_CtlError>
            err++;
 8006c1c:	7afb      	ldrb	r3, [r7, #11]
 8006c1e:	3301      	adds	r3, #1
 8006c20:	72fb      	strb	r3, [r7, #11]
          break;
 8006c22:	e089      	b.n	8006d38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00b      	beq.n	8006c48 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	7c12      	ldrb	r2, [r2, #16]
 8006c3c:	f107 0108 	add.w	r1, r7, #8
 8006c40:	4610      	mov	r0, r2
 8006c42:	4798      	blx	r3
 8006c44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c46:	e077      	b.n	8006d38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c48:	6839      	ldr	r1, [r7, #0]
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 fa7d 	bl	800714a <USBD_CtlError>
            err++;
 8006c50:	7afb      	ldrb	r3, [r7, #11]
 8006c52:	3301      	adds	r3, #1
 8006c54:	72fb      	strb	r3, [r7, #11]
          break;
 8006c56:	e06f      	b.n	8006d38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d00b      	beq.n	8006c7c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	7c12      	ldrb	r2, [r2, #16]
 8006c70:	f107 0108 	add.w	r1, r7, #8
 8006c74:	4610      	mov	r0, r2
 8006c76:	4798      	blx	r3
 8006c78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c7a:	e05d      	b.n	8006d38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c7c:	6839      	ldr	r1, [r7, #0]
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 fa63 	bl	800714a <USBD_CtlError>
            err++;
 8006c84:	7afb      	ldrb	r3, [r7, #11]
 8006c86:	3301      	adds	r3, #1
 8006c88:	72fb      	strb	r3, [r7, #11]
          break;
 8006c8a:	e055      	b.n	8006d38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d00b      	beq.n	8006cb0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	7c12      	ldrb	r2, [r2, #16]
 8006ca4:	f107 0108 	add.w	r1, r7, #8
 8006ca8:	4610      	mov	r0, r2
 8006caa:	4798      	blx	r3
 8006cac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cae:	e043      	b.n	8006d38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006cb0:	6839      	ldr	r1, [r7, #0]
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 fa49 	bl	800714a <USBD_CtlError>
            err++;
 8006cb8:	7afb      	ldrb	r3, [r7, #11]
 8006cba:	3301      	adds	r3, #1
 8006cbc:	72fb      	strb	r3, [r7, #11]
          break;
 8006cbe:	e03b      	b.n	8006d38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006cc6:	695b      	ldr	r3, [r3, #20]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00b      	beq.n	8006ce4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006cd2:	695b      	ldr	r3, [r3, #20]
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	7c12      	ldrb	r2, [r2, #16]
 8006cd8:	f107 0108 	add.w	r1, r7, #8
 8006cdc:	4610      	mov	r0, r2
 8006cde:	4798      	blx	r3
 8006ce0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ce2:	e029      	b.n	8006d38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ce4:	6839      	ldr	r1, [r7, #0]
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 fa2f 	bl	800714a <USBD_CtlError>
            err++;
 8006cec:	7afb      	ldrb	r3, [r7, #11]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	72fb      	strb	r3, [r7, #11]
          break;
 8006cf2:	e021      	b.n	8006d38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006cfa:	699b      	ldr	r3, [r3, #24]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d00b      	beq.n	8006d18 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d06:	699b      	ldr	r3, [r3, #24]
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	7c12      	ldrb	r2, [r2, #16]
 8006d0c:	f107 0108 	add.w	r1, r7, #8
 8006d10:	4610      	mov	r0, r2
 8006d12:	4798      	blx	r3
 8006d14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d16:	e00f      	b.n	8006d38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d18:	6839      	ldr	r1, [r7, #0]
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 fa15 	bl	800714a <USBD_CtlError>
            err++;
 8006d20:	7afb      	ldrb	r3, [r7, #11]
 8006d22:	3301      	adds	r3, #1
 8006d24:	72fb      	strb	r3, [r7, #11]
          break;
 8006d26:	e007      	b.n	8006d38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006d28:	6839      	ldr	r1, [r7, #0]
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 fa0d 	bl	800714a <USBD_CtlError>
          err++;
 8006d30:	7afb      	ldrb	r3, [r7, #11]
 8006d32:	3301      	adds	r3, #1
 8006d34:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006d36:	e038      	b.n	8006daa <USBD_GetDescriptor+0x286>
 8006d38:	e037      	b.n	8006daa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	7c1b      	ldrb	r3, [r3, #16]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d109      	bne.n	8006d56 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d4a:	f107 0208 	add.w	r2, r7, #8
 8006d4e:	4610      	mov	r0, r2
 8006d50:	4798      	blx	r3
 8006d52:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d54:	e029      	b.n	8006daa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006d56:	6839      	ldr	r1, [r7, #0]
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 f9f6 	bl	800714a <USBD_CtlError>
        err++;
 8006d5e:	7afb      	ldrb	r3, [r7, #11]
 8006d60:	3301      	adds	r3, #1
 8006d62:	72fb      	strb	r3, [r7, #11]
      break;
 8006d64:	e021      	b.n	8006daa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	7c1b      	ldrb	r3, [r3, #16]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d10d      	bne.n	8006d8a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d76:	f107 0208 	add.w	r2, r7, #8
 8006d7a:	4610      	mov	r0, r2
 8006d7c:	4798      	blx	r3
 8006d7e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	3301      	adds	r3, #1
 8006d84:	2207      	movs	r2, #7
 8006d86:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d88:	e00f      	b.n	8006daa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006d8a:	6839      	ldr	r1, [r7, #0]
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 f9dc 	bl	800714a <USBD_CtlError>
        err++;
 8006d92:	7afb      	ldrb	r3, [r7, #11]
 8006d94:	3301      	adds	r3, #1
 8006d96:	72fb      	strb	r3, [r7, #11]
      break;
 8006d98:	e007      	b.n	8006daa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006d9a:	6839      	ldr	r1, [r7, #0]
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 f9d4 	bl	800714a <USBD_CtlError>
      err++;
 8006da2:	7afb      	ldrb	r3, [r7, #11]
 8006da4:	3301      	adds	r3, #1
 8006da6:	72fb      	strb	r3, [r7, #11]
      break;
 8006da8:	bf00      	nop
  }

  if (err != 0U)
 8006daa:	7afb      	ldrb	r3, [r7, #11]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d11c      	bne.n	8006dea <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006db0:	893b      	ldrh	r3, [r7, #8]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d011      	beq.n	8006dda <USBD_GetDescriptor+0x2b6>
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	88db      	ldrh	r3, [r3, #6]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d00d      	beq.n	8006dda <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	88da      	ldrh	r2, [r3, #6]
 8006dc2:	893b      	ldrh	r3, [r7, #8]
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	bf28      	it	cs
 8006dc8:	4613      	movcs	r3, r2
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006dce:	893b      	ldrh	r3, [r7, #8]
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	68f9      	ldr	r1, [r7, #12]
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 fa22 	bl	800721e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	88db      	ldrh	r3, [r3, #6]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d104      	bne.n	8006dec <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 fa5b 	bl	800729e <USBD_CtlSendStatus>
 8006de8:	e000      	b.n	8006dec <USBD_GetDescriptor+0x2c8>
    return;
 8006dea:	bf00      	nop
    }
  }
}
 8006dec:	3710      	adds	r7, #16
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop

08006df4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	889b      	ldrh	r3, [r3, #4]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d130      	bne.n	8006e68 <USBD_SetAddress+0x74>
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	88db      	ldrh	r3, [r3, #6]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d12c      	bne.n	8006e68 <USBD_SetAddress+0x74>
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	885b      	ldrh	r3, [r3, #2]
 8006e12:	2b7f      	cmp	r3, #127	; 0x7f
 8006e14:	d828      	bhi.n	8006e68 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	885b      	ldrh	r3, [r3, #2]
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e20:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e28:	2b03      	cmp	r3, #3
 8006e2a:	d104      	bne.n	8006e36 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006e2c:	6839      	ldr	r1, [r7, #0]
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 f98b 	bl	800714a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e34:	e01d      	b.n	8006e72 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	7bfa      	ldrb	r2, [r7, #15]
 8006e3a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006e3e:	7bfb      	ldrb	r3, [r7, #15]
 8006e40:	4619      	mov	r1, r3
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 fd5a 	bl	80078fc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 fa28 	bl	800729e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006e4e:	7bfb      	ldrb	r3, [r7, #15]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d004      	beq.n	8006e5e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2202      	movs	r2, #2
 8006e58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e5c:	e009      	b.n	8006e72 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2201      	movs	r2, #1
 8006e62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e66:	e004      	b.n	8006e72 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006e68:	6839      	ldr	r1, [r7, #0]
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 f96d 	bl	800714a <USBD_CtlError>
  }
}
 8006e70:	bf00      	nop
 8006e72:	bf00      	nop
 8006e74:	3710      	adds	r7, #16
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
	...

08006e7c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	885b      	ldrh	r3, [r3, #2]
 8006e8a:	b2da      	uxtb	r2, r3
 8006e8c:	4b41      	ldr	r3, [pc, #260]	; (8006f94 <USBD_SetConfig+0x118>)
 8006e8e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006e90:	4b40      	ldr	r3, [pc, #256]	; (8006f94 <USBD_SetConfig+0x118>)
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d904      	bls.n	8006ea2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006e98:	6839      	ldr	r1, [r7, #0]
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 f955 	bl	800714a <USBD_CtlError>
 8006ea0:	e075      	b.n	8006f8e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ea8:	2b02      	cmp	r3, #2
 8006eaa:	d002      	beq.n	8006eb2 <USBD_SetConfig+0x36>
 8006eac:	2b03      	cmp	r3, #3
 8006eae:	d023      	beq.n	8006ef8 <USBD_SetConfig+0x7c>
 8006eb0:	e062      	b.n	8006f78 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006eb2:	4b38      	ldr	r3, [pc, #224]	; (8006f94 <USBD_SetConfig+0x118>)
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d01a      	beq.n	8006ef0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006eba:	4b36      	ldr	r3, [pc, #216]	; (8006f94 <USBD_SetConfig+0x118>)
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2203      	movs	r2, #3
 8006ec8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006ecc:	4b31      	ldr	r3, [pc, #196]	; (8006f94 <USBD_SetConfig+0x118>)
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f7ff f9e8 	bl	80062a8 <USBD_SetClassConfig>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	2b02      	cmp	r3, #2
 8006edc:	d104      	bne.n	8006ee8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006ede:	6839      	ldr	r1, [r7, #0]
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 f932 	bl	800714a <USBD_CtlError>
            return;
 8006ee6:	e052      	b.n	8006f8e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 f9d8 	bl	800729e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006eee:	e04e      	b.n	8006f8e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 f9d4 	bl	800729e <USBD_CtlSendStatus>
        break;
 8006ef6:	e04a      	b.n	8006f8e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006ef8:	4b26      	ldr	r3, [pc, #152]	; (8006f94 <USBD_SetConfig+0x118>)
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d112      	bne.n	8006f26 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2202      	movs	r2, #2
 8006f04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006f08:	4b22      	ldr	r3, [pc, #136]	; (8006f94 <USBD_SetConfig+0x118>)
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006f12:	4b20      	ldr	r3, [pc, #128]	; (8006f94 <USBD_SetConfig+0x118>)
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	4619      	mov	r1, r3
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f7ff f9e4 	bl	80062e6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 f9bd 	bl	800729e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006f24:	e033      	b.n	8006f8e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006f26:	4b1b      	ldr	r3, [pc, #108]	; (8006f94 <USBD_SetConfig+0x118>)
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d01d      	beq.n	8006f70 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f7ff f9d2 	bl	80062e6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006f42:	4b14      	ldr	r3, [pc, #80]	; (8006f94 <USBD_SetConfig+0x118>)
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	461a      	mov	r2, r3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006f4c:	4b11      	ldr	r3, [pc, #68]	; (8006f94 <USBD_SetConfig+0x118>)
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	4619      	mov	r1, r3
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f7ff f9a8 	bl	80062a8 <USBD_SetClassConfig>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b02      	cmp	r3, #2
 8006f5c:	d104      	bne.n	8006f68 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006f5e:	6839      	ldr	r1, [r7, #0]
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 f8f2 	bl	800714a <USBD_CtlError>
            return;
 8006f66:	e012      	b.n	8006f8e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 f998 	bl	800729e <USBD_CtlSendStatus>
        break;
 8006f6e:	e00e      	b.n	8006f8e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 f994 	bl	800729e <USBD_CtlSendStatus>
        break;
 8006f76:	e00a      	b.n	8006f8e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006f78:	6839      	ldr	r1, [r7, #0]
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 f8e5 	bl	800714a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006f80:	4b04      	ldr	r3, [pc, #16]	; (8006f94 <USBD_SetConfig+0x118>)
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	4619      	mov	r1, r3
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f7ff f9ad 	bl	80062e6 <USBD_ClrClassConfig>
        break;
 8006f8c:	bf00      	nop
    }
  }
}
 8006f8e:	3708      	adds	r7, #8
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	20000200 	.word	0x20000200

08006f98 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	88db      	ldrh	r3, [r3, #6]
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d004      	beq.n	8006fb4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006faa:	6839      	ldr	r1, [r7, #0]
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 f8cc 	bl	800714a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006fb2:	e022      	b.n	8006ffa <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fba:	2b02      	cmp	r3, #2
 8006fbc:	dc02      	bgt.n	8006fc4 <USBD_GetConfig+0x2c>
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	dc03      	bgt.n	8006fca <USBD_GetConfig+0x32>
 8006fc2:	e015      	b.n	8006ff0 <USBD_GetConfig+0x58>
 8006fc4:	2b03      	cmp	r3, #3
 8006fc6:	d00b      	beq.n	8006fe0 <USBD_GetConfig+0x48>
 8006fc8:	e012      	b.n	8006ff0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	3308      	adds	r3, #8
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 f920 	bl	800721e <USBD_CtlSendData>
        break;
 8006fde:	e00c      	b.n	8006ffa <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	3304      	adds	r3, #4
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 f918 	bl	800721e <USBD_CtlSendData>
        break;
 8006fee:	e004      	b.n	8006ffa <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8006ff0:	6839      	ldr	r1, [r7, #0]
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 f8a9 	bl	800714a <USBD_CtlError>
        break;
 8006ff8:	bf00      	nop
}
 8006ffa:	bf00      	nop
 8006ffc:	3708      	adds	r7, #8
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}

08007002 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007002:	b580      	push	{r7, lr}
 8007004:	b082      	sub	sp, #8
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
 800700a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007012:	3b01      	subs	r3, #1
 8007014:	2b02      	cmp	r3, #2
 8007016:	d81e      	bhi.n	8007056 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	88db      	ldrh	r3, [r3, #6]
 800701c:	2b02      	cmp	r3, #2
 800701e:	d004      	beq.n	800702a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007020:	6839      	ldr	r1, [r7, #0]
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 f891 	bl	800714a <USBD_CtlError>
        break;
 8007028:	e01a      	b.n	8007060 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2201      	movs	r2, #1
 800702e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007036:	2b00      	cmp	r3, #0
 8007038:	d005      	beq.n	8007046 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	f043 0202 	orr.w	r2, r3, #2
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	330c      	adds	r3, #12
 800704a:	2202      	movs	r2, #2
 800704c:	4619      	mov	r1, r3
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 f8e5 	bl	800721e <USBD_CtlSendData>
      break;
 8007054:	e004      	b.n	8007060 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007056:	6839      	ldr	r1, [r7, #0]
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 f876 	bl	800714a <USBD_CtlError>
      break;
 800705e:	bf00      	nop
  }
}
 8007060:	bf00      	nop
 8007062:	3708      	adds	r7, #8
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	885b      	ldrh	r3, [r3, #2]
 8007076:	2b01      	cmp	r3, #1
 8007078:	d106      	bne.n	8007088 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2201      	movs	r2, #1
 800707e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 f90b 	bl	800729e <USBD_CtlSendStatus>
  }
}
 8007088:	bf00      	nop
 800708a:	3708      	adds	r7, #8
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070a0:	3b01      	subs	r3, #1
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d80b      	bhi.n	80070be <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	885b      	ldrh	r3, [r3, #2]
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d10c      	bne.n	80070c8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 f8f1 	bl	800729e <USBD_CtlSendStatus>
      }
      break;
 80070bc:	e004      	b.n	80070c8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80070be:	6839      	ldr	r1, [r7, #0]
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 f842 	bl	800714a <USBD_CtlError>
      break;
 80070c6:	e000      	b.n	80070ca <USBD_ClrFeature+0x3a>
      break;
 80070c8:	bf00      	nop
  }
}
 80070ca:	bf00      	nop
 80070cc:	3708      	adds	r7, #8
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80070d2:	b480      	push	{r7}
 80070d4:	b083      	sub	sp, #12
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
 80070da:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	781a      	ldrb	r2, [r3, #0]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	785a      	ldrb	r2, [r3, #1]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	3302      	adds	r3, #2
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	b29a      	uxth	r2, r3
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	3303      	adds	r3, #3
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	021b      	lsls	r3, r3, #8
 80070fe:	b29b      	uxth	r3, r3
 8007100:	4413      	add	r3, r2
 8007102:	b29a      	uxth	r2, r3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	3304      	adds	r3, #4
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	b29a      	uxth	r2, r3
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	3305      	adds	r3, #5
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	b29b      	uxth	r3, r3
 8007118:	021b      	lsls	r3, r3, #8
 800711a:	b29b      	uxth	r3, r3
 800711c:	4413      	add	r3, r2
 800711e:	b29a      	uxth	r2, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	3306      	adds	r3, #6
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	b29a      	uxth	r2, r3
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	3307      	adds	r3, #7
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	b29b      	uxth	r3, r3
 8007134:	021b      	lsls	r3, r3, #8
 8007136:	b29b      	uxth	r3, r3
 8007138:	4413      	add	r3, r2
 800713a:	b29a      	uxth	r2, r3
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	80da      	strh	r2, [r3, #6]

}
 8007140:	bf00      	nop
 8007142:	370c      	adds	r7, #12
 8007144:	46bd      	mov	sp, r7
 8007146:	bc80      	pop	{r7}
 8007148:	4770      	bx	lr

0800714a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800714a:	b580      	push	{r7, lr}
 800714c:	b082      	sub	sp, #8
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
 8007152:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007154:	2180      	movs	r1, #128	; 0x80
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 fb66 	bl	8007828 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800715c:	2100      	movs	r1, #0
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 fb62 	bl	8007828 <USBD_LL_StallEP>
}
 8007164:	bf00      	nop
 8007166:	3708      	adds	r7, #8
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b086      	sub	sp, #24
 8007170:	af00      	add	r7, sp, #0
 8007172:	60f8      	str	r0, [r7, #12]
 8007174:	60b9      	str	r1, [r7, #8]
 8007176:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007178:	2300      	movs	r3, #0
 800717a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d032      	beq.n	80071e8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007182:	68f8      	ldr	r0, [r7, #12]
 8007184:	f000 f834 	bl	80071f0 <USBD_GetLen>
 8007188:	4603      	mov	r3, r0
 800718a:	3301      	adds	r3, #1
 800718c:	b29b      	uxth	r3, r3
 800718e:	005b      	lsls	r3, r3, #1
 8007190:	b29a      	uxth	r2, r3
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007196:	7dfb      	ldrb	r3, [r7, #23]
 8007198:	1c5a      	adds	r2, r3, #1
 800719a:	75fa      	strb	r2, [r7, #23]
 800719c:	461a      	mov	r2, r3
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	4413      	add	r3, r2
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	7812      	ldrb	r2, [r2, #0]
 80071a6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80071a8:	7dfb      	ldrb	r3, [r7, #23]
 80071aa:	1c5a      	adds	r2, r3, #1
 80071ac:	75fa      	strb	r2, [r7, #23]
 80071ae:	461a      	mov	r2, r3
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	4413      	add	r3, r2
 80071b4:	2203      	movs	r2, #3
 80071b6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80071b8:	e012      	b.n	80071e0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	1c5a      	adds	r2, r3, #1
 80071be:	60fa      	str	r2, [r7, #12]
 80071c0:	7dfa      	ldrb	r2, [r7, #23]
 80071c2:	1c51      	adds	r1, r2, #1
 80071c4:	75f9      	strb	r1, [r7, #23]
 80071c6:	4611      	mov	r1, r2
 80071c8:	68ba      	ldr	r2, [r7, #8]
 80071ca:	440a      	add	r2, r1
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80071d0:	7dfb      	ldrb	r3, [r7, #23]
 80071d2:	1c5a      	adds	r2, r3, #1
 80071d4:	75fa      	strb	r2, [r7, #23]
 80071d6:	461a      	mov	r2, r3
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	4413      	add	r3, r2
 80071dc:	2200      	movs	r2, #0
 80071de:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d1e8      	bne.n	80071ba <USBD_GetString+0x4e>
    }
  }
}
 80071e8:	bf00      	nop
 80071ea:	3718      	adds	r7, #24
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80071f8:	2300      	movs	r3, #0
 80071fa:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80071fc:	e005      	b.n	800720a <USBD_GetLen+0x1a>
  {
    len++;
 80071fe:	7bfb      	ldrb	r3, [r7, #15]
 8007200:	3301      	adds	r3, #1
 8007202:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	3301      	adds	r3, #1
 8007208:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d1f5      	bne.n	80071fe <USBD_GetLen+0xe>
  }

  return len;
 8007212:	7bfb      	ldrb	r3, [r7, #15]
}
 8007214:	4618      	mov	r0, r3
 8007216:	3714      	adds	r7, #20
 8007218:	46bd      	mov	sp, r7
 800721a:	bc80      	pop	{r7}
 800721c:	4770      	bx	lr

0800721e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800721e:	b580      	push	{r7, lr}
 8007220:	b084      	sub	sp, #16
 8007222:	af00      	add	r7, sp, #0
 8007224:	60f8      	str	r0, [r7, #12]
 8007226:	60b9      	str	r1, [r7, #8]
 8007228:	4613      	mov	r3, r2
 800722a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2202      	movs	r2, #2
 8007230:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007234:	88fa      	ldrh	r2, [r7, #6]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800723a:	88fa      	ldrh	r2, [r7, #6]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007240:	88fb      	ldrh	r3, [r7, #6]
 8007242:	68ba      	ldr	r2, [r7, #8]
 8007244:	2100      	movs	r1, #0
 8007246:	68f8      	ldr	r0, [r7, #12]
 8007248:	f000 fb77 	bl	800793a <USBD_LL_Transmit>

  return USBD_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3710      	adds	r7, #16
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}

08007256 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007256:	b580      	push	{r7, lr}
 8007258:	b084      	sub	sp, #16
 800725a:	af00      	add	r7, sp, #0
 800725c:	60f8      	str	r0, [r7, #12]
 800725e:	60b9      	str	r1, [r7, #8]
 8007260:	4613      	mov	r3, r2
 8007262:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007264:	88fb      	ldrh	r3, [r7, #6]
 8007266:	68ba      	ldr	r2, [r7, #8]
 8007268:	2100      	movs	r1, #0
 800726a:	68f8      	ldr	r0, [r7, #12]
 800726c:	f000 fb65 	bl	800793a <USBD_LL_Transmit>

  return USBD_OK;
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	3710      	adds	r7, #16
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}

0800727a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800727a:	b580      	push	{r7, lr}
 800727c:	b084      	sub	sp, #16
 800727e:	af00      	add	r7, sp, #0
 8007280:	60f8      	str	r0, [r7, #12]
 8007282:	60b9      	str	r1, [r7, #8]
 8007284:	4613      	mov	r3, r2
 8007286:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007288:	88fb      	ldrh	r3, [r7, #6]
 800728a:	68ba      	ldr	r2, [r7, #8]
 800728c:	2100      	movs	r1, #0
 800728e:	68f8      	ldr	r0, [r7, #12]
 8007290:	f000 fb76 	bl	8007980 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007294:	2300      	movs	r3, #0
}
 8007296:	4618      	mov	r0, r3
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}

0800729e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800729e:	b580      	push	{r7, lr}
 80072a0:	b082      	sub	sp, #8
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2204      	movs	r2, #4
 80072aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80072ae:	2300      	movs	r3, #0
 80072b0:	2200      	movs	r2, #0
 80072b2:	2100      	movs	r1, #0
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 fb40 	bl	800793a <USBD_LL_Transmit>

  return USBD_OK;
 80072ba:	2300      	movs	r3, #0
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3708      	adds	r7, #8
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2205      	movs	r2, #5
 80072d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072d4:	2300      	movs	r3, #0
 80072d6:	2200      	movs	r2, #0
 80072d8:	2100      	movs	r1, #0
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 fb50 	bl	8007980 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3708      	adds	r7, #8
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
	...

080072ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80072f0:	2200      	movs	r2, #0
 80072f2:	490e      	ldr	r1, [pc, #56]	; (800732c <MX_USB_DEVICE_Init+0x40>)
 80072f4:	480e      	ldr	r0, [pc, #56]	; (8007330 <MX_USB_DEVICE_Init+0x44>)
 80072f6:	f7fe ff7d 	bl	80061f4 <USBD_Init>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d001      	beq.n	8007304 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007300:	f7f9 ff1c 	bl	800113c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007304:	490b      	ldr	r1, [pc, #44]	; (8007334 <MX_USB_DEVICE_Init+0x48>)
 8007306:	480a      	ldr	r0, [pc, #40]	; (8007330 <MX_USB_DEVICE_Init+0x44>)
 8007308:	f7fe ff9f 	bl	800624a <USBD_RegisterClass>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d001      	beq.n	8007316 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007312:	f7f9 ff13 	bl	800113c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007316:	4806      	ldr	r0, [pc, #24]	; (8007330 <MX_USB_DEVICE_Init+0x44>)
 8007318:	f7fe ffb0 	bl	800627c <USBD_Start>
 800731c:	4603      	mov	r3, r0
 800731e:	2b00      	cmp	r3, #0
 8007320:	d001      	beq.n	8007326 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8007322:	f7f9 ff0b 	bl	800113c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007326:	bf00      	nop
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	20000120 	.word	0x20000120
 8007330:	20000224 	.word	0x20000224
 8007334:	20000024 	.word	0x20000024

08007338 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	4603      	mov	r3, r0
 8007340:	6039      	str	r1, [r7, #0]
 8007342:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	2212      	movs	r2, #18
 8007348:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800734a:	4b03      	ldr	r3, [pc, #12]	; (8007358 <USBD_FS_DeviceDescriptor+0x20>)
}
 800734c:	4618      	mov	r0, r3
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	bc80      	pop	{r7}
 8007354:	4770      	bx	lr
 8007356:	bf00      	nop
 8007358:	2000013c 	.word	0x2000013c

0800735c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
 8007362:	4603      	mov	r3, r0
 8007364:	6039      	str	r1, [r7, #0]
 8007366:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	2204      	movs	r2, #4
 800736c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800736e:	4b03      	ldr	r3, [pc, #12]	; (800737c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007370:	4618      	mov	r0, r3
 8007372:	370c      	adds	r7, #12
 8007374:	46bd      	mov	sp, r7
 8007376:	bc80      	pop	{r7}
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	20000150 	.word	0x20000150

08007380 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
 8007386:	4603      	mov	r3, r0
 8007388:	6039      	str	r1, [r7, #0]
 800738a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800738c:	79fb      	ldrb	r3, [r7, #7]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d105      	bne.n	800739e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007392:	683a      	ldr	r2, [r7, #0]
 8007394:	4907      	ldr	r1, [pc, #28]	; (80073b4 <USBD_FS_ProductStrDescriptor+0x34>)
 8007396:	4808      	ldr	r0, [pc, #32]	; (80073b8 <USBD_FS_ProductStrDescriptor+0x38>)
 8007398:	f7ff fee8 	bl	800716c <USBD_GetString>
 800739c:	e004      	b.n	80073a8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800739e:	683a      	ldr	r2, [r7, #0]
 80073a0:	4904      	ldr	r1, [pc, #16]	; (80073b4 <USBD_FS_ProductStrDescriptor+0x34>)
 80073a2:	4805      	ldr	r0, [pc, #20]	; (80073b8 <USBD_FS_ProductStrDescriptor+0x38>)
 80073a4:	f7ff fee2 	bl	800716c <USBD_GetString>
  }
  return USBD_StrDesc;
 80073a8:	4b02      	ldr	r3, [pc, #8]	; (80073b4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3708      	adds	r7, #8
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	200004e8 	.word	0x200004e8
 80073b8:	080093b8 	.word	0x080093b8

080073bc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	4603      	mov	r3, r0
 80073c4:	6039      	str	r1, [r7, #0]
 80073c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80073c8:	683a      	ldr	r2, [r7, #0]
 80073ca:	4904      	ldr	r1, [pc, #16]	; (80073dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80073cc:	4804      	ldr	r0, [pc, #16]	; (80073e0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80073ce:	f7ff fecd 	bl	800716c <USBD_GetString>
  return USBD_StrDesc;
 80073d2:	4b02      	ldr	r3, [pc, #8]	; (80073dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3708      	adds	r7, #8
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	200004e8 	.word	0x200004e8
 80073e0:	080093d0 	.word	0x080093d0

080073e4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b082      	sub	sp, #8
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	4603      	mov	r3, r0
 80073ec:	6039      	str	r1, [r7, #0]
 80073ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	221a      	movs	r2, #26
 80073f4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80073f6:	f000 f843 	bl	8007480 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80073fa:	4b02      	ldr	r3, [pc, #8]	; (8007404 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3708      	adds	r7, #8
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}
 8007404:	20000154 	.word	0x20000154

08007408 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b082      	sub	sp, #8
 800740c:	af00      	add	r7, sp, #0
 800740e:	4603      	mov	r3, r0
 8007410:	6039      	str	r1, [r7, #0]
 8007412:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007414:	79fb      	ldrb	r3, [r7, #7]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d105      	bne.n	8007426 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800741a:	683a      	ldr	r2, [r7, #0]
 800741c:	4907      	ldr	r1, [pc, #28]	; (800743c <USBD_FS_ConfigStrDescriptor+0x34>)
 800741e:	4808      	ldr	r0, [pc, #32]	; (8007440 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007420:	f7ff fea4 	bl	800716c <USBD_GetString>
 8007424:	e004      	b.n	8007430 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007426:	683a      	ldr	r2, [r7, #0]
 8007428:	4904      	ldr	r1, [pc, #16]	; (800743c <USBD_FS_ConfigStrDescriptor+0x34>)
 800742a:	4805      	ldr	r0, [pc, #20]	; (8007440 <USBD_FS_ConfigStrDescriptor+0x38>)
 800742c:	f7ff fe9e 	bl	800716c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007430:	4b02      	ldr	r3, [pc, #8]	; (800743c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007432:	4618      	mov	r0, r3
 8007434:	3708      	adds	r7, #8
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	200004e8 	.word	0x200004e8
 8007440:	080093e4 	.word	0x080093e4

08007444 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	4603      	mov	r3, r0
 800744c:	6039      	str	r1, [r7, #0]
 800744e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007450:	79fb      	ldrb	r3, [r7, #7]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d105      	bne.n	8007462 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007456:	683a      	ldr	r2, [r7, #0]
 8007458:	4907      	ldr	r1, [pc, #28]	; (8007478 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800745a:	4808      	ldr	r0, [pc, #32]	; (800747c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800745c:	f7ff fe86 	bl	800716c <USBD_GetString>
 8007460:	e004      	b.n	800746c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007462:	683a      	ldr	r2, [r7, #0]
 8007464:	4904      	ldr	r1, [pc, #16]	; (8007478 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007466:	4805      	ldr	r0, [pc, #20]	; (800747c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007468:	f7ff fe80 	bl	800716c <USBD_GetString>
  }
  return USBD_StrDesc;
 800746c:	4b02      	ldr	r3, [pc, #8]	; (8007478 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800746e:	4618      	mov	r0, r3
 8007470:	3708      	adds	r7, #8
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	200004e8 	.word	0x200004e8
 800747c:	080093f0 	.word	0x080093f0

08007480 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007486:	4b0f      	ldr	r3, [pc, #60]	; (80074c4 <Get_SerialNum+0x44>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800748c:	4b0e      	ldr	r3, [pc, #56]	; (80074c8 <Get_SerialNum+0x48>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007492:	4b0e      	ldr	r3, [pc, #56]	; (80074cc <Get_SerialNum+0x4c>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007498:	68fa      	ldr	r2, [r7, #12]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4413      	add	r3, r2
 800749e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d009      	beq.n	80074ba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80074a6:	2208      	movs	r2, #8
 80074a8:	4909      	ldr	r1, [pc, #36]	; (80074d0 <Get_SerialNum+0x50>)
 80074aa:	68f8      	ldr	r0, [r7, #12]
 80074ac:	f000 f814 	bl	80074d8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80074b0:	2204      	movs	r2, #4
 80074b2:	4908      	ldr	r1, [pc, #32]	; (80074d4 <Get_SerialNum+0x54>)
 80074b4:	68b8      	ldr	r0, [r7, #8]
 80074b6:	f000 f80f 	bl	80074d8 <IntToUnicode>
  }
}
 80074ba:	bf00      	nop
 80074bc:	3710      	adds	r7, #16
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	1ffff7e8 	.word	0x1ffff7e8
 80074c8:	1ffff7ec 	.word	0x1ffff7ec
 80074cc:	1ffff7f0 	.word	0x1ffff7f0
 80074d0:	20000156 	.word	0x20000156
 80074d4:	20000166 	.word	0x20000166

080074d8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80074d8:	b480      	push	{r7}
 80074da:	b087      	sub	sp, #28
 80074dc:	af00      	add	r7, sp, #0
 80074de:	60f8      	str	r0, [r7, #12]
 80074e0:	60b9      	str	r1, [r7, #8]
 80074e2:	4613      	mov	r3, r2
 80074e4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80074e6:	2300      	movs	r3, #0
 80074e8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80074ea:	2300      	movs	r3, #0
 80074ec:	75fb      	strb	r3, [r7, #23]
 80074ee:	e027      	b.n	8007540 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	0f1b      	lsrs	r3, r3, #28
 80074f4:	2b09      	cmp	r3, #9
 80074f6:	d80b      	bhi.n	8007510 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	0f1b      	lsrs	r3, r3, #28
 80074fc:	b2da      	uxtb	r2, r3
 80074fe:	7dfb      	ldrb	r3, [r7, #23]
 8007500:	005b      	lsls	r3, r3, #1
 8007502:	4619      	mov	r1, r3
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	440b      	add	r3, r1
 8007508:	3230      	adds	r2, #48	; 0x30
 800750a:	b2d2      	uxtb	r2, r2
 800750c:	701a      	strb	r2, [r3, #0]
 800750e:	e00a      	b.n	8007526 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	0f1b      	lsrs	r3, r3, #28
 8007514:	b2da      	uxtb	r2, r3
 8007516:	7dfb      	ldrb	r3, [r7, #23]
 8007518:	005b      	lsls	r3, r3, #1
 800751a:	4619      	mov	r1, r3
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	440b      	add	r3, r1
 8007520:	3237      	adds	r2, #55	; 0x37
 8007522:	b2d2      	uxtb	r2, r2
 8007524:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	011b      	lsls	r3, r3, #4
 800752a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800752c:	7dfb      	ldrb	r3, [r7, #23]
 800752e:	005b      	lsls	r3, r3, #1
 8007530:	3301      	adds	r3, #1
 8007532:	68ba      	ldr	r2, [r7, #8]
 8007534:	4413      	add	r3, r2
 8007536:	2200      	movs	r2, #0
 8007538:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800753a:	7dfb      	ldrb	r3, [r7, #23]
 800753c:	3301      	adds	r3, #1
 800753e:	75fb      	strb	r3, [r7, #23]
 8007540:	7dfa      	ldrb	r2, [r7, #23]
 8007542:	79fb      	ldrb	r3, [r7, #7]
 8007544:	429a      	cmp	r2, r3
 8007546:	d3d3      	bcc.n	80074f0 <IntToUnicode+0x18>
  }
}
 8007548:	bf00      	nop
 800754a:	bf00      	nop
 800754c:	371c      	adds	r7, #28
 800754e:	46bd      	mov	sp, r7
 8007550:	bc80      	pop	{r7}
 8007552:	4770      	bx	lr

08007554 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a0d      	ldr	r2, [pc, #52]	; (8007598 <HAL_PCD_MspInit+0x44>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d113      	bne.n	800758e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007566:	4b0d      	ldr	r3, [pc, #52]	; (800759c <HAL_PCD_MspInit+0x48>)
 8007568:	69db      	ldr	r3, [r3, #28]
 800756a:	4a0c      	ldr	r2, [pc, #48]	; (800759c <HAL_PCD_MspInit+0x48>)
 800756c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007570:	61d3      	str	r3, [r2, #28]
 8007572:	4b0a      	ldr	r3, [pc, #40]	; (800759c <HAL_PCD_MspInit+0x48>)
 8007574:	69db      	ldr	r3, [r3, #28]
 8007576:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800757a:	60fb      	str	r3, [r7, #12]
 800757c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800757e:	2200      	movs	r2, #0
 8007580:	2100      	movs	r1, #0
 8007582:	2014      	movs	r0, #20
 8007584:	f7fa f86d 	bl	8001662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007588:	2014      	movs	r0, #20
 800758a:	f7fa f886 	bl	800169a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800758e:	bf00      	nop
 8007590:	3710      	adds	r7, #16
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	40005c00 	.word	0x40005c00
 800759c:	40021000 	.word	0x40021000

080075a0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80075b4:	4619      	mov	r1, r3
 80075b6:	4610      	mov	r0, r2
 80075b8:	f7fe fea8 	bl	800630c <USBD_LL_SetupStage>
}
 80075bc:	bf00      	nop
 80075be:	3708      	adds	r7, #8
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	460b      	mov	r3, r1
 80075ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80075d6:	78fa      	ldrb	r2, [r7, #3]
 80075d8:	6879      	ldr	r1, [r7, #4]
 80075da:	4613      	mov	r3, r2
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	4413      	add	r3, r2
 80075e0:	00db      	lsls	r3, r3, #3
 80075e2:	440b      	add	r3, r1
 80075e4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	78fb      	ldrb	r3, [r7, #3]
 80075ec:	4619      	mov	r1, r3
 80075ee:	f7fe feda 	bl	80063a6 <USBD_LL_DataOutStage>
}
 80075f2:	bf00      	nop
 80075f4:	3708      	adds	r7, #8
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}

080075fa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b082      	sub	sp, #8
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
 8007602:	460b      	mov	r3, r1
 8007604:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800760c:	78fa      	ldrb	r2, [r7, #3]
 800760e:	6879      	ldr	r1, [r7, #4]
 8007610:	4613      	mov	r3, r2
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	4413      	add	r3, r2
 8007616:	00db      	lsls	r3, r3, #3
 8007618:	440b      	add	r3, r1
 800761a:	333c      	adds	r3, #60	; 0x3c
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	78fb      	ldrb	r3, [r7, #3]
 8007620:	4619      	mov	r1, r3
 8007622:	f7fe ff31 	bl	8006488 <USBD_LL_DataInStage>
}
 8007626:	bf00      	nop
 8007628:	3708      	adds	r7, #8
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}

0800762e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800762e:	b580      	push	{r7, lr}
 8007630:	b082      	sub	sp, #8
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800763c:	4618      	mov	r0, r3
 800763e:	f7ff f841 	bl	80066c4 <USBD_LL_SOF>
}
 8007642:	bf00      	nop
 8007644:	3708      	adds	r7, #8
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}

0800764a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800764a:	b580      	push	{r7, lr}
 800764c:	b084      	sub	sp, #16
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007652:	2301      	movs	r3, #1
 8007654:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	2b02      	cmp	r3, #2
 800765c:	d001      	beq.n	8007662 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800765e:	f7f9 fd6d 	bl	800113c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007668:	7bfa      	ldrb	r2, [r7, #15]
 800766a:	4611      	mov	r1, r2
 800766c:	4618      	mov	r0, r3
 800766e:	f7fe fff1 	bl	8006654 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007678:	4618      	mov	r0, r3
 800767a:	f7fe ffaa 	bl	80065d2 <USBD_LL_Reset>
}
 800767e:	bf00      	nop
 8007680:	3710      	adds	r7, #16
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
	...

08007688 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b082      	sub	sp, #8
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007696:	4618      	mov	r0, r3
 8007698:	f7fe ffeb 	bl	8006672 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	699b      	ldr	r3, [r3, #24]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d005      	beq.n	80076b0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80076a4:	4b04      	ldr	r3, [pc, #16]	; (80076b8 <HAL_PCD_SuspendCallback+0x30>)
 80076a6:	691b      	ldr	r3, [r3, #16]
 80076a8:	4a03      	ldr	r2, [pc, #12]	; (80076b8 <HAL_PCD_SuspendCallback+0x30>)
 80076aa:	f043 0306 	orr.w	r3, r3, #6
 80076ae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80076b0:	bf00      	nop
 80076b2:	3708      	adds	r7, #8
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	e000ed00 	.word	0xe000ed00

080076bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b082      	sub	sp, #8
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80076ca:	4618      	mov	r0, r3
 80076cc:	f7fe ffe5 	bl	800669a <USBD_LL_Resume>
}
 80076d0:	bf00      	nop
 80076d2:	3708      	adds	r7, #8
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80076e0:	4a1f      	ldr	r2, [pc, #124]	; (8007760 <USBD_LL_Init+0x88>)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4a1d      	ldr	r2, [pc, #116]	; (8007760 <USBD_LL_Init+0x88>)
 80076ec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80076f0:	4b1b      	ldr	r3, [pc, #108]	; (8007760 <USBD_LL_Init+0x88>)
 80076f2:	4a1c      	ldr	r2, [pc, #112]	; (8007764 <USBD_LL_Init+0x8c>)
 80076f4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80076f6:	4b1a      	ldr	r3, [pc, #104]	; (8007760 <USBD_LL_Init+0x88>)
 80076f8:	2208      	movs	r2, #8
 80076fa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80076fc:	4b18      	ldr	r3, [pc, #96]	; (8007760 <USBD_LL_Init+0x88>)
 80076fe:	2202      	movs	r2, #2
 8007700:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007702:	4b17      	ldr	r3, [pc, #92]	; (8007760 <USBD_LL_Init+0x88>)
 8007704:	2200      	movs	r2, #0
 8007706:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007708:	4b15      	ldr	r3, [pc, #84]	; (8007760 <USBD_LL_Init+0x88>)
 800770a:	2200      	movs	r2, #0
 800770c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800770e:	4b14      	ldr	r3, [pc, #80]	; (8007760 <USBD_LL_Init+0x88>)
 8007710:	2200      	movs	r2, #0
 8007712:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007714:	4812      	ldr	r0, [pc, #72]	; (8007760 <USBD_LL_Init+0x88>)
 8007716:	f7f9 ffda 	bl	80016ce <HAL_PCD_Init>
 800771a:	4603      	mov	r3, r0
 800771c:	2b00      	cmp	r3, #0
 800771e:	d001      	beq.n	8007724 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007720:	f7f9 fd0c 	bl	800113c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800772a:	2318      	movs	r3, #24
 800772c:	2200      	movs	r2, #0
 800772e:	2100      	movs	r1, #0
 8007730:	f7fb fc39 	bl	8002fa6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800773a:	2358      	movs	r3, #88	; 0x58
 800773c:	2200      	movs	r2, #0
 800773e:	2180      	movs	r1, #128	; 0x80
 8007740:	f7fb fc31 	bl	8002fa6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800774a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800774e:	2200      	movs	r2, #0
 8007750:	2181      	movs	r1, #129	; 0x81
 8007752:	f7fb fc28 	bl	8002fa6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8007756:	2300      	movs	r3, #0
}
 8007758:	4618      	mov	r0, r3
 800775a:	3708      	adds	r7, #8
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}
 8007760:	200006e8 	.word	0x200006e8
 8007764:	40005c00 	.word	0x40005c00

08007768 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007770:	2300      	movs	r3, #0
 8007772:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007774:	2300      	movs	r3, #0
 8007776:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800777e:	4618      	mov	r0, r3
 8007780:	f7fa f8b0 	bl	80018e4 <HAL_PCD_Start>
 8007784:	4603      	mov	r3, r0
 8007786:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007788:	7bfb      	ldrb	r3, [r7, #15]
 800778a:	4618      	mov	r0, r3
 800778c:	f000 f93c 	bl	8007a08 <USBD_Get_USB_Status>
 8007790:	4603      	mov	r3, r0
 8007792:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007794:	7bbb      	ldrb	r3, [r7, #14]
}
 8007796:	4618      	mov	r0, r3
 8007798:	3710      	adds	r7, #16
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}

0800779e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800779e:	b580      	push	{r7, lr}
 80077a0:	b084      	sub	sp, #16
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
 80077a6:	4608      	mov	r0, r1
 80077a8:	4611      	mov	r1, r2
 80077aa:	461a      	mov	r2, r3
 80077ac:	4603      	mov	r3, r0
 80077ae:	70fb      	strb	r3, [r7, #3]
 80077b0:	460b      	mov	r3, r1
 80077b2:	70bb      	strb	r3, [r7, #2]
 80077b4:	4613      	mov	r3, r2
 80077b6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077b8:	2300      	movs	r3, #0
 80077ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077bc:	2300      	movs	r3, #0
 80077be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80077c6:	78bb      	ldrb	r3, [r7, #2]
 80077c8:	883a      	ldrh	r2, [r7, #0]
 80077ca:	78f9      	ldrb	r1, [r7, #3]
 80077cc:	f7fa fa2a 	bl	8001c24 <HAL_PCD_EP_Open>
 80077d0:	4603      	mov	r3, r0
 80077d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077d4:	7bfb      	ldrb	r3, [r7, #15]
 80077d6:	4618      	mov	r0, r3
 80077d8:	f000 f916 	bl	8007a08 <USBD_Get_USB_Status>
 80077dc:	4603      	mov	r3, r0
 80077de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3710      	adds	r7, #16
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b084      	sub	sp, #16
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
 80077f2:	460b      	mov	r3, r1
 80077f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077f6:	2300      	movs	r3, #0
 80077f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077fa:	2300      	movs	r3, #0
 80077fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007804:	78fa      	ldrb	r2, [r7, #3]
 8007806:	4611      	mov	r1, r2
 8007808:	4618      	mov	r0, r3
 800780a:	f7fa fa71 	bl	8001cf0 <HAL_PCD_EP_Close>
 800780e:	4603      	mov	r3, r0
 8007810:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007812:	7bfb      	ldrb	r3, [r7, #15]
 8007814:	4618      	mov	r0, r3
 8007816:	f000 f8f7 	bl	8007a08 <USBD_Get_USB_Status>
 800781a:	4603      	mov	r3, r0
 800781c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800781e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007820:	4618      	mov	r0, r3
 8007822:	3710      	adds	r7, #16
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	460b      	mov	r3, r1
 8007832:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007834:	2300      	movs	r3, #0
 8007836:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007838:	2300      	movs	r3, #0
 800783a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007842:	78fa      	ldrb	r2, [r7, #3]
 8007844:	4611      	mov	r1, r2
 8007846:	4618      	mov	r0, r3
 8007848:	f7fa fb1a 	bl	8001e80 <HAL_PCD_EP_SetStall>
 800784c:	4603      	mov	r3, r0
 800784e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007850:	7bfb      	ldrb	r3, [r7, #15]
 8007852:	4618      	mov	r0, r3
 8007854:	f000 f8d8 	bl	8007a08 <USBD_Get_USB_Status>
 8007858:	4603      	mov	r3, r0
 800785a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800785c:	7bbb      	ldrb	r3, [r7, #14]
}
 800785e:	4618      	mov	r0, r3
 8007860:	3710      	adds	r7, #16
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}

08007866 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007866:	b580      	push	{r7, lr}
 8007868:	b084      	sub	sp, #16
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
 800786e:	460b      	mov	r3, r1
 8007870:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007872:	2300      	movs	r3, #0
 8007874:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007876:	2300      	movs	r3, #0
 8007878:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007880:	78fa      	ldrb	r2, [r7, #3]
 8007882:	4611      	mov	r1, r2
 8007884:	4618      	mov	r0, r3
 8007886:	f7fa fb5b 	bl	8001f40 <HAL_PCD_EP_ClrStall>
 800788a:	4603      	mov	r3, r0
 800788c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800788e:	7bfb      	ldrb	r3, [r7, #15]
 8007890:	4618      	mov	r0, r3
 8007892:	f000 f8b9 	bl	8007a08 <USBD_Get_USB_Status>
 8007896:	4603      	mov	r3, r0
 8007898:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800789a:	7bbb      	ldrb	r3, [r7, #14]
}
 800789c:	4618      	mov	r0, r3
 800789e:	3710      	adds	r7, #16
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b085      	sub	sp, #20
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	460b      	mov	r3, r1
 80078ae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80078b6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80078b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	da0c      	bge.n	80078da <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80078c0:	78fb      	ldrb	r3, [r7, #3]
 80078c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078c6:	68f9      	ldr	r1, [r7, #12]
 80078c8:	1c5a      	adds	r2, r3, #1
 80078ca:	4613      	mov	r3, r2
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	4413      	add	r3, r2
 80078d0:	00db      	lsls	r3, r3, #3
 80078d2:	440b      	add	r3, r1
 80078d4:	3302      	adds	r3, #2
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	e00b      	b.n	80078f2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80078da:	78fb      	ldrb	r3, [r7, #3]
 80078dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80078e0:	68f9      	ldr	r1, [r7, #12]
 80078e2:	4613      	mov	r3, r2
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	4413      	add	r3, r2
 80078e8:	00db      	lsls	r3, r3, #3
 80078ea:	440b      	add	r3, r1
 80078ec:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80078f0:	781b      	ldrb	r3, [r3, #0]
  }
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3714      	adds	r7, #20
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bc80      	pop	{r7}
 80078fa:	4770      	bx	lr

080078fc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	460b      	mov	r3, r1
 8007906:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007908:	2300      	movs	r3, #0
 800790a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800790c:	2300      	movs	r3, #0
 800790e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007916:	78fa      	ldrb	r2, [r7, #3]
 8007918:	4611      	mov	r1, r2
 800791a:	4618      	mov	r0, r3
 800791c:	f7fa f95d 	bl	8001bda <HAL_PCD_SetAddress>
 8007920:	4603      	mov	r3, r0
 8007922:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007924:	7bfb      	ldrb	r3, [r7, #15]
 8007926:	4618      	mov	r0, r3
 8007928:	f000 f86e 	bl	8007a08 <USBD_Get_USB_Status>
 800792c:	4603      	mov	r3, r0
 800792e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007930:	7bbb      	ldrb	r3, [r7, #14]
}
 8007932:	4618      	mov	r0, r3
 8007934:	3710      	adds	r7, #16
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b086      	sub	sp, #24
 800793e:	af00      	add	r7, sp, #0
 8007940:	60f8      	str	r0, [r7, #12]
 8007942:	607a      	str	r2, [r7, #4]
 8007944:	461a      	mov	r2, r3
 8007946:	460b      	mov	r3, r1
 8007948:	72fb      	strb	r3, [r7, #11]
 800794a:	4613      	mov	r3, r2
 800794c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800794e:	2300      	movs	r3, #0
 8007950:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007952:	2300      	movs	r3, #0
 8007954:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800795c:	893b      	ldrh	r3, [r7, #8]
 800795e:	7af9      	ldrb	r1, [r7, #11]
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	f7fa fa4a 	bl	8001dfa <HAL_PCD_EP_Transmit>
 8007966:	4603      	mov	r3, r0
 8007968:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800796a:	7dfb      	ldrb	r3, [r7, #23]
 800796c:	4618      	mov	r0, r3
 800796e:	f000 f84b 	bl	8007a08 <USBD_Get_USB_Status>
 8007972:	4603      	mov	r3, r0
 8007974:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007976:	7dbb      	ldrb	r3, [r7, #22]
}
 8007978:	4618      	mov	r0, r3
 800797a:	3718      	adds	r7, #24
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b086      	sub	sp, #24
 8007984:	af00      	add	r7, sp, #0
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	607a      	str	r2, [r7, #4]
 800798a:	461a      	mov	r2, r3
 800798c:	460b      	mov	r3, r1
 800798e:	72fb      	strb	r3, [r7, #11]
 8007990:	4613      	mov	r3, r2
 8007992:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007994:	2300      	movs	r3, #0
 8007996:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007998:	2300      	movs	r3, #0
 800799a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80079a2:	893b      	ldrh	r3, [r7, #8]
 80079a4:	7af9      	ldrb	r1, [r7, #11]
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	f7fa f9ea 	bl	8001d80 <HAL_PCD_EP_Receive>
 80079ac:	4603      	mov	r3, r0
 80079ae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079b0:	7dfb      	ldrb	r3, [r7, #23]
 80079b2:	4618      	mov	r0, r3
 80079b4:	f000 f828 	bl	8007a08 <USBD_Get_USB_Status>
 80079b8:	4603      	mov	r3, r0
 80079ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80079bc:	7dbb      	ldrb	r3, [r7, #22]
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3718      	adds	r7, #24
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
	...

080079c8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80079d0:	4b02      	ldr	r3, [pc, #8]	; (80079dc <USBD_static_malloc+0x14>)
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	370c      	adds	r7, #12
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bc80      	pop	{r7}
 80079da:	4770      	bx	lr
 80079dc:	20000204 	.word	0x20000204

080079e0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]

}
 80079e8:	bf00      	nop
 80079ea:	370c      	adds	r7, #12
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bc80      	pop	{r7}
 80079f0:	4770      	bx	lr

080079f2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079f2:	b480      	push	{r7}
 80079f4:	b083      	sub	sp, #12
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
 80079fa:	460b      	mov	r3, r1
 80079fc:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80079fe:	bf00      	nop
 8007a00:	370c      	adds	r7, #12
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bc80      	pop	{r7}
 8007a06:	4770      	bx	lr

08007a08 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	4603      	mov	r3, r0
 8007a10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a12:	2300      	movs	r3, #0
 8007a14:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007a16:	79fb      	ldrb	r3, [r7, #7]
 8007a18:	2b03      	cmp	r3, #3
 8007a1a:	d817      	bhi.n	8007a4c <USBD_Get_USB_Status+0x44>
 8007a1c:	a201      	add	r2, pc, #4	; (adr r2, 8007a24 <USBD_Get_USB_Status+0x1c>)
 8007a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a22:	bf00      	nop
 8007a24:	08007a35 	.word	0x08007a35
 8007a28:	08007a3b 	.word	0x08007a3b
 8007a2c:	08007a41 	.word	0x08007a41
 8007a30:	08007a47 	.word	0x08007a47
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007a34:	2300      	movs	r3, #0
 8007a36:	73fb      	strb	r3, [r7, #15]
    break;
 8007a38:	e00b      	b.n	8007a52 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007a3a:	2302      	movs	r3, #2
 8007a3c:	73fb      	strb	r3, [r7, #15]
    break;
 8007a3e:	e008      	b.n	8007a52 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007a40:	2301      	movs	r3, #1
 8007a42:	73fb      	strb	r3, [r7, #15]
    break;
 8007a44:	e005      	b.n	8007a52 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007a46:	2302      	movs	r3, #2
 8007a48:	73fb      	strb	r3, [r7, #15]
    break;
 8007a4a:	e002      	b.n	8007a52 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007a4c:	2302      	movs	r3, #2
 8007a4e:	73fb      	strb	r3, [r7, #15]
    break;
 8007a50:	bf00      	nop
  }
  return usb_status;
 8007a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3714      	adds	r7, #20
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bc80      	pop	{r7}
 8007a5c:	4770      	bx	lr
 8007a5e:	bf00      	nop

08007a60 <__errno>:
 8007a60:	4b01      	ldr	r3, [pc, #4]	; (8007a68 <__errno+0x8>)
 8007a62:	6818      	ldr	r0, [r3, #0]
 8007a64:	4770      	bx	lr
 8007a66:	bf00      	nop
 8007a68:	20000170 	.word	0x20000170

08007a6c <__libc_init_array>:
 8007a6c:	b570      	push	{r4, r5, r6, lr}
 8007a6e:	2600      	movs	r6, #0
 8007a70:	4d0c      	ldr	r5, [pc, #48]	; (8007aa4 <__libc_init_array+0x38>)
 8007a72:	4c0d      	ldr	r4, [pc, #52]	; (8007aa8 <__libc_init_array+0x3c>)
 8007a74:	1b64      	subs	r4, r4, r5
 8007a76:	10a4      	asrs	r4, r4, #2
 8007a78:	42a6      	cmp	r6, r4
 8007a7a:	d109      	bne.n	8007a90 <__libc_init_array+0x24>
 8007a7c:	f001 fc86 	bl	800938c <_init>
 8007a80:	2600      	movs	r6, #0
 8007a82:	4d0a      	ldr	r5, [pc, #40]	; (8007aac <__libc_init_array+0x40>)
 8007a84:	4c0a      	ldr	r4, [pc, #40]	; (8007ab0 <__libc_init_array+0x44>)
 8007a86:	1b64      	subs	r4, r4, r5
 8007a88:	10a4      	asrs	r4, r4, #2
 8007a8a:	42a6      	cmp	r6, r4
 8007a8c:	d105      	bne.n	8007a9a <__libc_init_array+0x2e>
 8007a8e:	bd70      	pop	{r4, r5, r6, pc}
 8007a90:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a94:	4798      	blx	r3
 8007a96:	3601      	adds	r6, #1
 8007a98:	e7ee      	b.n	8007a78 <__libc_init_array+0xc>
 8007a9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a9e:	4798      	blx	r3
 8007aa0:	3601      	adds	r6, #1
 8007aa2:	e7f2      	b.n	8007a8a <__libc_init_array+0x1e>
 8007aa4:	080094b8 	.word	0x080094b8
 8007aa8:	080094b8 	.word	0x080094b8
 8007aac:	080094b8 	.word	0x080094b8
 8007ab0:	080094bc 	.word	0x080094bc

08007ab4 <memset>:
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	4402      	add	r2, r0
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d100      	bne.n	8007abe <memset+0xa>
 8007abc:	4770      	bx	lr
 8007abe:	f803 1b01 	strb.w	r1, [r3], #1
 8007ac2:	e7f9      	b.n	8007ab8 <memset+0x4>

08007ac4 <putchar>:
 8007ac4:	b538      	push	{r3, r4, r5, lr}
 8007ac6:	4b08      	ldr	r3, [pc, #32]	; (8007ae8 <putchar+0x24>)
 8007ac8:	4605      	mov	r5, r0
 8007aca:	681c      	ldr	r4, [r3, #0]
 8007acc:	b124      	cbz	r4, 8007ad8 <putchar+0x14>
 8007ace:	69a3      	ldr	r3, [r4, #24]
 8007ad0:	b913      	cbnz	r3, 8007ad8 <putchar+0x14>
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	f000 f862 	bl	8007b9c <__sinit>
 8007ad8:	4629      	mov	r1, r5
 8007ada:	4620      	mov	r0, r4
 8007adc:	68a2      	ldr	r2, [r4, #8]
 8007ade:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ae2:	f000 b955 	b.w	8007d90 <_putc_r>
 8007ae6:	bf00      	nop
 8007ae8:	20000170 	.word	0x20000170

08007aec <std>:
 8007aec:	2300      	movs	r3, #0
 8007aee:	b510      	push	{r4, lr}
 8007af0:	4604      	mov	r4, r0
 8007af2:	e9c0 3300 	strd	r3, r3, [r0]
 8007af6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007afa:	6083      	str	r3, [r0, #8]
 8007afc:	8181      	strh	r1, [r0, #12]
 8007afe:	6643      	str	r3, [r0, #100]	; 0x64
 8007b00:	81c2      	strh	r2, [r0, #14]
 8007b02:	6183      	str	r3, [r0, #24]
 8007b04:	4619      	mov	r1, r3
 8007b06:	2208      	movs	r2, #8
 8007b08:	305c      	adds	r0, #92	; 0x5c
 8007b0a:	f7ff ffd3 	bl	8007ab4 <memset>
 8007b0e:	4b05      	ldr	r3, [pc, #20]	; (8007b24 <std+0x38>)
 8007b10:	6224      	str	r4, [r4, #32]
 8007b12:	6263      	str	r3, [r4, #36]	; 0x24
 8007b14:	4b04      	ldr	r3, [pc, #16]	; (8007b28 <std+0x3c>)
 8007b16:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b18:	4b04      	ldr	r3, [pc, #16]	; (8007b2c <std+0x40>)
 8007b1a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b1c:	4b04      	ldr	r3, [pc, #16]	; (8007b30 <std+0x44>)
 8007b1e:	6323      	str	r3, [r4, #48]	; 0x30
 8007b20:	bd10      	pop	{r4, pc}
 8007b22:	bf00      	nop
 8007b24:	08007e41 	.word	0x08007e41
 8007b28:	08007e63 	.word	0x08007e63
 8007b2c:	08007e9b 	.word	0x08007e9b
 8007b30:	08007ebf 	.word	0x08007ebf

08007b34 <_cleanup_r>:
 8007b34:	4901      	ldr	r1, [pc, #4]	; (8007b3c <_cleanup_r+0x8>)
 8007b36:	f000 b8af 	b.w	8007c98 <_fwalk_reent>
 8007b3a:	bf00      	nop
 8007b3c:	08008199 	.word	0x08008199

08007b40 <__sfmoreglue>:
 8007b40:	b570      	push	{r4, r5, r6, lr}
 8007b42:	2568      	movs	r5, #104	; 0x68
 8007b44:	1e4a      	subs	r2, r1, #1
 8007b46:	4355      	muls	r5, r2
 8007b48:	460e      	mov	r6, r1
 8007b4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007b4e:	f000 f8c5 	bl	8007cdc <_malloc_r>
 8007b52:	4604      	mov	r4, r0
 8007b54:	b140      	cbz	r0, 8007b68 <__sfmoreglue+0x28>
 8007b56:	2100      	movs	r1, #0
 8007b58:	e9c0 1600 	strd	r1, r6, [r0]
 8007b5c:	300c      	adds	r0, #12
 8007b5e:	60a0      	str	r0, [r4, #8]
 8007b60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007b64:	f7ff ffa6 	bl	8007ab4 <memset>
 8007b68:	4620      	mov	r0, r4
 8007b6a:	bd70      	pop	{r4, r5, r6, pc}

08007b6c <__sfp_lock_acquire>:
 8007b6c:	4801      	ldr	r0, [pc, #4]	; (8007b74 <__sfp_lock_acquire+0x8>)
 8007b6e:	f000 b8b3 	b.w	8007cd8 <__retarget_lock_acquire_recursive>
 8007b72:	bf00      	nop
 8007b74:	200009dc 	.word	0x200009dc

08007b78 <__sfp_lock_release>:
 8007b78:	4801      	ldr	r0, [pc, #4]	; (8007b80 <__sfp_lock_release+0x8>)
 8007b7a:	f000 b8ae 	b.w	8007cda <__retarget_lock_release_recursive>
 8007b7e:	bf00      	nop
 8007b80:	200009dc 	.word	0x200009dc

08007b84 <__sinit_lock_acquire>:
 8007b84:	4801      	ldr	r0, [pc, #4]	; (8007b8c <__sinit_lock_acquire+0x8>)
 8007b86:	f000 b8a7 	b.w	8007cd8 <__retarget_lock_acquire_recursive>
 8007b8a:	bf00      	nop
 8007b8c:	200009d7 	.word	0x200009d7

08007b90 <__sinit_lock_release>:
 8007b90:	4801      	ldr	r0, [pc, #4]	; (8007b98 <__sinit_lock_release+0x8>)
 8007b92:	f000 b8a2 	b.w	8007cda <__retarget_lock_release_recursive>
 8007b96:	bf00      	nop
 8007b98:	200009d7 	.word	0x200009d7

08007b9c <__sinit>:
 8007b9c:	b510      	push	{r4, lr}
 8007b9e:	4604      	mov	r4, r0
 8007ba0:	f7ff fff0 	bl	8007b84 <__sinit_lock_acquire>
 8007ba4:	69a3      	ldr	r3, [r4, #24]
 8007ba6:	b11b      	cbz	r3, 8007bb0 <__sinit+0x14>
 8007ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bac:	f7ff bff0 	b.w	8007b90 <__sinit_lock_release>
 8007bb0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007bb4:	6523      	str	r3, [r4, #80]	; 0x50
 8007bb6:	4b13      	ldr	r3, [pc, #76]	; (8007c04 <__sinit+0x68>)
 8007bb8:	4a13      	ldr	r2, [pc, #76]	; (8007c08 <__sinit+0x6c>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	62a2      	str	r2, [r4, #40]	; 0x28
 8007bbe:	42a3      	cmp	r3, r4
 8007bc0:	bf08      	it	eq
 8007bc2:	2301      	moveq	r3, #1
 8007bc4:	4620      	mov	r0, r4
 8007bc6:	bf08      	it	eq
 8007bc8:	61a3      	streq	r3, [r4, #24]
 8007bca:	f000 f81f 	bl	8007c0c <__sfp>
 8007bce:	6060      	str	r0, [r4, #4]
 8007bd0:	4620      	mov	r0, r4
 8007bd2:	f000 f81b 	bl	8007c0c <__sfp>
 8007bd6:	60a0      	str	r0, [r4, #8]
 8007bd8:	4620      	mov	r0, r4
 8007bda:	f000 f817 	bl	8007c0c <__sfp>
 8007bde:	2200      	movs	r2, #0
 8007be0:	2104      	movs	r1, #4
 8007be2:	60e0      	str	r0, [r4, #12]
 8007be4:	6860      	ldr	r0, [r4, #4]
 8007be6:	f7ff ff81 	bl	8007aec <std>
 8007bea:	2201      	movs	r2, #1
 8007bec:	2109      	movs	r1, #9
 8007bee:	68a0      	ldr	r0, [r4, #8]
 8007bf0:	f7ff ff7c 	bl	8007aec <std>
 8007bf4:	2202      	movs	r2, #2
 8007bf6:	2112      	movs	r1, #18
 8007bf8:	68e0      	ldr	r0, [r4, #12]
 8007bfa:	f7ff ff77 	bl	8007aec <std>
 8007bfe:	2301      	movs	r3, #1
 8007c00:	61a3      	str	r3, [r4, #24]
 8007c02:	e7d1      	b.n	8007ba8 <__sinit+0xc>
 8007c04:	08009410 	.word	0x08009410
 8007c08:	08007b35 	.word	0x08007b35

08007c0c <__sfp>:
 8007c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c0e:	4607      	mov	r7, r0
 8007c10:	f7ff ffac 	bl	8007b6c <__sfp_lock_acquire>
 8007c14:	4b1e      	ldr	r3, [pc, #120]	; (8007c90 <__sfp+0x84>)
 8007c16:	681e      	ldr	r6, [r3, #0]
 8007c18:	69b3      	ldr	r3, [r6, #24]
 8007c1a:	b913      	cbnz	r3, 8007c22 <__sfp+0x16>
 8007c1c:	4630      	mov	r0, r6
 8007c1e:	f7ff ffbd 	bl	8007b9c <__sinit>
 8007c22:	3648      	adds	r6, #72	; 0x48
 8007c24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007c28:	3b01      	subs	r3, #1
 8007c2a:	d503      	bpl.n	8007c34 <__sfp+0x28>
 8007c2c:	6833      	ldr	r3, [r6, #0]
 8007c2e:	b30b      	cbz	r3, 8007c74 <__sfp+0x68>
 8007c30:	6836      	ldr	r6, [r6, #0]
 8007c32:	e7f7      	b.n	8007c24 <__sfp+0x18>
 8007c34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007c38:	b9d5      	cbnz	r5, 8007c70 <__sfp+0x64>
 8007c3a:	4b16      	ldr	r3, [pc, #88]	; (8007c94 <__sfp+0x88>)
 8007c3c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007c40:	60e3      	str	r3, [r4, #12]
 8007c42:	6665      	str	r5, [r4, #100]	; 0x64
 8007c44:	f000 f847 	bl	8007cd6 <__retarget_lock_init_recursive>
 8007c48:	f7ff ff96 	bl	8007b78 <__sfp_lock_release>
 8007c4c:	2208      	movs	r2, #8
 8007c4e:	4629      	mov	r1, r5
 8007c50:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007c54:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007c58:	6025      	str	r5, [r4, #0]
 8007c5a:	61a5      	str	r5, [r4, #24]
 8007c5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007c60:	f7ff ff28 	bl	8007ab4 <memset>
 8007c64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007c68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007c6c:	4620      	mov	r0, r4
 8007c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c70:	3468      	adds	r4, #104	; 0x68
 8007c72:	e7d9      	b.n	8007c28 <__sfp+0x1c>
 8007c74:	2104      	movs	r1, #4
 8007c76:	4638      	mov	r0, r7
 8007c78:	f7ff ff62 	bl	8007b40 <__sfmoreglue>
 8007c7c:	4604      	mov	r4, r0
 8007c7e:	6030      	str	r0, [r6, #0]
 8007c80:	2800      	cmp	r0, #0
 8007c82:	d1d5      	bne.n	8007c30 <__sfp+0x24>
 8007c84:	f7ff ff78 	bl	8007b78 <__sfp_lock_release>
 8007c88:	230c      	movs	r3, #12
 8007c8a:	603b      	str	r3, [r7, #0]
 8007c8c:	e7ee      	b.n	8007c6c <__sfp+0x60>
 8007c8e:	bf00      	nop
 8007c90:	08009410 	.word	0x08009410
 8007c94:	ffff0001 	.word	0xffff0001

08007c98 <_fwalk_reent>:
 8007c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c9c:	4606      	mov	r6, r0
 8007c9e:	4688      	mov	r8, r1
 8007ca0:	2700      	movs	r7, #0
 8007ca2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007ca6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007caa:	f1b9 0901 	subs.w	r9, r9, #1
 8007cae:	d505      	bpl.n	8007cbc <_fwalk_reent+0x24>
 8007cb0:	6824      	ldr	r4, [r4, #0]
 8007cb2:	2c00      	cmp	r4, #0
 8007cb4:	d1f7      	bne.n	8007ca6 <_fwalk_reent+0xe>
 8007cb6:	4638      	mov	r0, r7
 8007cb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cbc:	89ab      	ldrh	r3, [r5, #12]
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d907      	bls.n	8007cd2 <_fwalk_reent+0x3a>
 8007cc2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	d003      	beq.n	8007cd2 <_fwalk_reent+0x3a>
 8007cca:	4629      	mov	r1, r5
 8007ccc:	4630      	mov	r0, r6
 8007cce:	47c0      	blx	r8
 8007cd0:	4307      	orrs	r7, r0
 8007cd2:	3568      	adds	r5, #104	; 0x68
 8007cd4:	e7e9      	b.n	8007caa <_fwalk_reent+0x12>

08007cd6 <__retarget_lock_init_recursive>:
 8007cd6:	4770      	bx	lr

08007cd8 <__retarget_lock_acquire_recursive>:
 8007cd8:	4770      	bx	lr

08007cda <__retarget_lock_release_recursive>:
 8007cda:	4770      	bx	lr

08007cdc <_malloc_r>:
 8007cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cde:	1ccd      	adds	r5, r1, #3
 8007ce0:	f025 0503 	bic.w	r5, r5, #3
 8007ce4:	3508      	adds	r5, #8
 8007ce6:	2d0c      	cmp	r5, #12
 8007ce8:	bf38      	it	cc
 8007cea:	250c      	movcc	r5, #12
 8007cec:	2d00      	cmp	r5, #0
 8007cee:	4606      	mov	r6, r0
 8007cf0:	db01      	blt.n	8007cf6 <_malloc_r+0x1a>
 8007cf2:	42a9      	cmp	r1, r5
 8007cf4:	d903      	bls.n	8007cfe <_malloc_r+0x22>
 8007cf6:	230c      	movs	r3, #12
 8007cf8:	6033      	str	r3, [r6, #0]
 8007cfa:	2000      	movs	r0, #0
 8007cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cfe:	f000 fafd 	bl	80082fc <__malloc_lock>
 8007d02:	4921      	ldr	r1, [pc, #132]	; (8007d88 <_malloc_r+0xac>)
 8007d04:	680a      	ldr	r2, [r1, #0]
 8007d06:	4614      	mov	r4, r2
 8007d08:	b99c      	cbnz	r4, 8007d32 <_malloc_r+0x56>
 8007d0a:	4f20      	ldr	r7, [pc, #128]	; (8007d8c <_malloc_r+0xb0>)
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	b923      	cbnz	r3, 8007d1a <_malloc_r+0x3e>
 8007d10:	4621      	mov	r1, r4
 8007d12:	4630      	mov	r0, r6
 8007d14:	f000 f884 	bl	8007e20 <_sbrk_r>
 8007d18:	6038      	str	r0, [r7, #0]
 8007d1a:	4629      	mov	r1, r5
 8007d1c:	4630      	mov	r0, r6
 8007d1e:	f000 f87f 	bl	8007e20 <_sbrk_r>
 8007d22:	1c43      	adds	r3, r0, #1
 8007d24:	d123      	bne.n	8007d6e <_malloc_r+0x92>
 8007d26:	230c      	movs	r3, #12
 8007d28:	4630      	mov	r0, r6
 8007d2a:	6033      	str	r3, [r6, #0]
 8007d2c:	f000 faec 	bl	8008308 <__malloc_unlock>
 8007d30:	e7e3      	b.n	8007cfa <_malloc_r+0x1e>
 8007d32:	6823      	ldr	r3, [r4, #0]
 8007d34:	1b5b      	subs	r3, r3, r5
 8007d36:	d417      	bmi.n	8007d68 <_malloc_r+0x8c>
 8007d38:	2b0b      	cmp	r3, #11
 8007d3a:	d903      	bls.n	8007d44 <_malloc_r+0x68>
 8007d3c:	6023      	str	r3, [r4, #0]
 8007d3e:	441c      	add	r4, r3
 8007d40:	6025      	str	r5, [r4, #0]
 8007d42:	e004      	b.n	8007d4e <_malloc_r+0x72>
 8007d44:	6863      	ldr	r3, [r4, #4]
 8007d46:	42a2      	cmp	r2, r4
 8007d48:	bf0c      	ite	eq
 8007d4a:	600b      	streq	r3, [r1, #0]
 8007d4c:	6053      	strne	r3, [r2, #4]
 8007d4e:	4630      	mov	r0, r6
 8007d50:	f000 fada 	bl	8008308 <__malloc_unlock>
 8007d54:	f104 000b 	add.w	r0, r4, #11
 8007d58:	1d23      	adds	r3, r4, #4
 8007d5a:	f020 0007 	bic.w	r0, r0, #7
 8007d5e:	1ac2      	subs	r2, r0, r3
 8007d60:	d0cc      	beq.n	8007cfc <_malloc_r+0x20>
 8007d62:	1a1b      	subs	r3, r3, r0
 8007d64:	50a3      	str	r3, [r4, r2]
 8007d66:	e7c9      	b.n	8007cfc <_malloc_r+0x20>
 8007d68:	4622      	mov	r2, r4
 8007d6a:	6864      	ldr	r4, [r4, #4]
 8007d6c:	e7cc      	b.n	8007d08 <_malloc_r+0x2c>
 8007d6e:	1cc4      	adds	r4, r0, #3
 8007d70:	f024 0403 	bic.w	r4, r4, #3
 8007d74:	42a0      	cmp	r0, r4
 8007d76:	d0e3      	beq.n	8007d40 <_malloc_r+0x64>
 8007d78:	1a21      	subs	r1, r4, r0
 8007d7a:	4630      	mov	r0, r6
 8007d7c:	f000 f850 	bl	8007e20 <_sbrk_r>
 8007d80:	3001      	adds	r0, #1
 8007d82:	d1dd      	bne.n	8007d40 <_malloc_r+0x64>
 8007d84:	e7cf      	b.n	8007d26 <_malloc_r+0x4a>
 8007d86:	bf00      	nop
 8007d88:	20000218 	.word	0x20000218
 8007d8c:	2000021c 	.word	0x2000021c

08007d90 <_putc_r>:
 8007d90:	b570      	push	{r4, r5, r6, lr}
 8007d92:	460d      	mov	r5, r1
 8007d94:	4614      	mov	r4, r2
 8007d96:	4606      	mov	r6, r0
 8007d98:	b118      	cbz	r0, 8007da2 <_putc_r+0x12>
 8007d9a:	6983      	ldr	r3, [r0, #24]
 8007d9c:	b90b      	cbnz	r3, 8007da2 <_putc_r+0x12>
 8007d9e:	f7ff fefd 	bl	8007b9c <__sinit>
 8007da2:	4b1c      	ldr	r3, [pc, #112]	; (8007e14 <_putc_r+0x84>)
 8007da4:	429c      	cmp	r4, r3
 8007da6:	d124      	bne.n	8007df2 <_putc_r+0x62>
 8007da8:	6874      	ldr	r4, [r6, #4]
 8007daa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007dac:	07d8      	lsls	r0, r3, #31
 8007dae:	d405      	bmi.n	8007dbc <_putc_r+0x2c>
 8007db0:	89a3      	ldrh	r3, [r4, #12]
 8007db2:	0599      	lsls	r1, r3, #22
 8007db4:	d402      	bmi.n	8007dbc <_putc_r+0x2c>
 8007db6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007db8:	f7ff ff8e 	bl	8007cd8 <__retarget_lock_acquire_recursive>
 8007dbc:	68a3      	ldr	r3, [r4, #8]
 8007dbe:	3b01      	subs	r3, #1
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	60a3      	str	r3, [r4, #8]
 8007dc4:	da05      	bge.n	8007dd2 <_putc_r+0x42>
 8007dc6:	69a2      	ldr	r2, [r4, #24]
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	db1c      	blt.n	8007e06 <_putc_r+0x76>
 8007dcc:	b2eb      	uxtb	r3, r5
 8007dce:	2b0a      	cmp	r3, #10
 8007dd0:	d019      	beq.n	8007e06 <_putc_r+0x76>
 8007dd2:	6823      	ldr	r3, [r4, #0]
 8007dd4:	1c5a      	adds	r2, r3, #1
 8007dd6:	6022      	str	r2, [r4, #0]
 8007dd8:	701d      	strb	r5, [r3, #0]
 8007dda:	b2ed      	uxtb	r5, r5
 8007ddc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007dde:	07da      	lsls	r2, r3, #31
 8007de0:	d405      	bmi.n	8007dee <_putc_r+0x5e>
 8007de2:	89a3      	ldrh	r3, [r4, #12]
 8007de4:	059b      	lsls	r3, r3, #22
 8007de6:	d402      	bmi.n	8007dee <_putc_r+0x5e>
 8007de8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dea:	f7ff ff76 	bl	8007cda <__retarget_lock_release_recursive>
 8007dee:	4628      	mov	r0, r5
 8007df0:	bd70      	pop	{r4, r5, r6, pc}
 8007df2:	4b09      	ldr	r3, [pc, #36]	; (8007e18 <_putc_r+0x88>)
 8007df4:	429c      	cmp	r4, r3
 8007df6:	d101      	bne.n	8007dfc <_putc_r+0x6c>
 8007df8:	68b4      	ldr	r4, [r6, #8]
 8007dfa:	e7d6      	b.n	8007daa <_putc_r+0x1a>
 8007dfc:	4b07      	ldr	r3, [pc, #28]	; (8007e1c <_putc_r+0x8c>)
 8007dfe:	429c      	cmp	r4, r3
 8007e00:	bf08      	it	eq
 8007e02:	68f4      	ldreq	r4, [r6, #12]
 8007e04:	e7d1      	b.n	8007daa <_putc_r+0x1a>
 8007e06:	4629      	mov	r1, r5
 8007e08:	4622      	mov	r2, r4
 8007e0a:	4630      	mov	r0, r6
 8007e0c:	f000 f85c 	bl	8007ec8 <__swbuf_r>
 8007e10:	4605      	mov	r5, r0
 8007e12:	e7e3      	b.n	8007ddc <_putc_r+0x4c>
 8007e14:	08009434 	.word	0x08009434
 8007e18:	08009454 	.word	0x08009454
 8007e1c:	08009414 	.word	0x08009414

08007e20 <_sbrk_r>:
 8007e20:	b538      	push	{r3, r4, r5, lr}
 8007e22:	2300      	movs	r3, #0
 8007e24:	4d05      	ldr	r5, [pc, #20]	; (8007e3c <_sbrk_r+0x1c>)
 8007e26:	4604      	mov	r4, r0
 8007e28:	4608      	mov	r0, r1
 8007e2a:	602b      	str	r3, [r5, #0]
 8007e2c:	f7f9 fa5a 	bl	80012e4 <_sbrk>
 8007e30:	1c43      	adds	r3, r0, #1
 8007e32:	d102      	bne.n	8007e3a <_sbrk_r+0x1a>
 8007e34:	682b      	ldr	r3, [r5, #0]
 8007e36:	b103      	cbz	r3, 8007e3a <_sbrk_r+0x1a>
 8007e38:	6023      	str	r3, [r4, #0]
 8007e3a:	bd38      	pop	{r3, r4, r5, pc}
 8007e3c:	200009e0 	.word	0x200009e0

08007e40 <__sread>:
 8007e40:	b510      	push	{r4, lr}
 8007e42:	460c      	mov	r4, r1
 8007e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e48:	f000 fab0 	bl	80083ac <_read_r>
 8007e4c:	2800      	cmp	r0, #0
 8007e4e:	bfab      	itete	ge
 8007e50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007e52:	89a3      	ldrhlt	r3, [r4, #12]
 8007e54:	181b      	addge	r3, r3, r0
 8007e56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007e5a:	bfac      	ite	ge
 8007e5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007e5e:	81a3      	strhlt	r3, [r4, #12]
 8007e60:	bd10      	pop	{r4, pc}

08007e62 <__swrite>:
 8007e62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e66:	461f      	mov	r7, r3
 8007e68:	898b      	ldrh	r3, [r1, #12]
 8007e6a:	4605      	mov	r5, r0
 8007e6c:	05db      	lsls	r3, r3, #23
 8007e6e:	460c      	mov	r4, r1
 8007e70:	4616      	mov	r6, r2
 8007e72:	d505      	bpl.n	8007e80 <__swrite+0x1e>
 8007e74:	2302      	movs	r3, #2
 8007e76:	2200      	movs	r2, #0
 8007e78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e7c:	f000 f9c8 	bl	8008210 <_lseek_r>
 8007e80:	89a3      	ldrh	r3, [r4, #12]
 8007e82:	4632      	mov	r2, r6
 8007e84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e88:	81a3      	strh	r3, [r4, #12]
 8007e8a:	4628      	mov	r0, r5
 8007e8c:	463b      	mov	r3, r7
 8007e8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e96:	f000 b869 	b.w	8007f6c <_write_r>

08007e9a <__sseek>:
 8007e9a:	b510      	push	{r4, lr}
 8007e9c:	460c      	mov	r4, r1
 8007e9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ea2:	f000 f9b5 	bl	8008210 <_lseek_r>
 8007ea6:	1c43      	adds	r3, r0, #1
 8007ea8:	89a3      	ldrh	r3, [r4, #12]
 8007eaa:	bf15      	itete	ne
 8007eac:	6560      	strne	r0, [r4, #84]	; 0x54
 8007eae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007eb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007eb6:	81a3      	strheq	r3, [r4, #12]
 8007eb8:	bf18      	it	ne
 8007eba:	81a3      	strhne	r3, [r4, #12]
 8007ebc:	bd10      	pop	{r4, pc}

08007ebe <__sclose>:
 8007ebe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ec2:	f000 b8d3 	b.w	800806c <_close_r>
	...

08007ec8 <__swbuf_r>:
 8007ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eca:	460e      	mov	r6, r1
 8007ecc:	4614      	mov	r4, r2
 8007ece:	4605      	mov	r5, r0
 8007ed0:	b118      	cbz	r0, 8007eda <__swbuf_r+0x12>
 8007ed2:	6983      	ldr	r3, [r0, #24]
 8007ed4:	b90b      	cbnz	r3, 8007eda <__swbuf_r+0x12>
 8007ed6:	f7ff fe61 	bl	8007b9c <__sinit>
 8007eda:	4b21      	ldr	r3, [pc, #132]	; (8007f60 <__swbuf_r+0x98>)
 8007edc:	429c      	cmp	r4, r3
 8007ede:	d12b      	bne.n	8007f38 <__swbuf_r+0x70>
 8007ee0:	686c      	ldr	r4, [r5, #4]
 8007ee2:	69a3      	ldr	r3, [r4, #24]
 8007ee4:	60a3      	str	r3, [r4, #8]
 8007ee6:	89a3      	ldrh	r3, [r4, #12]
 8007ee8:	071a      	lsls	r2, r3, #28
 8007eea:	d52f      	bpl.n	8007f4c <__swbuf_r+0x84>
 8007eec:	6923      	ldr	r3, [r4, #16]
 8007eee:	b36b      	cbz	r3, 8007f4c <__swbuf_r+0x84>
 8007ef0:	6923      	ldr	r3, [r4, #16]
 8007ef2:	6820      	ldr	r0, [r4, #0]
 8007ef4:	b2f6      	uxtb	r6, r6
 8007ef6:	1ac0      	subs	r0, r0, r3
 8007ef8:	6963      	ldr	r3, [r4, #20]
 8007efa:	4637      	mov	r7, r6
 8007efc:	4283      	cmp	r3, r0
 8007efe:	dc04      	bgt.n	8007f0a <__swbuf_r+0x42>
 8007f00:	4621      	mov	r1, r4
 8007f02:	4628      	mov	r0, r5
 8007f04:	f000 f948 	bl	8008198 <_fflush_r>
 8007f08:	bb30      	cbnz	r0, 8007f58 <__swbuf_r+0x90>
 8007f0a:	68a3      	ldr	r3, [r4, #8]
 8007f0c:	3001      	adds	r0, #1
 8007f0e:	3b01      	subs	r3, #1
 8007f10:	60a3      	str	r3, [r4, #8]
 8007f12:	6823      	ldr	r3, [r4, #0]
 8007f14:	1c5a      	adds	r2, r3, #1
 8007f16:	6022      	str	r2, [r4, #0]
 8007f18:	701e      	strb	r6, [r3, #0]
 8007f1a:	6963      	ldr	r3, [r4, #20]
 8007f1c:	4283      	cmp	r3, r0
 8007f1e:	d004      	beq.n	8007f2a <__swbuf_r+0x62>
 8007f20:	89a3      	ldrh	r3, [r4, #12]
 8007f22:	07db      	lsls	r3, r3, #31
 8007f24:	d506      	bpl.n	8007f34 <__swbuf_r+0x6c>
 8007f26:	2e0a      	cmp	r6, #10
 8007f28:	d104      	bne.n	8007f34 <__swbuf_r+0x6c>
 8007f2a:	4621      	mov	r1, r4
 8007f2c:	4628      	mov	r0, r5
 8007f2e:	f000 f933 	bl	8008198 <_fflush_r>
 8007f32:	b988      	cbnz	r0, 8007f58 <__swbuf_r+0x90>
 8007f34:	4638      	mov	r0, r7
 8007f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f38:	4b0a      	ldr	r3, [pc, #40]	; (8007f64 <__swbuf_r+0x9c>)
 8007f3a:	429c      	cmp	r4, r3
 8007f3c:	d101      	bne.n	8007f42 <__swbuf_r+0x7a>
 8007f3e:	68ac      	ldr	r4, [r5, #8]
 8007f40:	e7cf      	b.n	8007ee2 <__swbuf_r+0x1a>
 8007f42:	4b09      	ldr	r3, [pc, #36]	; (8007f68 <__swbuf_r+0xa0>)
 8007f44:	429c      	cmp	r4, r3
 8007f46:	bf08      	it	eq
 8007f48:	68ec      	ldreq	r4, [r5, #12]
 8007f4a:	e7ca      	b.n	8007ee2 <__swbuf_r+0x1a>
 8007f4c:	4621      	mov	r1, r4
 8007f4e:	4628      	mov	r0, r5
 8007f50:	f000 f81e 	bl	8007f90 <__swsetup_r>
 8007f54:	2800      	cmp	r0, #0
 8007f56:	d0cb      	beq.n	8007ef0 <__swbuf_r+0x28>
 8007f58:	f04f 37ff 	mov.w	r7, #4294967295
 8007f5c:	e7ea      	b.n	8007f34 <__swbuf_r+0x6c>
 8007f5e:	bf00      	nop
 8007f60:	08009434 	.word	0x08009434
 8007f64:	08009454 	.word	0x08009454
 8007f68:	08009414 	.word	0x08009414

08007f6c <_write_r>:
 8007f6c:	b538      	push	{r3, r4, r5, lr}
 8007f6e:	4604      	mov	r4, r0
 8007f70:	4608      	mov	r0, r1
 8007f72:	4611      	mov	r1, r2
 8007f74:	2200      	movs	r2, #0
 8007f76:	4d05      	ldr	r5, [pc, #20]	; (8007f8c <_write_r+0x20>)
 8007f78:	602a      	str	r2, [r5, #0]
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	f7f9 f965 	bl	800124a <_write>
 8007f80:	1c43      	adds	r3, r0, #1
 8007f82:	d102      	bne.n	8007f8a <_write_r+0x1e>
 8007f84:	682b      	ldr	r3, [r5, #0]
 8007f86:	b103      	cbz	r3, 8007f8a <_write_r+0x1e>
 8007f88:	6023      	str	r3, [r4, #0]
 8007f8a:	bd38      	pop	{r3, r4, r5, pc}
 8007f8c:	200009e0 	.word	0x200009e0

08007f90 <__swsetup_r>:
 8007f90:	4b32      	ldr	r3, [pc, #200]	; (800805c <__swsetup_r+0xcc>)
 8007f92:	b570      	push	{r4, r5, r6, lr}
 8007f94:	681d      	ldr	r5, [r3, #0]
 8007f96:	4606      	mov	r6, r0
 8007f98:	460c      	mov	r4, r1
 8007f9a:	b125      	cbz	r5, 8007fa6 <__swsetup_r+0x16>
 8007f9c:	69ab      	ldr	r3, [r5, #24]
 8007f9e:	b913      	cbnz	r3, 8007fa6 <__swsetup_r+0x16>
 8007fa0:	4628      	mov	r0, r5
 8007fa2:	f7ff fdfb 	bl	8007b9c <__sinit>
 8007fa6:	4b2e      	ldr	r3, [pc, #184]	; (8008060 <__swsetup_r+0xd0>)
 8007fa8:	429c      	cmp	r4, r3
 8007faa:	d10f      	bne.n	8007fcc <__swsetup_r+0x3c>
 8007fac:	686c      	ldr	r4, [r5, #4]
 8007fae:	89a3      	ldrh	r3, [r4, #12]
 8007fb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007fb4:	0719      	lsls	r1, r3, #28
 8007fb6:	d42c      	bmi.n	8008012 <__swsetup_r+0x82>
 8007fb8:	06dd      	lsls	r5, r3, #27
 8007fba:	d411      	bmi.n	8007fe0 <__swsetup_r+0x50>
 8007fbc:	2309      	movs	r3, #9
 8007fbe:	6033      	str	r3, [r6, #0]
 8007fc0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fc8:	81a3      	strh	r3, [r4, #12]
 8007fca:	e03e      	b.n	800804a <__swsetup_r+0xba>
 8007fcc:	4b25      	ldr	r3, [pc, #148]	; (8008064 <__swsetup_r+0xd4>)
 8007fce:	429c      	cmp	r4, r3
 8007fd0:	d101      	bne.n	8007fd6 <__swsetup_r+0x46>
 8007fd2:	68ac      	ldr	r4, [r5, #8]
 8007fd4:	e7eb      	b.n	8007fae <__swsetup_r+0x1e>
 8007fd6:	4b24      	ldr	r3, [pc, #144]	; (8008068 <__swsetup_r+0xd8>)
 8007fd8:	429c      	cmp	r4, r3
 8007fda:	bf08      	it	eq
 8007fdc:	68ec      	ldreq	r4, [r5, #12]
 8007fde:	e7e6      	b.n	8007fae <__swsetup_r+0x1e>
 8007fe0:	0758      	lsls	r0, r3, #29
 8007fe2:	d512      	bpl.n	800800a <__swsetup_r+0x7a>
 8007fe4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fe6:	b141      	cbz	r1, 8007ffa <__swsetup_r+0x6a>
 8007fe8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fec:	4299      	cmp	r1, r3
 8007fee:	d002      	beq.n	8007ff6 <__swsetup_r+0x66>
 8007ff0:	4630      	mov	r0, r6
 8007ff2:	f000 f98f 	bl	8008314 <_free_r>
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	6363      	str	r3, [r4, #52]	; 0x34
 8007ffa:	89a3      	ldrh	r3, [r4, #12]
 8007ffc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008000:	81a3      	strh	r3, [r4, #12]
 8008002:	2300      	movs	r3, #0
 8008004:	6063      	str	r3, [r4, #4]
 8008006:	6923      	ldr	r3, [r4, #16]
 8008008:	6023      	str	r3, [r4, #0]
 800800a:	89a3      	ldrh	r3, [r4, #12]
 800800c:	f043 0308 	orr.w	r3, r3, #8
 8008010:	81a3      	strh	r3, [r4, #12]
 8008012:	6923      	ldr	r3, [r4, #16]
 8008014:	b94b      	cbnz	r3, 800802a <__swsetup_r+0x9a>
 8008016:	89a3      	ldrh	r3, [r4, #12]
 8008018:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800801c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008020:	d003      	beq.n	800802a <__swsetup_r+0x9a>
 8008022:	4621      	mov	r1, r4
 8008024:	4630      	mov	r0, r6
 8008026:	f000 f929 	bl	800827c <__smakebuf_r>
 800802a:	89a0      	ldrh	r0, [r4, #12]
 800802c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008030:	f010 0301 	ands.w	r3, r0, #1
 8008034:	d00a      	beq.n	800804c <__swsetup_r+0xbc>
 8008036:	2300      	movs	r3, #0
 8008038:	60a3      	str	r3, [r4, #8]
 800803a:	6963      	ldr	r3, [r4, #20]
 800803c:	425b      	negs	r3, r3
 800803e:	61a3      	str	r3, [r4, #24]
 8008040:	6923      	ldr	r3, [r4, #16]
 8008042:	b943      	cbnz	r3, 8008056 <__swsetup_r+0xc6>
 8008044:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008048:	d1ba      	bne.n	8007fc0 <__swsetup_r+0x30>
 800804a:	bd70      	pop	{r4, r5, r6, pc}
 800804c:	0781      	lsls	r1, r0, #30
 800804e:	bf58      	it	pl
 8008050:	6963      	ldrpl	r3, [r4, #20]
 8008052:	60a3      	str	r3, [r4, #8]
 8008054:	e7f4      	b.n	8008040 <__swsetup_r+0xb0>
 8008056:	2000      	movs	r0, #0
 8008058:	e7f7      	b.n	800804a <__swsetup_r+0xba>
 800805a:	bf00      	nop
 800805c:	20000170 	.word	0x20000170
 8008060:	08009434 	.word	0x08009434
 8008064:	08009454 	.word	0x08009454
 8008068:	08009414 	.word	0x08009414

0800806c <_close_r>:
 800806c:	b538      	push	{r3, r4, r5, lr}
 800806e:	2300      	movs	r3, #0
 8008070:	4d05      	ldr	r5, [pc, #20]	; (8008088 <_close_r+0x1c>)
 8008072:	4604      	mov	r4, r0
 8008074:	4608      	mov	r0, r1
 8008076:	602b      	str	r3, [r5, #0]
 8008078:	f7f9 f903 	bl	8001282 <_close>
 800807c:	1c43      	adds	r3, r0, #1
 800807e:	d102      	bne.n	8008086 <_close_r+0x1a>
 8008080:	682b      	ldr	r3, [r5, #0]
 8008082:	b103      	cbz	r3, 8008086 <_close_r+0x1a>
 8008084:	6023      	str	r3, [r4, #0]
 8008086:	bd38      	pop	{r3, r4, r5, pc}
 8008088:	200009e0 	.word	0x200009e0

0800808c <__sflush_r>:
 800808c:	898a      	ldrh	r2, [r1, #12]
 800808e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008092:	4605      	mov	r5, r0
 8008094:	0710      	lsls	r0, r2, #28
 8008096:	460c      	mov	r4, r1
 8008098:	d458      	bmi.n	800814c <__sflush_r+0xc0>
 800809a:	684b      	ldr	r3, [r1, #4]
 800809c:	2b00      	cmp	r3, #0
 800809e:	dc05      	bgt.n	80080ac <__sflush_r+0x20>
 80080a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	dc02      	bgt.n	80080ac <__sflush_r+0x20>
 80080a6:	2000      	movs	r0, #0
 80080a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080ae:	2e00      	cmp	r6, #0
 80080b0:	d0f9      	beq.n	80080a6 <__sflush_r+0x1a>
 80080b2:	2300      	movs	r3, #0
 80080b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80080b8:	682f      	ldr	r7, [r5, #0]
 80080ba:	602b      	str	r3, [r5, #0]
 80080bc:	d032      	beq.n	8008124 <__sflush_r+0x98>
 80080be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80080c0:	89a3      	ldrh	r3, [r4, #12]
 80080c2:	075a      	lsls	r2, r3, #29
 80080c4:	d505      	bpl.n	80080d2 <__sflush_r+0x46>
 80080c6:	6863      	ldr	r3, [r4, #4]
 80080c8:	1ac0      	subs	r0, r0, r3
 80080ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80080cc:	b10b      	cbz	r3, 80080d2 <__sflush_r+0x46>
 80080ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80080d0:	1ac0      	subs	r0, r0, r3
 80080d2:	2300      	movs	r3, #0
 80080d4:	4602      	mov	r2, r0
 80080d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080d8:	4628      	mov	r0, r5
 80080da:	6a21      	ldr	r1, [r4, #32]
 80080dc:	47b0      	blx	r6
 80080de:	1c43      	adds	r3, r0, #1
 80080e0:	89a3      	ldrh	r3, [r4, #12]
 80080e2:	d106      	bne.n	80080f2 <__sflush_r+0x66>
 80080e4:	6829      	ldr	r1, [r5, #0]
 80080e6:	291d      	cmp	r1, #29
 80080e8:	d82c      	bhi.n	8008144 <__sflush_r+0xb8>
 80080ea:	4a2a      	ldr	r2, [pc, #168]	; (8008194 <__sflush_r+0x108>)
 80080ec:	40ca      	lsrs	r2, r1
 80080ee:	07d6      	lsls	r6, r2, #31
 80080f0:	d528      	bpl.n	8008144 <__sflush_r+0xb8>
 80080f2:	2200      	movs	r2, #0
 80080f4:	6062      	str	r2, [r4, #4]
 80080f6:	6922      	ldr	r2, [r4, #16]
 80080f8:	04d9      	lsls	r1, r3, #19
 80080fa:	6022      	str	r2, [r4, #0]
 80080fc:	d504      	bpl.n	8008108 <__sflush_r+0x7c>
 80080fe:	1c42      	adds	r2, r0, #1
 8008100:	d101      	bne.n	8008106 <__sflush_r+0x7a>
 8008102:	682b      	ldr	r3, [r5, #0]
 8008104:	b903      	cbnz	r3, 8008108 <__sflush_r+0x7c>
 8008106:	6560      	str	r0, [r4, #84]	; 0x54
 8008108:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800810a:	602f      	str	r7, [r5, #0]
 800810c:	2900      	cmp	r1, #0
 800810e:	d0ca      	beq.n	80080a6 <__sflush_r+0x1a>
 8008110:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008114:	4299      	cmp	r1, r3
 8008116:	d002      	beq.n	800811e <__sflush_r+0x92>
 8008118:	4628      	mov	r0, r5
 800811a:	f000 f8fb 	bl	8008314 <_free_r>
 800811e:	2000      	movs	r0, #0
 8008120:	6360      	str	r0, [r4, #52]	; 0x34
 8008122:	e7c1      	b.n	80080a8 <__sflush_r+0x1c>
 8008124:	6a21      	ldr	r1, [r4, #32]
 8008126:	2301      	movs	r3, #1
 8008128:	4628      	mov	r0, r5
 800812a:	47b0      	blx	r6
 800812c:	1c41      	adds	r1, r0, #1
 800812e:	d1c7      	bne.n	80080c0 <__sflush_r+0x34>
 8008130:	682b      	ldr	r3, [r5, #0]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d0c4      	beq.n	80080c0 <__sflush_r+0x34>
 8008136:	2b1d      	cmp	r3, #29
 8008138:	d001      	beq.n	800813e <__sflush_r+0xb2>
 800813a:	2b16      	cmp	r3, #22
 800813c:	d101      	bne.n	8008142 <__sflush_r+0xb6>
 800813e:	602f      	str	r7, [r5, #0]
 8008140:	e7b1      	b.n	80080a6 <__sflush_r+0x1a>
 8008142:	89a3      	ldrh	r3, [r4, #12]
 8008144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008148:	81a3      	strh	r3, [r4, #12]
 800814a:	e7ad      	b.n	80080a8 <__sflush_r+0x1c>
 800814c:	690f      	ldr	r7, [r1, #16]
 800814e:	2f00      	cmp	r7, #0
 8008150:	d0a9      	beq.n	80080a6 <__sflush_r+0x1a>
 8008152:	0793      	lsls	r3, r2, #30
 8008154:	bf18      	it	ne
 8008156:	2300      	movne	r3, #0
 8008158:	680e      	ldr	r6, [r1, #0]
 800815a:	bf08      	it	eq
 800815c:	694b      	ldreq	r3, [r1, #20]
 800815e:	eba6 0807 	sub.w	r8, r6, r7
 8008162:	600f      	str	r7, [r1, #0]
 8008164:	608b      	str	r3, [r1, #8]
 8008166:	f1b8 0f00 	cmp.w	r8, #0
 800816a:	dd9c      	ble.n	80080a6 <__sflush_r+0x1a>
 800816c:	4643      	mov	r3, r8
 800816e:	463a      	mov	r2, r7
 8008170:	4628      	mov	r0, r5
 8008172:	6a21      	ldr	r1, [r4, #32]
 8008174:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008176:	47b0      	blx	r6
 8008178:	2800      	cmp	r0, #0
 800817a:	dc06      	bgt.n	800818a <__sflush_r+0xfe>
 800817c:	89a3      	ldrh	r3, [r4, #12]
 800817e:	f04f 30ff 	mov.w	r0, #4294967295
 8008182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008186:	81a3      	strh	r3, [r4, #12]
 8008188:	e78e      	b.n	80080a8 <__sflush_r+0x1c>
 800818a:	4407      	add	r7, r0
 800818c:	eba8 0800 	sub.w	r8, r8, r0
 8008190:	e7e9      	b.n	8008166 <__sflush_r+0xda>
 8008192:	bf00      	nop
 8008194:	20400001 	.word	0x20400001

08008198 <_fflush_r>:
 8008198:	b538      	push	{r3, r4, r5, lr}
 800819a:	690b      	ldr	r3, [r1, #16]
 800819c:	4605      	mov	r5, r0
 800819e:	460c      	mov	r4, r1
 80081a0:	b913      	cbnz	r3, 80081a8 <_fflush_r+0x10>
 80081a2:	2500      	movs	r5, #0
 80081a4:	4628      	mov	r0, r5
 80081a6:	bd38      	pop	{r3, r4, r5, pc}
 80081a8:	b118      	cbz	r0, 80081b2 <_fflush_r+0x1a>
 80081aa:	6983      	ldr	r3, [r0, #24]
 80081ac:	b90b      	cbnz	r3, 80081b2 <_fflush_r+0x1a>
 80081ae:	f7ff fcf5 	bl	8007b9c <__sinit>
 80081b2:	4b14      	ldr	r3, [pc, #80]	; (8008204 <_fflush_r+0x6c>)
 80081b4:	429c      	cmp	r4, r3
 80081b6:	d11b      	bne.n	80081f0 <_fflush_r+0x58>
 80081b8:	686c      	ldr	r4, [r5, #4]
 80081ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d0ef      	beq.n	80081a2 <_fflush_r+0xa>
 80081c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80081c4:	07d0      	lsls	r0, r2, #31
 80081c6:	d404      	bmi.n	80081d2 <_fflush_r+0x3a>
 80081c8:	0599      	lsls	r1, r3, #22
 80081ca:	d402      	bmi.n	80081d2 <_fflush_r+0x3a>
 80081cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081ce:	f7ff fd83 	bl	8007cd8 <__retarget_lock_acquire_recursive>
 80081d2:	4628      	mov	r0, r5
 80081d4:	4621      	mov	r1, r4
 80081d6:	f7ff ff59 	bl	800808c <__sflush_r>
 80081da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081dc:	4605      	mov	r5, r0
 80081de:	07da      	lsls	r2, r3, #31
 80081e0:	d4e0      	bmi.n	80081a4 <_fflush_r+0xc>
 80081e2:	89a3      	ldrh	r3, [r4, #12]
 80081e4:	059b      	lsls	r3, r3, #22
 80081e6:	d4dd      	bmi.n	80081a4 <_fflush_r+0xc>
 80081e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081ea:	f7ff fd76 	bl	8007cda <__retarget_lock_release_recursive>
 80081ee:	e7d9      	b.n	80081a4 <_fflush_r+0xc>
 80081f0:	4b05      	ldr	r3, [pc, #20]	; (8008208 <_fflush_r+0x70>)
 80081f2:	429c      	cmp	r4, r3
 80081f4:	d101      	bne.n	80081fa <_fflush_r+0x62>
 80081f6:	68ac      	ldr	r4, [r5, #8]
 80081f8:	e7df      	b.n	80081ba <_fflush_r+0x22>
 80081fa:	4b04      	ldr	r3, [pc, #16]	; (800820c <_fflush_r+0x74>)
 80081fc:	429c      	cmp	r4, r3
 80081fe:	bf08      	it	eq
 8008200:	68ec      	ldreq	r4, [r5, #12]
 8008202:	e7da      	b.n	80081ba <_fflush_r+0x22>
 8008204:	08009434 	.word	0x08009434
 8008208:	08009454 	.word	0x08009454
 800820c:	08009414 	.word	0x08009414

08008210 <_lseek_r>:
 8008210:	b538      	push	{r3, r4, r5, lr}
 8008212:	4604      	mov	r4, r0
 8008214:	4608      	mov	r0, r1
 8008216:	4611      	mov	r1, r2
 8008218:	2200      	movs	r2, #0
 800821a:	4d05      	ldr	r5, [pc, #20]	; (8008230 <_lseek_r+0x20>)
 800821c:	602a      	str	r2, [r5, #0]
 800821e:	461a      	mov	r2, r3
 8008220:	f7f9 f853 	bl	80012ca <_lseek>
 8008224:	1c43      	adds	r3, r0, #1
 8008226:	d102      	bne.n	800822e <_lseek_r+0x1e>
 8008228:	682b      	ldr	r3, [r5, #0]
 800822a:	b103      	cbz	r3, 800822e <_lseek_r+0x1e>
 800822c:	6023      	str	r3, [r4, #0]
 800822e:	bd38      	pop	{r3, r4, r5, pc}
 8008230:	200009e0 	.word	0x200009e0

08008234 <__swhatbuf_r>:
 8008234:	b570      	push	{r4, r5, r6, lr}
 8008236:	460e      	mov	r6, r1
 8008238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800823c:	4614      	mov	r4, r2
 800823e:	2900      	cmp	r1, #0
 8008240:	461d      	mov	r5, r3
 8008242:	b096      	sub	sp, #88	; 0x58
 8008244:	da07      	bge.n	8008256 <__swhatbuf_r+0x22>
 8008246:	2300      	movs	r3, #0
 8008248:	602b      	str	r3, [r5, #0]
 800824a:	89b3      	ldrh	r3, [r6, #12]
 800824c:	061a      	lsls	r2, r3, #24
 800824e:	d410      	bmi.n	8008272 <__swhatbuf_r+0x3e>
 8008250:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008254:	e00e      	b.n	8008274 <__swhatbuf_r+0x40>
 8008256:	466a      	mov	r2, sp
 8008258:	f000 f8ba 	bl	80083d0 <_fstat_r>
 800825c:	2800      	cmp	r0, #0
 800825e:	dbf2      	blt.n	8008246 <__swhatbuf_r+0x12>
 8008260:	9a01      	ldr	r2, [sp, #4]
 8008262:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008266:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800826a:	425a      	negs	r2, r3
 800826c:	415a      	adcs	r2, r3
 800826e:	602a      	str	r2, [r5, #0]
 8008270:	e7ee      	b.n	8008250 <__swhatbuf_r+0x1c>
 8008272:	2340      	movs	r3, #64	; 0x40
 8008274:	2000      	movs	r0, #0
 8008276:	6023      	str	r3, [r4, #0]
 8008278:	b016      	add	sp, #88	; 0x58
 800827a:	bd70      	pop	{r4, r5, r6, pc}

0800827c <__smakebuf_r>:
 800827c:	898b      	ldrh	r3, [r1, #12]
 800827e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008280:	079d      	lsls	r5, r3, #30
 8008282:	4606      	mov	r6, r0
 8008284:	460c      	mov	r4, r1
 8008286:	d507      	bpl.n	8008298 <__smakebuf_r+0x1c>
 8008288:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800828c:	6023      	str	r3, [r4, #0]
 800828e:	6123      	str	r3, [r4, #16]
 8008290:	2301      	movs	r3, #1
 8008292:	6163      	str	r3, [r4, #20]
 8008294:	b002      	add	sp, #8
 8008296:	bd70      	pop	{r4, r5, r6, pc}
 8008298:	466a      	mov	r2, sp
 800829a:	ab01      	add	r3, sp, #4
 800829c:	f7ff ffca 	bl	8008234 <__swhatbuf_r>
 80082a0:	9900      	ldr	r1, [sp, #0]
 80082a2:	4605      	mov	r5, r0
 80082a4:	4630      	mov	r0, r6
 80082a6:	f7ff fd19 	bl	8007cdc <_malloc_r>
 80082aa:	b948      	cbnz	r0, 80082c0 <__smakebuf_r+0x44>
 80082ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082b0:	059a      	lsls	r2, r3, #22
 80082b2:	d4ef      	bmi.n	8008294 <__smakebuf_r+0x18>
 80082b4:	f023 0303 	bic.w	r3, r3, #3
 80082b8:	f043 0302 	orr.w	r3, r3, #2
 80082bc:	81a3      	strh	r3, [r4, #12]
 80082be:	e7e3      	b.n	8008288 <__smakebuf_r+0xc>
 80082c0:	4b0d      	ldr	r3, [pc, #52]	; (80082f8 <__smakebuf_r+0x7c>)
 80082c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80082c4:	89a3      	ldrh	r3, [r4, #12]
 80082c6:	6020      	str	r0, [r4, #0]
 80082c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082cc:	81a3      	strh	r3, [r4, #12]
 80082ce:	9b00      	ldr	r3, [sp, #0]
 80082d0:	6120      	str	r0, [r4, #16]
 80082d2:	6163      	str	r3, [r4, #20]
 80082d4:	9b01      	ldr	r3, [sp, #4]
 80082d6:	b15b      	cbz	r3, 80082f0 <__smakebuf_r+0x74>
 80082d8:	4630      	mov	r0, r6
 80082da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082de:	f000 f889 	bl	80083f4 <_isatty_r>
 80082e2:	b128      	cbz	r0, 80082f0 <__smakebuf_r+0x74>
 80082e4:	89a3      	ldrh	r3, [r4, #12]
 80082e6:	f023 0303 	bic.w	r3, r3, #3
 80082ea:	f043 0301 	orr.w	r3, r3, #1
 80082ee:	81a3      	strh	r3, [r4, #12]
 80082f0:	89a0      	ldrh	r0, [r4, #12]
 80082f2:	4305      	orrs	r5, r0
 80082f4:	81a5      	strh	r5, [r4, #12]
 80082f6:	e7cd      	b.n	8008294 <__smakebuf_r+0x18>
 80082f8:	08007b35 	.word	0x08007b35

080082fc <__malloc_lock>:
 80082fc:	4801      	ldr	r0, [pc, #4]	; (8008304 <__malloc_lock+0x8>)
 80082fe:	f7ff bceb 	b.w	8007cd8 <__retarget_lock_acquire_recursive>
 8008302:	bf00      	nop
 8008304:	200009d8 	.word	0x200009d8

08008308 <__malloc_unlock>:
 8008308:	4801      	ldr	r0, [pc, #4]	; (8008310 <__malloc_unlock+0x8>)
 800830a:	f7ff bce6 	b.w	8007cda <__retarget_lock_release_recursive>
 800830e:	bf00      	nop
 8008310:	200009d8 	.word	0x200009d8

08008314 <_free_r>:
 8008314:	b538      	push	{r3, r4, r5, lr}
 8008316:	4605      	mov	r5, r0
 8008318:	2900      	cmp	r1, #0
 800831a:	d043      	beq.n	80083a4 <_free_r+0x90>
 800831c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008320:	1f0c      	subs	r4, r1, #4
 8008322:	2b00      	cmp	r3, #0
 8008324:	bfb8      	it	lt
 8008326:	18e4      	addlt	r4, r4, r3
 8008328:	f7ff ffe8 	bl	80082fc <__malloc_lock>
 800832c:	4a1e      	ldr	r2, [pc, #120]	; (80083a8 <_free_r+0x94>)
 800832e:	6813      	ldr	r3, [r2, #0]
 8008330:	4610      	mov	r0, r2
 8008332:	b933      	cbnz	r3, 8008342 <_free_r+0x2e>
 8008334:	6063      	str	r3, [r4, #4]
 8008336:	6014      	str	r4, [r2, #0]
 8008338:	4628      	mov	r0, r5
 800833a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800833e:	f7ff bfe3 	b.w	8008308 <__malloc_unlock>
 8008342:	42a3      	cmp	r3, r4
 8008344:	d90a      	bls.n	800835c <_free_r+0x48>
 8008346:	6821      	ldr	r1, [r4, #0]
 8008348:	1862      	adds	r2, r4, r1
 800834a:	4293      	cmp	r3, r2
 800834c:	bf01      	itttt	eq
 800834e:	681a      	ldreq	r2, [r3, #0]
 8008350:	685b      	ldreq	r3, [r3, #4]
 8008352:	1852      	addeq	r2, r2, r1
 8008354:	6022      	streq	r2, [r4, #0]
 8008356:	6063      	str	r3, [r4, #4]
 8008358:	6004      	str	r4, [r0, #0]
 800835a:	e7ed      	b.n	8008338 <_free_r+0x24>
 800835c:	461a      	mov	r2, r3
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	b10b      	cbz	r3, 8008366 <_free_r+0x52>
 8008362:	42a3      	cmp	r3, r4
 8008364:	d9fa      	bls.n	800835c <_free_r+0x48>
 8008366:	6811      	ldr	r1, [r2, #0]
 8008368:	1850      	adds	r0, r2, r1
 800836a:	42a0      	cmp	r0, r4
 800836c:	d10b      	bne.n	8008386 <_free_r+0x72>
 800836e:	6820      	ldr	r0, [r4, #0]
 8008370:	4401      	add	r1, r0
 8008372:	1850      	adds	r0, r2, r1
 8008374:	4283      	cmp	r3, r0
 8008376:	6011      	str	r1, [r2, #0]
 8008378:	d1de      	bne.n	8008338 <_free_r+0x24>
 800837a:	6818      	ldr	r0, [r3, #0]
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	4401      	add	r1, r0
 8008380:	6011      	str	r1, [r2, #0]
 8008382:	6053      	str	r3, [r2, #4]
 8008384:	e7d8      	b.n	8008338 <_free_r+0x24>
 8008386:	d902      	bls.n	800838e <_free_r+0x7a>
 8008388:	230c      	movs	r3, #12
 800838a:	602b      	str	r3, [r5, #0]
 800838c:	e7d4      	b.n	8008338 <_free_r+0x24>
 800838e:	6820      	ldr	r0, [r4, #0]
 8008390:	1821      	adds	r1, r4, r0
 8008392:	428b      	cmp	r3, r1
 8008394:	bf01      	itttt	eq
 8008396:	6819      	ldreq	r1, [r3, #0]
 8008398:	685b      	ldreq	r3, [r3, #4]
 800839a:	1809      	addeq	r1, r1, r0
 800839c:	6021      	streq	r1, [r4, #0]
 800839e:	6063      	str	r3, [r4, #4]
 80083a0:	6054      	str	r4, [r2, #4]
 80083a2:	e7c9      	b.n	8008338 <_free_r+0x24>
 80083a4:	bd38      	pop	{r3, r4, r5, pc}
 80083a6:	bf00      	nop
 80083a8:	20000218 	.word	0x20000218

080083ac <_read_r>:
 80083ac:	b538      	push	{r3, r4, r5, lr}
 80083ae:	4604      	mov	r4, r0
 80083b0:	4608      	mov	r0, r1
 80083b2:	4611      	mov	r1, r2
 80083b4:	2200      	movs	r2, #0
 80083b6:	4d05      	ldr	r5, [pc, #20]	; (80083cc <_read_r+0x20>)
 80083b8:	602a      	str	r2, [r5, #0]
 80083ba:	461a      	mov	r2, r3
 80083bc:	f7f8 ff28 	bl	8001210 <_read>
 80083c0:	1c43      	adds	r3, r0, #1
 80083c2:	d102      	bne.n	80083ca <_read_r+0x1e>
 80083c4:	682b      	ldr	r3, [r5, #0]
 80083c6:	b103      	cbz	r3, 80083ca <_read_r+0x1e>
 80083c8:	6023      	str	r3, [r4, #0]
 80083ca:	bd38      	pop	{r3, r4, r5, pc}
 80083cc:	200009e0 	.word	0x200009e0

080083d0 <_fstat_r>:
 80083d0:	b538      	push	{r3, r4, r5, lr}
 80083d2:	2300      	movs	r3, #0
 80083d4:	4d06      	ldr	r5, [pc, #24]	; (80083f0 <_fstat_r+0x20>)
 80083d6:	4604      	mov	r4, r0
 80083d8:	4608      	mov	r0, r1
 80083da:	4611      	mov	r1, r2
 80083dc:	602b      	str	r3, [r5, #0]
 80083de:	f7f8 ff5b 	bl	8001298 <_fstat>
 80083e2:	1c43      	adds	r3, r0, #1
 80083e4:	d102      	bne.n	80083ec <_fstat_r+0x1c>
 80083e6:	682b      	ldr	r3, [r5, #0]
 80083e8:	b103      	cbz	r3, 80083ec <_fstat_r+0x1c>
 80083ea:	6023      	str	r3, [r4, #0]
 80083ec:	bd38      	pop	{r3, r4, r5, pc}
 80083ee:	bf00      	nop
 80083f0:	200009e0 	.word	0x200009e0

080083f4 <_isatty_r>:
 80083f4:	b538      	push	{r3, r4, r5, lr}
 80083f6:	2300      	movs	r3, #0
 80083f8:	4d05      	ldr	r5, [pc, #20]	; (8008410 <_isatty_r+0x1c>)
 80083fa:	4604      	mov	r4, r0
 80083fc:	4608      	mov	r0, r1
 80083fe:	602b      	str	r3, [r5, #0]
 8008400:	f7f8 ff59 	bl	80012b6 <_isatty>
 8008404:	1c43      	adds	r3, r0, #1
 8008406:	d102      	bne.n	800840e <_isatty_r+0x1a>
 8008408:	682b      	ldr	r3, [r5, #0]
 800840a:	b103      	cbz	r3, 800840e <_isatty_r+0x1a>
 800840c:	6023      	str	r3, [r4, #0]
 800840e:	bd38      	pop	{r3, r4, r5, pc}
 8008410:	200009e0 	.word	0x200009e0

08008414 <pow>:
 8008414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008418:	461f      	mov	r7, r3
 800841a:	4680      	mov	r8, r0
 800841c:	4689      	mov	r9, r1
 800841e:	4616      	mov	r6, r2
 8008420:	f000 f8d2 	bl	80085c8 <__ieee754_pow>
 8008424:	4b4d      	ldr	r3, [pc, #308]	; (800855c <pow+0x148>)
 8008426:	4604      	mov	r4, r0
 8008428:	f993 3000 	ldrsb.w	r3, [r3]
 800842c:	460d      	mov	r5, r1
 800842e:	3301      	adds	r3, #1
 8008430:	d015      	beq.n	800845e <pow+0x4a>
 8008432:	4632      	mov	r2, r6
 8008434:	463b      	mov	r3, r7
 8008436:	4630      	mov	r0, r6
 8008438:	4639      	mov	r1, r7
 800843a:	f7f8 fadf 	bl	80009fc <__aeabi_dcmpun>
 800843e:	b970      	cbnz	r0, 800845e <pow+0x4a>
 8008440:	4642      	mov	r2, r8
 8008442:	464b      	mov	r3, r9
 8008444:	4640      	mov	r0, r8
 8008446:	4649      	mov	r1, r9
 8008448:	f7f8 fad8 	bl	80009fc <__aeabi_dcmpun>
 800844c:	2200      	movs	r2, #0
 800844e:	2300      	movs	r3, #0
 8008450:	b148      	cbz	r0, 8008466 <pow+0x52>
 8008452:	4630      	mov	r0, r6
 8008454:	4639      	mov	r1, r7
 8008456:	f7f8 fa9f 	bl	8000998 <__aeabi_dcmpeq>
 800845a:	2800      	cmp	r0, #0
 800845c:	d17b      	bne.n	8008556 <pow+0x142>
 800845e:	4620      	mov	r0, r4
 8008460:	4629      	mov	r1, r5
 8008462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008466:	4640      	mov	r0, r8
 8008468:	4649      	mov	r1, r9
 800846a:	f7f8 fa95 	bl	8000998 <__aeabi_dcmpeq>
 800846e:	b1e0      	cbz	r0, 80084aa <pow+0x96>
 8008470:	2200      	movs	r2, #0
 8008472:	2300      	movs	r3, #0
 8008474:	4630      	mov	r0, r6
 8008476:	4639      	mov	r1, r7
 8008478:	f7f8 fa8e 	bl	8000998 <__aeabi_dcmpeq>
 800847c:	2800      	cmp	r0, #0
 800847e:	d16a      	bne.n	8008556 <pow+0x142>
 8008480:	4630      	mov	r0, r6
 8008482:	4639      	mov	r1, r7
 8008484:	f000 fe65 	bl	8009152 <finite>
 8008488:	2800      	cmp	r0, #0
 800848a:	d0e8      	beq.n	800845e <pow+0x4a>
 800848c:	2200      	movs	r2, #0
 800848e:	2300      	movs	r3, #0
 8008490:	4630      	mov	r0, r6
 8008492:	4639      	mov	r1, r7
 8008494:	f7f8 fa8a 	bl	80009ac <__aeabi_dcmplt>
 8008498:	2800      	cmp	r0, #0
 800849a:	d0e0      	beq.n	800845e <pow+0x4a>
 800849c:	f7ff fae0 	bl	8007a60 <__errno>
 80084a0:	2321      	movs	r3, #33	; 0x21
 80084a2:	2400      	movs	r4, #0
 80084a4:	6003      	str	r3, [r0, #0]
 80084a6:	4d2e      	ldr	r5, [pc, #184]	; (8008560 <pow+0x14c>)
 80084a8:	e7d9      	b.n	800845e <pow+0x4a>
 80084aa:	4620      	mov	r0, r4
 80084ac:	4629      	mov	r1, r5
 80084ae:	f000 fe50 	bl	8009152 <finite>
 80084b2:	bba8      	cbnz	r0, 8008520 <pow+0x10c>
 80084b4:	4640      	mov	r0, r8
 80084b6:	4649      	mov	r1, r9
 80084b8:	f000 fe4b 	bl	8009152 <finite>
 80084bc:	b380      	cbz	r0, 8008520 <pow+0x10c>
 80084be:	4630      	mov	r0, r6
 80084c0:	4639      	mov	r1, r7
 80084c2:	f000 fe46 	bl	8009152 <finite>
 80084c6:	b358      	cbz	r0, 8008520 <pow+0x10c>
 80084c8:	4622      	mov	r2, r4
 80084ca:	462b      	mov	r3, r5
 80084cc:	4620      	mov	r0, r4
 80084ce:	4629      	mov	r1, r5
 80084d0:	f7f8 fa94 	bl	80009fc <__aeabi_dcmpun>
 80084d4:	b160      	cbz	r0, 80084f0 <pow+0xdc>
 80084d6:	f7ff fac3 	bl	8007a60 <__errno>
 80084da:	2321      	movs	r3, #33	; 0x21
 80084dc:	2200      	movs	r2, #0
 80084de:	6003      	str	r3, [r0, #0]
 80084e0:	2300      	movs	r3, #0
 80084e2:	4610      	mov	r0, r2
 80084e4:	4619      	mov	r1, r3
 80084e6:	f7f8 f919 	bl	800071c <__aeabi_ddiv>
 80084ea:	4604      	mov	r4, r0
 80084ec:	460d      	mov	r5, r1
 80084ee:	e7b6      	b.n	800845e <pow+0x4a>
 80084f0:	f7ff fab6 	bl	8007a60 <__errno>
 80084f4:	2322      	movs	r3, #34	; 0x22
 80084f6:	2200      	movs	r2, #0
 80084f8:	6003      	str	r3, [r0, #0]
 80084fa:	4649      	mov	r1, r9
 80084fc:	2300      	movs	r3, #0
 80084fe:	4640      	mov	r0, r8
 8008500:	f7f8 fa54 	bl	80009ac <__aeabi_dcmplt>
 8008504:	2400      	movs	r4, #0
 8008506:	b148      	cbz	r0, 800851c <pow+0x108>
 8008508:	4630      	mov	r0, r6
 800850a:	4639      	mov	r1, r7
 800850c:	f000 fe2e 	bl	800916c <rint>
 8008510:	4632      	mov	r2, r6
 8008512:	463b      	mov	r3, r7
 8008514:	f7f8 fa40 	bl	8000998 <__aeabi_dcmpeq>
 8008518:	2800      	cmp	r0, #0
 800851a:	d0c4      	beq.n	80084a6 <pow+0x92>
 800851c:	4d11      	ldr	r5, [pc, #68]	; (8008564 <pow+0x150>)
 800851e:	e79e      	b.n	800845e <pow+0x4a>
 8008520:	2200      	movs	r2, #0
 8008522:	2300      	movs	r3, #0
 8008524:	4620      	mov	r0, r4
 8008526:	4629      	mov	r1, r5
 8008528:	f7f8 fa36 	bl	8000998 <__aeabi_dcmpeq>
 800852c:	2800      	cmp	r0, #0
 800852e:	d096      	beq.n	800845e <pow+0x4a>
 8008530:	4640      	mov	r0, r8
 8008532:	4649      	mov	r1, r9
 8008534:	f000 fe0d 	bl	8009152 <finite>
 8008538:	2800      	cmp	r0, #0
 800853a:	d090      	beq.n	800845e <pow+0x4a>
 800853c:	4630      	mov	r0, r6
 800853e:	4639      	mov	r1, r7
 8008540:	f000 fe07 	bl	8009152 <finite>
 8008544:	2800      	cmp	r0, #0
 8008546:	d08a      	beq.n	800845e <pow+0x4a>
 8008548:	f7ff fa8a 	bl	8007a60 <__errno>
 800854c:	2322      	movs	r3, #34	; 0x22
 800854e:	2400      	movs	r4, #0
 8008550:	2500      	movs	r5, #0
 8008552:	6003      	str	r3, [r0, #0]
 8008554:	e783      	b.n	800845e <pow+0x4a>
 8008556:	2400      	movs	r4, #0
 8008558:	4d03      	ldr	r5, [pc, #12]	; (8008568 <pow+0x154>)
 800855a:	e780      	b.n	800845e <pow+0x4a>
 800855c:	200001d4 	.word	0x200001d4
 8008560:	fff00000 	.word	0xfff00000
 8008564:	7ff00000 	.word	0x7ff00000
 8008568:	3ff00000 	.word	0x3ff00000

0800856c <sqrt>:
 800856c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800856e:	4606      	mov	r6, r0
 8008570:	460f      	mov	r7, r1
 8008572:	f000 fd3f 	bl	8008ff4 <__ieee754_sqrt>
 8008576:	4b12      	ldr	r3, [pc, #72]	; (80085c0 <sqrt+0x54>)
 8008578:	4604      	mov	r4, r0
 800857a:	f993 3000 	ldrsb.w	r3, [r3]
 800857e:	460d      	mov	r5, r1
 8008580:	3301      	adds	r3, #1
 8008582:	d019      	beq.n	80085b8 <sqrt+0x4c>
 8008584:	4632      	mov	r2, r6
 8008586:	463b      	mov	r3, r7
 8008588:	4630      	mov	r0, r6
 800858a:	4639      	mov	r1, r7
 800858c:	f7f8 fa36 	bl	80009fc <__aeabi_dcmpun>
 8008590:	b990      	cbnz	r0, 80085b8 <sqrt+0x4c>
 8008592:	2200      	movs	r2, #0
 8008594:	2300      	movs	r3, #0
 8008596:	4630      	mov	r0, r6
 8008598:	4639      	mov	r1, r7
 800859a:	f7f8 fa07 	bl	80009ac <__aeabi_dcmplt>
 800859e:	b158      	cbz	r0, 80085b8 <sqrt+0x4c>
 80085a0:	f7ff fa5e 	bl	8007a60 <__errno>
 80085a4:	2321      	movs	r3, #33	; 0x21
 80085a6:	2200      	movs	r2, #0
 80085a8:	6003      	str	r3, [r0, #0]
 80085aa:	2300      	movs	r3, #0
 80085ac:	4610      	mov	r0, r2
 80085ae:	4619      	mov	r1, r3
 80085b0:	f7f8 f8b4 	bl	800071c <__aeabi_ddiv>
 80085b4:	4604      	mov	r4, r0
 80085b6:	460d      	mov	r5, r1
 80085b8:	4620      	mov	r0, r4
 80085ba:	4629      	mov	r1, r5
 80085bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085be:	bf00      	nop
 80085c0:	200001d4 	.word	0x200001d4
 80085c4:	00000000 	.word	0x00000000

080085c8 <__ieee754_pow>:
 80085c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085cc:	b093      	sub	sp, #76	; 0x4c
 80085ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80085d2:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 80085d6:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80085da:	ea55 0302 	orrs.w	r3, r5, r2
 80085de:	4607      	mov	r7, r0
 80085e0:	4688      	mov	r8, r1
 80085e2:	f000 84bf 	beq.w	8008f64 <__ieee754_pow+0x99c>
 80085e6:	4b7e      	ldr	r3, [pc, #504]	; (80087e0 <__ieee754_pow+0x218>)
 80085e8:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80085ec:	429c      	cmp	r4, r3
 80085ee:	4689      	mov	r9, r1
 80085f0:	4682      	mov	sl, r0
 80085f2:	dc09      	bgt.n	8008608 <__ieee754_pow+0x40>
 80085f4:	d103      	bne.n	80085fe <__ieee754_pow+0x36>
 80085f6:	b978      	cbnz	r0, 8008618 <__ieee754_pow+0x50>
 80085f8:	42a5      	cmp	r5, r4
 80085fa:	dd02      	ble.n	8008602 <__ieee754_pow+0x3a>
 80085fc:	e00c      	b.n	8008618 <__ieee754_pow+0x50>
 80085fe:	429d      	cmp	r5, r3
 8008600:	dc02      	bgt.n	8008608 <__ieee754_pow+0x40>
 8008602:	429d      	cmp	r5, r3
 8008604:	d10e      	bne.n	8008624 <__ieee754_pow+0x5c>
 8008606:	b16a      	cbz	r2, 8008624 <__ieee754_pow+0x5c>
 8008608:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800860c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008610:	ea54 030a 	orrs.w	r3, r4, sl
 8008614:	f000 84a6 	beq.w	8008f64 <__ieee754_pow+0x99c>
 8008618:	4872      	ldr	r0, [pc, #456]	; (80087e4 <__ieee754_pow+0x21c>)
 800861a:	b013      	add	sp, #76	; 0x4c
 800861c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008620:	f000 bd9e 	b.w	8009160 <nan>
 8008624:	f1b9 0f00 	cmp.w	r9, #0
 8008628:	da39      	bge.n	800869e <__ieee754_pow+0xd6>
 800862a:	4b6f      	ldr	r3, [pc, #444]	; (80087e8 <__ieee754_pow+0x220>)
 800862c:	429d      	cmp	r5, r3
 800862e:	dc54      	bgt.n	80086da <__ieee754_pow+0x112>
 8008630:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008634:	429d      	cmp	r5, r3
 8008636:	f340 84a6 	ble.w	8008f86 <__ieee754_pow+0x9be>
 800863a:	152b      	asrs	r3, r5, #20
 800863c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008640:	2b14      	cmp	r3, #20
 8008642:	dd0f      	ble.n	8008664 <__ieee754_pow+0x9c>
 8008644:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008648:	fa22 f103 	lsr.w	r1, r2, r3
 800864c:	fa01 f303 	lsl.w	r3, r1, r3
 8008650:	4293      	cmp	r3, r2
 8008652:	f040 8498 	bne.w	8008f86 <__ieee754_pow+0x9be>
 8008656:	f001 0101 	and.w	r1, r1, #1
 800865a:	f1c1 0302 	rsb	r3, r1, #2
 800865e:	9300      	str	r3, [sp, #0]
 8008660:	b182      	cbz	r2, 8008684 <__ieee754_pow+0xbc>
 8008662:	e05e      	b.n	8008722 <__ieee754_pow+0x15a>
 8008664:	2a00      	cmp	r2, #0
 8008666:	d15a      	bne.n	800871e <__ieee754_pow+0x156>
 8008668:	f1c3 0314 	rsb	r3, r3, #20
 800866c:	fa45 f103 	asr.w	r1, r5, r3
 8008670:	fa01 f303 	lsl.w	r3, r1, r3
 8008674:	42ab      	cmp	r3, r5
 8008676:	f040 8483 	bne.w	8008f80 <__ieee754_pow+0x9b8>
 800867a:	f001 0101 	and.w	r1, r1, #1
 800867e:	f1c1 0302 	rsb	r3, r1, #2
 8008682:	9300      	str	r3, [sp, #0]
 8008684:	4b59      	ldr	r3, [pc, #356]	; (80087ec <__ieee754_pow+0x224>)
 8008686:	429d      	cmp	r5, r3
 8008688:	d130      	bne.n	80086ec <__ieee754_pow+0x124>
 800868a:	2e00      	cmp	r6, #0
 800868c:	f280 8474 	bge.w	8008f78 <__ieee754_pow+0x9b0>
 8008690:	463a      	mov	r2, r7
 8008692:	4643      	mov	r3, r8
 8008694:	2000      	movs	r0, #0
 8008696:	4955      	ldr	r1, [pc, #340]	; (80087ec <__ieee754_pow+0x224>)
 8008698:	f7f8 f840 	bl	800071c <__aeabi_ddiv>
 800869c:	e02f      	b.n	80086fe <__ieee754_pow+0x136>
 800869e:	2300      	movs	r3, #0
 80086a0:	9300      	str	r3, [sp, #0]
 80086a2:	2a00      	cmp	r2, #0
 80086a4:	d13d      	bne.n	8008722 <__ieee754_pow+0x15a>
 80086a6:	4b4e      	ldr	r3, [pc, #312]	; (80087e0 <__ieee754_pow+0x218>)
 80086a8:	429d      	cmp	r5, r3
 80086aa:	d1eb      	bne.n	8008684 <__ieee754_pow+0xbc>
 80086ac:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80086b0:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80086b4:	ea53 030a 	orrs.w	r3, r3, sl
 80086b8:	f000 8454 	beq.w	8008f64 <__ieee754_pow+0x99c>
 80086bc:	4b4c      	ldr	r3, [pc, #304]	; (80087f0 <__ieee754_pow+0x228>)
 80086be:	429c      	cmp	r4, r3
 80086c0:	dd0d      	ble.n	80086de <__ieee754_pow+0x116>
 80086c2:	2e00      	cmp	r6, #0
 80086c4:	f280 8454 	bge.w	8008f70 <__ieee754_pow+0x9a8>
 80086c8:	f04f 0b00 	mov.w	fp, #0
 80086cc:	f04f 0c00 	mov.w	ip, #0
 80086d0:	4658      	mov	r0, fp
 80086d2:	4661      	mov	r1, ip
 80086d4:	b013      	add	sp, #76	; 0x4c
 80086d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086da:	2302      	movs	r3, #2
 80086dc:	e7e0      	b.n	80086a0 <__ieee754_pow+0xd8>
 80086de:	2e00      	cmp	r6, #0
 80086e0:	daf2      	bge.n	80086c8 <__ieee754_pow+0x100>
 80086e2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80086e6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80086ea:	e7f1      	b.n	80086d0 <__ieee754_pow+0x108>
 80086ec:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 80086f0:	d108      	bne.n	8008704 <__ieee754_pow+0x13c>
 80086f2:	463a      	mov	r2, r7
 80086f4:	4643      	mov	r3, r8
 80086f6:	4638      	mov	r0, r7
 80086f8:	4641      	mov	r1, r8
 80086fa:	f7f7 fee5 	bl	80004c8 <__aeabi_dmul>
 80086fe:	4683      	mov	fp, r0
 8008700:	468c      	mov	ip, r1
 8008702:	e7e5      	b.n	80086d0 <__ieee754_pow+0x108>
 8008704:	4b3b      	ldr	r3, [pc, #236]	; (80087f4 <__ieee754_pow+0x22c>)
 8008706:	429e      	cmp	r6, r3
 8008708:	d10b      	bne.n	8008722 <__ieee754_pow+0x15a>
 800870a:	f1b9 0f00 	cmp.w	r9, #0
 800870e:	db08      	blt.n	8008722 <__ieee754_pow+0x15a>
 8008710:	4638      	mov	r0, r7
 8008712:	4641      	mov	r1, r8
 8008714:	b013      	add	sp, #76	; 0x4c
 8008716:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800871a:	f000 bc6b 	b.w	8008ff4 <__ieee754_sqrt>
 800871e:	2300      	movs	r3, #0
 8008720:	9300      	str	r3, [sp, #0]
 8008722:	4638      	mov	r0, r7
 8008724:	4641      	mov	r1, r8
 8008726:	f000 fd11 	bl	800914c <fabs>
 800872a:	4683      	mov	fp, r0
 800872c:	468c      	mov	ip, r1
 800872e:	f1ba 0f00 	cmp.w	sl, #0
 8008732:	d129      	bne.n	8008788 <__ieee754_pow+0x1c0>
 8008734:	b124      	cbz	r4, 8008740 <__ieee754_pow+0x178>
 8008736:	4b2d      	ldr	r3, [pc, #180]	; (80087ec <__ieee754_pow+0x224>)
 8008738:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800873c:	429a      	cmp	r2, r3
 800873e:	d123      	bne.n	8008788 <__ieee754_pow+0x1c0>
 8008740:	2e00      	cmp	r6, #0
 8008742:	da07      	bge.n	8008754 <__ieee754_pow+0x18c>
 8008744:	465a      	mov	r2, fp
 8008746:	4663      	mov	r3, ip
 8008748:	2000      	movs	r0, #0
 800874a:	4928      	ldr	r1, [pc, #160]	; (80087ec <__ieee754_pow+0x224>)
 800874c:	f7f7 ffe6 	bl	800071c <__aeabi_ddiv>
 8008750:	4683      	mov	fp, r0
 8008752:	468c      	mov	ip, r1
 8008754:	f1b9 0f00 	cmp.w	r9, #0
 8008758:	daba      	bge.n	80086d0 <__ieee754_pow+0x108>
 800875a:	9b00      	ldr	r3, [sp, #0]
 800875c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008760:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008764:	4323      	orrs	r3, r4
 8008766:	d108      	bne.n	800877a <__ieee754_pow+0x1b2>
 8008768:	465a      	mov	r2, fp
 800876a:	4663      	mov	r3, ip
 800876c:	4658      	mov	r0, fp
 800876e:	4661      	mov	r1, ip
 8008770:	f7f7 fcf2 	bl	8000158 <__aeabi_dsub>
 8008774:	4602      	mov	r2, r0
 8008776:	460b      	mov	r3, r1
 8008778:	e78e      	b.n	8008698 <__ieee754_pow+0xd0>
 800877a:	9b00      	ldr	r3, [sp, #0]
 800877c:	2b01      	cmp	r3, #1
 800877e:	d1a7      	bne.n	80086d0 <__ieee754_pow+0x108>
 8008780:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8008784:	469c      	mov	ip, r3
 8008786:	e7a3      	b.n	80086d0 <__ieee754_pow+0x108>
 8008788:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 800878c:	3b01      	subs	r3, #1
 800878e:	930c      	str	r3, [sp, #48]	; 0x30
 8008790:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008792:	9b00      	ldr	r3, [sp, #0]
 8008794:	4313      	orrs	r3, r2
 8008796:	d104      	bne.n	80087a2 <__ieee754_pow+0x1da>
 8008798:	463a      	mov	r2, r7
 800879a:	4643      	mov	r3, r8
 800879c:	4638      	mov	r0, r7
 800879e:	4641      	mov	r1, r8
 80087a0:	e7e6      	b.n	8008770 <__ieee754_pow+0x1a8>
 80087a2:	4b15      	ldr	r3, [pc, #84]	; (80087f8 <__ieee754_pow+0x230>)
 80087a4:	429d      	cmp	r5, r3
 80087a6:	f340 80f9 	ble.w	800899c <__ieee754_pow+0x3d4>
 80087aa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80087ae:	429d      	cmp	r5, r3
 80087b0:	4b0f      	ldr	r3, [pc, #60]	; (80087f0 <__ieee754_pow+0x228>)
 80087b2:	dd09      	ble.n	80087c8 <__ieee754_pow+0x200>
 80087b4:	429c      	cmp	r4, r3
 80087b6:	dc0c      	bgt.n	80087d2 <__ieee754_pow+0x20a>
 80087b8:	2e00      	cmp	r6, #0
 80087ba:	da85      	bge.n	80086c8 <__ieee754_pow+0x100>
 80087bc:	a306      	add	r3, pc, #24	; (adr r3, 80087d8 <__ieee754_pow+0x210>)
 80087be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c2:	4610      	mov	r0, r2
 80087c4:	4619      	mov	r1, r3
 80087c6:	e798      	b.n	80086fa <__ieee754_pow+0x132>
 80087c8:	429c      	cmp	r4, r3
 80087ca:	dbf5      	blt.n	80087b8 <__ieee754_pow+0x1f0>
 80087cc:	4b07      	ldr	r3, [pc, #28]	; (80087ec <__ieee754_pow+0x224>)
 80087ce:	429c      	cmp	r4, r3
 80087d0:	dd14      	ble.n	80087fc <__ieee754_pow+0x234>
 80087d2:	2e00      	cmp	r6, #0
 80087d4:	dcf2      	bgt.n	80087bc <__ieee754_pow+0x1f4>
 80087d6:	e777      	b.n	80086c8 <__ieee754_pow+0x100>
 80087d8:	8800759c 	.word	0x8800759c
 80087dc:	7e37e43c 	.word	0x7e37e43c
 80087e0:	7ff00000 	.word	0x7ff00000
 80087e4:	08009474 	.word	0x08009474
 80087e8:	433fffff 	.word	0x433fffff
 80087ec:	3ff00000 	.word	0x3ff00000
 80087f0:	3fefffff 	.word	0x3fefffff
 80087f4:	3fe00000 	.word	0x3fe00000
 80087f8:	41e00000 	.word	0x41e00000
 80087fc:	4661      	mov	r1, ip
 80087fe:	2200      	movs	r2, #0
 8008800:	4658      	mov	r0, fp
 8008802:	4b61      	ldr	r3, [pc, #388]	; (8008988 <__ieee754_pow+0x3c0>)
 8008804:	f7f7 fca8 	bl	8000158 <__aeabi_dsub>
 8008808:	a355      	add	r3, pc, #340	; (adr r3, 8008960 <__ieee754_pow+0x398>)
 800880a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800880e:	4604      	mov	r4, r0
 8008810:	460d      	mov	r5, r1
 8008812:	f7f7 fe59 	bl	80004c8 <__aeabi_dmul>
 8008816:	a354      	add	r3, pc, #336	; (adr r3, 8008968 <__ieee754_pow+0x3a0>)
 8008818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800881c:	4606      	mov	r6, r0
 800881e:	460f      	mov	r7, r1
 8008820:	4620      	mov	r0, r4
 8008822:	4629      	mov	r1, r5
 8008824:	f7f7 fe50 	bl	80004c8 <__aeabi_dmul>
 8008828:	2200      	movs	r2, #0
 800882a:	4682      	mov	sl, r0
 800882c:	468b      	mov	fp, r1
 800882e:	4620      	mov	r0, r4
 8008830:	4629      	mov	r1, r5
 8008832:	4b56      	ldr	r3, [pc, #344]	; (800898c <__ieee754_pow+0x3c4>)
 8008834:	f7f7 fe48 	bl	80004c8 <__aeabi_dmul>
 8008838:	4602      	mov	r2, r0
 800883a:	460b      	mov	r3, r1
 800883c:	a14c      	add	r1, pc, #304	; (adr r1, 8008970 <__ieee754_pow+0x3a8>)
 800883e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008842:	f7f7 fc89 	bl	8000158 <__aeabi_dsub>
 8008846:	4622      	mov	r2, r4
 8008848:	462b      	mov	r3, r5
 800884a:	f7f7 fe3d 	bl	80004c8 <__aeabi_dmul>
 800884e:	4602      	mov	r2, r0
 8008850:	460b      	mov	r3, r1
 8008852:	2000      	movs	r0, #0
 8008854:	494e      	ldr	r1, [pc, #312]	; (8008990 <__ieee754_pow+0x3c8>)
 8008856:	f7f7 fc7f 	bl	8000158 <__aeabi_dsub>
 800885a:	4622      	mov	r2, r4
 800885c:	462b      	mov	r3, r5
 800885e:	4680      	mov	r8, r0
 8008860:	4689      	mov	r9, r1
 8008862:	4620      	mov	r0, r4
 8008864:	4629      	mov	r1, r5
 8008866:	f7f7 fe2f 	bl	80004c8 <__aeabi_dmul>
 800886a:	4602      	mov	r2, r0
 800886c:	460b      	mov	r3, r1
 800886e:	4640      	mov	r0, r8
 8008870:	4649      	mov	r1, r9
 8008872:	f7f7 fe29 	bl	80004c8 <__aeabi_dmul>
 8008876:	a340      	add	r3, pc, #256	; (adr r3, 8008978 <__ieee754_pow+0x3b0>)
 8008878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800887c:	f7f7 fe24 	bl	80004c8 <__aeabi_dmul>
 8008880:	4602      	mov	r2, r0
 8008882:	460b      	mov	r3, r1
 8008884:	4650      	mov	r0, sl
 8008886:	4659      	mov	r1, fp
 8008888:	f7f7 fc66 	bl	8000158 <__aeabi_dsub>
 800888c:	f04f 0a00 	mov.w	sl, #0
 8008890:	4602      	mov	r2, r0
 8008892:	460b      	mov	r3, r1
 8008894:	4604      	mov	r4, r0
 8008896:	460d      	mov	r5, r1
 8008898:	4630      	mov	r0, r6
 800889a:	4639      	mov	r1, r7
 800889c:	f7f7 fc5e 	bl	800015c <__adddf3>
 80088a0:	4632      	mov	r2, r6
 80088a2:	463b      	mov	r3, r7
 80088a4:	4650      	mov	r0, sl
 80088a6:	468b      	mov	fp, r1
 80088a8:	f7f7 fc56 	bl	8000158 <__aeabi_dsub>
 80088ac:	4602      	mov	r2, r0
 80088ae:	460b      	mov	r3, r1
 80088b0:	4620      	mov	r0, r4
 80088b2:	4629      	mov	r1, r5
 80088b4:	f7f7 fc50 	bl	8000158 <__aeabi_dsub>
 80088b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80088bc:	9b00      	ldr	r3, [sp, #0]
 80088be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80088c0:	3b01      	subs	r3, #1
 80088c2:	4313      	orrs	r3, r2
 80088c4:	f04f 0600 	mov.w	r6, #0
 80088c8:	f04f 0200 	mov.w	r2, #0
 80088cc:	bf0c      	ite	eq
 80088ce:	4b31      	ldreq	r3, [pc, #196]	; (8008994 <__ieee754_pow+0x3cc>)
 80088d0:	4b2d      	ldrne	r3, [pc, #180]	; (8008988 <__ieee754_pow+0x3c0>)
 80088d2:	4604      	mov	r4, r0
 80088d4:	460d      	mov	r5, r1
 80088d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088da:	e9cd 2300 	strd	r2, r3, [sp]
 80088de:	4632      	mov	r2, r6
 80088e0:	463b      	mov	r3, r7
 80088e2:	f7f7 fc39 	bl	8000158 <__aeabi_dsub>
 80088e6:	4652      	mov	r2, sl
 80088e8:	465b      	mov	r3, fp
 80088ea:	f7f7 fded 	bl	80004c8 <__aeabi_dmul>
 80088ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80088f2:	4680      	mov	r8, r0
 80088f4:	4689      	mov	r9, r1
 80088f6:	4620      	mov	r0, r4
 80088f8:	4629      	mov	r1, r5
 80088fa:	f7f7 fde5 	bl	80004c8 <__aeabi_dmul>
 80088fe:	4602      	mov	r2, r0
 8008900:	460b      	mov	r3, r1
 8008902:	4640      	mov	r0, r8
 8008904:	4649      	mov	r1, r9
 8008906:	f7f7 fc29 	bl	800015c <__adddf3>
 800890a:	4632      	mov	r2, r6
 800890c:	463b      	mov	r3, r7
 800890e:	4680      	mov	r8, r0
 8008910:	4689      	mov	r9, r1
 8008912:	4650      	mov	r0, sl
 8008914:	4659      	mov	r1, fp
 8008916:	f7f7 fdd7 	bl	80004c8 <__aeabi_dmul>
 800891a:	4604      	mov	r4, r0
 800891c:	460d      	mov	r5, r1
 800891e:	460b      	mov	r3, r1
 8008920:	4602      	mov	r2, r0
 8008922:	4649      	mov	r1, r9
 8008924:	4640      	mov	r0, r8
 8008926:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800892a:	f7f7 fc17 	bl	800015c <__adddf3>
 800892e:	4b1a      	ldr	r3, [pc, #104]	; (8008998 <__ieee754_pow+0x3d0>)
 8008930:	4682      	mov	sl, r0
 8008932:	4299      	cmp	r1, r3
 8008934:	460f      	mov	r7, r1
 8008936:	460e      	mov	r6, r1
 8008938:	f340 82ed 	ble.w	8008f16 <__ieee754_pow+0x94e>
 800893c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008940:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008944:	4303      	orrs	r3, r0
 8008946:	f000 81e7 	beq.w	8008d18 <__ieee754_pow+0x750>
 800894a:	a30d      	add	r3, pc, #52	; (adr r3, 8008980 <__ieee754_pow+0x3b8>)
 800894c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008950:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008954:	f7f7 fdb8 	bl	80004c8 <__aeabi_dmul>
 8008958:	a309      	add	r3, pc, #36	; (adr r3, 8008980 <__ieee754_pow+0x3b8>)
 800895a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800895e:	e6cc      	b.n	80086fa <__ieee754_pow+0x132>
 8008960:	60000000 	.word	0x60000000
 8008964:	3ff71547 	.word	0x3ff71547
 8008968:	f85ddf44 	.word	0xf85ddf44
 800896c:	3e54ae0b 	.word	0x3e54ae0b
 8008970:	55555555 	.word	0x55555555
 8008974:	3fd55555 	.word	0x3fd55555
 8008978:	652b82fe 	.word	0x652b82fe
 800897c:	3ff71547 	.word	0x3ff71547
 8008980:	8800759c 	.word	0x8800759c
 8008984:	7e37e43c 	.word	0x7e37e43c
 8008988:	3ff00000 	.word	0x3ff00000
 800898c:	3fd00000 	.word	0x3fd00000
 8008990:	3fe00000 	.word	0x3fe00000
 8008994:	bff00000 	.word	0xbff00000
 8008998:	408fffff 	.word	0x408fffff
 800899c:	4bd4      	ldr	r3, [pc, #848]	; (8008cf0 <__ieee754_pow+0x728>)
 800899e:	2200      	movs	r2, #0
 80089a0:	ea09 0303 	and.w	r3, r9, r3
 80089a4:	b943      	cbnz	r3, 80089b8 <__ieee754_pow+0x3f0>
 80089a6:	4658      	mov	r0, fp
 80089a8:	4661      	mov	r1, ip
 80089aa:	4bd2      	ldr	r3, [pc, #840]	; (8008cf4 <__ieee754_pow+0x72c>)
 80089ac:	f7f7 fd8c 	bl	80004c8 <__aeabi_dmul>
 80089b0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80089b4:	4683      	mov	fp, r0
 80089b6:	460c      	mov	r4, r1
 80089b8:	1523      	asrs	r3, r4, #20
 80089ba:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80089be:	4413      	add	r3, r2
 80089c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80089c2:	4bcd      	ldr	r3, [pc, #820]	; (8008cf8 <__ieee754_pow+0x730>)
 80089c4:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80089c8:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80089cc:	429c      	cmp	r4, r3
 80089ce:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80089d2:	dd08      	ble.n	80089e6 <__ieee754_pow+0x41e>
 80089d4:	4bc9      	ldr	r3, [pc, #804]	; (8008cfc <__ieee754_pow+0x734>)
 80089d6:	429c      	cmp	r4, r3
 80089d8:	f340 819c 	ble.w	8008d14 <__ieee754_pow+0x74c>
 80089dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089de:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80089e2:	3301      	adds	r3, #1
 80089e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80089e6:	2600      	movs	r6, #0
 80089e8:	00f3      	lsls	r3, r6, #3
 80089ea:	930d      	str	r3, [sp, #52]	; 0x34
 80089ec:	4bc4      	ldr	r3, [pc, #784]	; (8008d00 <__ieee754_pow+0x738>)
 80089ee:	4658      	mov	r0, fp
 80089f0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80089f4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80089f8:	4629      	mov	r1, r5
 80089fa:	461a      	mov	r2, r3
 80089fc:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8008a00:	4623      	mov	r3, r4
 8008a02:	f7f7 fba9 	bl	8000158 <__aeabi_dsub>
 8008a06:	46da      	mov	sl, fp
 8008a08:	462b      	mov	r3, r5
 8008a0a:	4652      	mov	r2, sl
 8008a0c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008a10:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008a14:	f7f7 fba2 	bl	800015c <__adddf3>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	460b      	mov	r3, r1
 8008a1c:	2000      	movs	r0, #0
 8008a1e:	49b9      	ldr	r1, [pc, #740]	; (8008d04 <__ieee754_pow+0x73c>)
 8008a20:	f7f7 fe7c 	bl	800071c <__aeabi_ddiv>
 8008a24:	4602      	mov	r2, r0
 8008a26:	460b      	mov	r3, r1
 8008a28:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008a2c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008a30:	f7f7 fd4a 	bl	80004c8 <__aeabi_dmul>
 8008a34:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008a38:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8008a3c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008a40:	2300      	movs	r3, #0
 8008a42:	2200      	movs	r2, #0
 8008a44:	46ab      	mov	fp, r5
 8008a46:	106d      	asrs	r5, r5, #1
 8008a48:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008a4c:	9304      	str	r3, [sp, #16]
 8008a4e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008a52:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008a56:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8008a5a:	4640      	mov	r0, r8
 8008a5c:	4649      	mov	r1, r9
 8008a5e:	4614      	mov	r4, r2
 8008a60:	461d      	mov	r5, r3
 8008a62:	f7f7 fd31 	bl	80004c8 <__aeabi_dmul>
 8008a66:	4602      	mov	r2, r0
 8008a68:	460b      	mov	r3, r1
 8008a6a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008a6e:	f7f7 fb73 	bl	8000158 <__aeabi_dsub>
 8008a72:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008a76:	4606      	mov	r6, r0
 8008a78:	460f      	mov	r7, r1
 8008a7a:	4620      	mov	r0, r4
 8008a7c:	4629      	mov	r1, r5
 8008a7e:	f7f7 fb6b 	bl	8000158 <__aeabi_dsub>
 8008a82:	4602      	mov	r2, r0
 8008a84:	460b      	mov	r3, r1
 8008a86:	4650      	mov	r0, sl
 8008a88:	4659      	mov	r1, fp
 8008a8a:	f7f7 fb65 	bl	8000158 <__aeabi_dsub>
 8008a8e:	4642      	mov	r2, r8
 8008a90:	464b      	mov	r3, r9
 8008a92:	f7f7 fd19 	bl	80004c8 <__aeabi_dmul>
 8008a96:	4602      	mov	r2, r0
 8008a98:	460b      	mov	r3, r1
 8008a9a:	4630      	mov	r0, r6
 8008a9c:	4639      	mov	r1, r7
 8008a9e:	f7f7 fb5b 	bl	8000158 <__aeabi_dsub>
 8008aa2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008aa6:	f7f7 fd0f 	bl	80004c8 <__aeabi_dmul>
 8008aaa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008aae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008ab2:	4610      	mov	r0, r2
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	f7f7 fd07 	bl	80004c8 <__aeabi_dmul>
 8008aba:	a37b      	add	r3, pc, #492	; (adr r3, 8008ca8 <__ieee754_pow+0x6e0>)
 8008abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac0:	4604      	mov	r4, r0
 8008ac2:	460d      	mov	r5, r1
 8008ac4:	f7f7 fd00 	bl	80004c8 <__aeabi_dmul>
 8008ac8:	a379      	add	r3, pc, #484	; (adr r3, 8008cb0 <__ieee754_pow+0x6e8>)
 8008aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ace:	f7f7 fb45 	bl	800015c <__adddf3>
 8008ad2:	4622      	mov	r2, r4
 8008ad4:	462b      	mov	r3, r5
 8008ad6:	f7f7 fcf7 	bl	80004c8 <__aeabi_dmul>
 8008ada:	a377      	add	r3, pc, #476	; (adr r3, 8008cb8 <__ieee754_pow+0x6f0>)
 8008adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae0:	f7f7 fb3c 	bl	800015c <__adddf3>
 8008ae4:	4622      	mov	r2, r4
 8008ae6:	462b      	mov	r3, r5
 8008ae8:	f7f7 fcee 	bl	80004c8 <__aeabi_dmul>
 8008aec:	a374      	add	r3, pc, #464	; (adr r3, 8008cc0 <__ieee754_pow+0x6f8>)
 8008aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af2:	f7f7 fb33 	bl	800015c <__adddf3>
 8008af6:	4622      	mov	r2, r4
 8008af8:	462b      	mov	r3, r5
 8008afa:	f7f7 fce5 	bl	80004c8 <__aeabi_dmul>
 8008afe:	a372      	add	r3, pc, #456	; (adr r3, 8008cc8 <__ieee754_pow+0x700>)
 8008b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b04:	f7f7 fb2a 	bl	800015c <__adddf3>
 8008b08:	4622      	mov	r2, r4
 8008b0a:	462b      	mov	r3, r5
 8008b0c:	f7f7 fcdc 	bl	80004c8 <__aeabi_dmul>
 8008b10:	a36f      	add	r3, pc, #444	; (adr r3, 8008cd0 <__ieee754_pow+0x708>)
 8008b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b16:	f7f7 fb21 	bl	800015c <__adddf3>
 8008b1a:	4622      	mov	r2, r4
 8008b1c:	4606      	mov	r6, r0
 8008b1e:	460f      	mov	r7, r1
 8008b20:	462b      	mov	r3, r5
 8008b22:	4620      	mov	r0, r4
 8008b24:	4629      	mov	r1, r5
 8008b26:	f7f7 fccf 	bl	80004c8 <__aeabi_dmul>
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	4630      	mov	r0, r6
 8008b30:	4639      	mov	r1, r7
 8008b32:	f7f7 fcc9 	bl	80004c8 <__aeabi_dmul>
 8008b36:	4604      	mov	r4, r0
 8008b38:	460d      	mov	r5, r1
 8008b3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b3e:	4642      	mov	r2, r8
 8008b40:	464b      	mov	r3, r9
 8008b42:	f7f7 fb0b 	bl	800015c <__adddf3>
 8008b46:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008b4a:	f7f7 fcbd 	bl	80004c8 <__aeabi_dmul>
 8008b4e:	4622      	mov	r2, r4
 8008b50:	462b      	mov	r3, r5
 8008b52:	f7f7 fb03 	bl	800015c <__adddf3>
 8008b56:	4642      	mov	r2, r8
 8008b58:	4606      	mov	r6, r0
 8008b5a:	460f      	mov	r7, r1
 8008b5c:	464b      	mov	r3, r9
 8008b5e:	4640      	mov	r0, r8
 8008b60:	4649      	mov	r1, r9
 8008b62:	f7f7 fcb1 	bl	80004c8 <__aeabi_dmul>
 8008b66:	2200      	movs	r2, #0
 8008b68:	4b67      	ldr	r3, [pc, #412]	; (8008d08 <__ieee754_pow+0x740>)
 8008b6a:	4682      	mov	sl, r0
 8008b6c:	468b      	mov	fp, r1
 8008b6e:	f7f7 faf5 	bl	800015c <__adddf3>
 8008b72:	4632      	mov	r2, r6
 8008b74:	463b      	mov	r3, r7
 8008b76:	f7f7 faf1 	bl	800015c <__adddf3>
 8008b7a:	9c04      	ldr	r4, [sp, #16]
 8008b7c:	460d      	mov	r5, r1
 8008b7e:	4622      	mov	r2, r4
 8008b80:	460b      	mov	r3, r1
 8008b82:	4640      	mov	r0, r8
 8008b84:	4649      	mov	r1, r9
 8008b86:	f7f7 fc9f 	bl	80004c8 <__aeabi_dmul>
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	4680      	mov	r8, r0
 8008b8e:	4689      	mov	r9, r1
 8008b90:	4620      	mov	r0, r4
 8008b92:	4629      	mov	r1, r5
 8008b94:	4b5c      	ldr	r3, [pc, #368]	; (8008d08 <__ieee754_pow+0x740>)
 8008b96:	f7f7 fadf 	bl	8000158 <__aeabi_dsub>
 8008b9a:	4652      	mov	r2, sl
 8008b9c:	465b      	mov	r3, fp
 8008b9e:	f7f7 fadb 	bl	8000158 <__aeabi_dsub>
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	4630      	mov	r0, r6
 8008ba8:	4639      	mov	r1, r7
 8008baa:	f7f7 fad5 	bl	8000158 <__aeabi_dsub>
 8008bae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008bb2:	f7f7 fc89 	bl	80004c8 <__aeabi_dmul>
 8008bb6:	4622      	mov	r2, r4
 8008bb8:	4606      	mov	r6, r0
 8008bba:	460f      	mov	r7, r1
 8008bbc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008bc0:	462b      	mov	r3, r5
 8008bc2:	f7f7 fc81 	bl	80004c8 <__aeabi_dmul>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	460b      	mov	r3, r1
 8008bca:	4630      	mov	r0, r6
 8008bcc:	4639      	mov	r1, r7
 8008bce:	f7f7 fac5 	bl	800015c <__adddf3>
 8008bd2:	4606      	mov	r6, r0
 8008bd4:	460f      	mov	r7, r1
 8008bd6:	4602      	mov	r2, r0
 8008bd8:	460b      	mov	r3, r1
 8008bda:	4640      	mov	r0, r8
 8008bdc:	4649      	mov	r1, r9
 8008bde:	f7f7 fabd 	bl	800015c <__adddf3>
 8008be2:	a33d      	add	r3, pc, #244	; (adr r3, 8008cd8 <__ieee754_pow+0x710>)
 8008be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be8:	9c04      	ldr	r4, [sp, #16]
 8008bea:	460d      	mov	r5, r1
 8008bec:	4620      	mov	r0, r4
 8008bee:	f7f7 fc6b 	bl	80004c8 <__aeabi_dmul>
 8008bf2:	4642      	mov	r2, r8
 8008bf4:	464b      	mov	r3, r9
 8008bf6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008bfa:	4620      	mov	r0, r4
 8008bfc:	4629      	mov	r1, r5
 8008bfe:	f7f7 faab 	bl	8000158 <__aeabi_dsub>
 8008c02:	4602      	mov	r2, r0
 8008c04:	460b      	mov	r3, r1
 8008c06:	4630      	mov	r0, r6
 8008c08:	4639      	mov	r1, r7
 8008c0a:	f7f7 faa5 	bl	8000158 <__aeabi_dsub>
 8008c0e:	a334      	add	r3, pc, #208	; (adr r3, 8008ce0 <__ieee754_pow+0x718>)
 8008c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c14:	f7f7 fc58 	bl	80004c8 <__aeabi_dmul>
 8008c18:	a333      	add	r3, pc, #204	; (adr r3, 8008ce8 <__ieee754_pow+0x720>)
 8008c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c1e:	4606      	mov	r6, r0
 8008c20:	460f      	mov	r7, r1
 8008c22:	4620      	mov	r0, r4
 8008c24:	4629      	mov	r1, r5
 8008c26:	f7f7 fc4f 	bl	80004c8 <__aeabi_dmul>
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	4630      	mov	r0, r6
 8008c30:	4639      	mov	r1, r7
 8008c32:	f7f7 fa93 	bl	800015c <__adddf3>
 8008c36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008c38:	4b34      	ldr	r3, [pc, #208]	; (8008d0c <__ieee754_pow+0x744>)
 8008c3a:	4413      	add	r3, r2
 8008c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c40:	f7f7 fa8c 	bl	800015c <__adddf3>
 8008c44:	4680      	mov	r8, r0
 8008c46:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008c48:	4689      	mov	r9, r1
 8008c4a:	f7f7 fbd3 	bl	80003f4 <__aeabi_i2d>
 8008c4e:	4604      	mov	r4, r0
 8008c50:	460d      	mov	r5, r1
 8008c52:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008c54:	4b2e      	ldr	r3, [pc, #184]	; (8008d10 <__ieee754_pow+0x748>)
 8008c56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c5a:	4413      	add	r3, r2
 8008c5c:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008c60:	4642      	mov	r2, r8
 8008c62:	464b      	mov	r3, r9
 8008c64:	f7f7 fa7a 	bl	800015c <__adddf3>
 8008c68:	4632      	mov	r2, r6
 8008c6a:	463b      	mov	r3, r7
 8008c6c:	f7f7 fa76 	bl	800015c <__adddf3>
 8008c70:	4622      	mov	r2, r4
 8008c72:	462b      	mov	r3, r5
 8008c74:	f7f7 fa72 	bl	800015c <__adddf3>
 8008c78:	f8dd a010 	ldr.w	sl, [sp, #16]
 8008c7c:	4622      	mov	r2, r4
 8008c7e:	462b      	mov	r3, r5
 8008c80:	4650      	mov	r0, sl
 8008c82:	468b      	mov	fp, r1
 8008c84:	f7f7 fa68 	bl	8000158 <__aeabi_dsub>
 8008c88:	4632      	mov	r2, r6
 8008c8a:	463b      	mov	r3, r7
 8008c8c:	f7f7 fa64 	bl	8000158 <__aeabi_dsub>
 8008c90:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c94:	f7f7 fa60 	bl	8000158 <__aeabi_dsub>
 8008c98:	4602      	mov	r2, r0
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	4640      	mov	r0, r8
 8008c9e:	4649      	mov	r1, r9
 8008ca0:	e608      	b.n	80088b4 <__ieee754_pow+0x2ec>
 8008ca2:	bf00      	nop
 8008ca4:	f3af 8000 	nop.w
 8008ca8:	4a454eef 	.word	0x4a454eef
 8008cac:	3fca7e28 	.word	0x3fca7e28
 8008cb0:	93c9db65 	.word	0x93c9db65
 8008cb4:	3fcd864a 	.word	0x3fcd864a
 8008cb8:	a91d4101 	.word	0xa91d4101
 8008cbc:	3fd17460 	.word	0x3fd17460
 8008cc0:	518f264d 	.word	0x518f264d
 8008cc4:	3fd55555 	.word	0x3fd55555
 8008cc8:	db6fabff 	.word	0xdb6fabff
 8008ccc:	3fdb6db6 	.word	0x3fdb6db6
 8008cd0:	33333303 	.word	0x33333303
 8008cd4:	3fe33333 	.word	0x3fe33333
 8008cd8:	e0000000 	.word	0xe0000000
 8008cdc:	3feec709 	.word	0x3feec709
 8008ce0:	dc3a03fd 	.word	0xdc3a03fd
 8008ce4:	3feec709 	.word	0x3feec709
 8008ce8:	145b01f5 	.word	0x145b01f5
 8008cec:	be3e2fe0 	.word	0xbe3e2fe0
 8008cf0:	7ff00000 	.word	0x7ff00000
 8008cf4:	43400000 	.word	0x43400000
 8008cf8:	0003988e 	.word	0x0003988e
 8008cfc:	000bb679 	.word	0x000bb679
 8008d00:	08009478 	.word	0x08009478
 8008d04:	3ff00000 	.word	0x3ff00000
 8008d08:	40080000 	.word	0x40080000
 8008d0c:	08009498 	.word	0x08009498
 8008d10:	08009488 	.word	0x08009488
 8008d14:	2601      	movs	r6, #1
 8008d16:	e667      	b.n	80089e8 <__ieee754_pow+0x420>
 8008d18:	a39d      	add	r3, pc, #628	; (adr r3, 8008f90 <__ieee754_pow+0x9c8>)
 8008d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d1e:	4640      	mov	r0, r8
 8008d20:	4649      	mov	r1, r9
 8008d22:	f7f7 fa1b 	bl	800015c <__adddf3>
 8008d26:	4622      	mov	r2, r4
 8008d28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d2c:	462b      	mov	r3, r5
 8008d2e:	4650      	mov	r0, sl
 8008d30:	4639      	mov	r1, r7
 8008d32:	f7f7 fa11 	bl	8000158 <__aeabi_dsub>
 8008d36:	4602      	mov	r2, r0
 8008d38:	460b      	mov	r3, r1
 8008d3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d3e:	f7f7 fe53 	bl	80009e8 <__aeabi_dcmpgt>
 8008d42:	2800      	cmp	r0, #0
 8008d44:	f47f ae01 	bne.w	800894a <__ieee754_pow+0x382>
 8008d48:	4aa5      	ldr	r2, [pc, #660]	; (8008fe0 <__ieee754_pow+0xa18>)
 8008d4a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	f340 8103 	ble.w	8008f5a <__ieee754_pow+0x992>
 8008d54:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008d58:	2000      	movs	r0, #0
 8008d5a:	151b      	asrs	r3, r3, #20
 8008d5c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008d60:	fa4a f303 	asr.w	r3, sl, r3
 8008d64:	4433      	add	r3, r6
 8008d66:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008d6a:	4f9e      	ldr	r7, [pc, #632]	; (8008fe4 <__ieee754_pow+0xa1c>)
 8008d6c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008d70:	4117      	asrs	r7, r2
 8008d72:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008d76:	ea23 0107 	bic.w	r1, r3, r7
 8008d7a:	f1c2 0214 	rsb	r2, r2, #20
 8008d7e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008d82:	460b      	mov	r3, r1
 8008d84:	fa4a fa02 	asr.w	sl, sl, r2
 8008d88:	2e00      	cmp	r6, #0
 8008d8a:	4602      	mov	r2, r0
 8008d8c:	4629      	mov	r1, r5
 8008d8e:	4620      	mov	r0, r4
 8008d90:	bfb8      	it	lt
 8008d92:	f1ca 0a00 	rsblt	sl, sl, #0
 8008d96:	f7f7 f9df 	bl	8000158 <__aeabi_dsub>
 8008d9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008da2:	2400      	movs	r4, #0
 8008da4:	4642      	mov	r2, r8
 8008da6:	464b      	mov	r3, r9
 8008da8:	f7f7 f9d8 	bl	800015c <__adddf3>
 8008dac:	a37a      	add	r3, pc, #488	; (adr r3, 8008f98 <__ieee754_pow+0x9d0>)
 8008dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db2:	4620      	mov	r0, r4
 8008db4:	460d      	mov	r5, r1
 8008db6:	f7f7 fb87 	bl	80004c8 <__aeabi_dmul>
 8008dba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008dbe:	4606      	mov	r6, r0
 8008dc0:	460f      	mov	r7, r1
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	4629      	mov	r1, r5
 8008dc6:	f7f7 f9c7 	bl	8000158 <__aeabi_dsub>
 8008dca:	4602      	mov	r2, r0
 8008dcc:	460b      	mov	r3, r1
 8008dce:	4640      	mov	r0, r8
 8008dd0:	4649      	mov	r1, r9
 8008dd2:	f7f7 f9c1 	bl	8000158 <__aeabi_dsub>
 8008dd6:	a372      	add	r3, pc, #456	; (adr r3, 8008fa0 <__ieee754_pow+0x9d8>)
 8008dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ddc:	f7f7 fb74 	bl	80004c8 <__aeabi_dmul>
 8008de0:	a371      	add	r3, pc, #452	; (adr r3, 8008fa8 <__ieee754_pow+0x9e0>)
 8008de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de6:	4680      	mov	r8, r0
 8008de8:	4689      	mov	r9, r1
 8008dea:	4620      	mov	r0, r4
 8008dec:	4629      	mov	r1, r5
 8008dee:	f7f7 fb6b 	bl	80004c8 <__aeabi_dmul>
 8008df2:	4602      	mov	r2, r0
 8008df4:	460b      	mov	r3, r1
 8008df6:	4640      	mov	r0, r8
 8008df8:	4649      	mov	r1, r9
 8008dfa:	f7f7 f9af 	bl	800015c <__adddf3>
 8008dfe:	4604      	mov	r4, r0
 8008e00:	460d      	mov	r5, r1
 8008e02:	4602      	mov	r2, r0
 8008e04:	460b      	mov	r3, r1
 8008e06:	4630      	mov	r0, r6
 8008e08:	4639      	mov	r1, r7
 8008e0a:	f7f7 f9a7 	bl	800015c <__adddf3>
 8008e0e:	4632      	mov	r2, r6
 8008e10:	463b      	mov	r3, r7
 8008e12:	4680      	mov	r8, r0
 8008e14:	4689      	mov	r9, r1
 8008e16:	f7f7 f99f 	bl	8000158 <__aeabi_dsub>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	4620      	mov	r0, r4
 8008e20:	4629      	mov	r1, r5
 8008e22:	f7f7 f999 	bl	8000158 <__aeabi_dsub>
 8008e26:	4642      	mov	r2, r8
 8008e28:	4606      	mov	r6, r0
 8008e2a:	460f      	mov	r7, r1
 8008e2c:	464b      	mov	r3, r9
 8008e2e:	4640      	mov	r0, r8
 8008e30:	4649      	mov	r1, r9
 8008e32:	f7f7 fb49 	bl	80004c8 <__aeabi_dmul>
 8008e36:	a35e      	add	r3, pc, #376	; (adr r3, 8008fb0 <__ieee754_pow+0x9e8>)
 8008e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e3c:	4604      	mov	r4, r0
 8008e3e:	460d      	mov	r5, r1
 8008e40:	f7f7 fb42 	bl	80004c8 <__aeabi_dmul>
 8008e44:	a35c      	add	r3, pc, #368	; (adr r3, 8008fb8 <__ieee754_pow+0x9f0>)
 8008e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e4a:	f7f7 f985 	bl	8000158 <__aeabi_dsub>
 8008e4e:	4622      	mov	r2, r4
 8008e50:	462b      	mov	r3, r5
 8008e52:	f7f7 fb39 	bl	80004c8 <__aeabi_dmul>
 8008e56:	a35a      	add	r3, pc, #360	; (adr r3, 8008fc0 <__ieee754_pow+0x9f8>)
 8008e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5c:	f7f7 f97e 	bl	800015c <__adddf3>
 8008e60:	4622      	mov	r2, r4
 8008e62:	462b      	mov	r3, r5
 8008e64:	f7f7 fb30 	bl	80004c8 <__aeabi_dmul>
 8008e68:	a357      	add	r3, pc, #348	; (adr r3, 8008fc8 <__ieee754_pow+0xa00>)
 8008e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e6e:	f7f7 f973 	bl	8000158 <__aeabi_dsub>
 8008e72:	4622      	mov	r2, r4
 8008e74:	462b      	mov	r3, r5
 8008e76:	f7f7 fb27 	bl	80004c8 <__aeabi_dmul>
 8008e7a:	a355      	add	r3, pc, #340	; (adr r3, 8008fd0 <__ieee754_pow+0xa08>)
 8008e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e80:	f7f7 f96c 	bl	800015c <__adddf3>
 8008e84:	4622      	mov	r2, r4
 8008e86:	462b      	mov	r3, r5
 8008e88:	f7f7 fb1e 	bl	80004c8 <__aeabi_dmul>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	460b      	mov	r3, r1
 8008e90:	4640      	mov	r0, r8
 8008e92:	4649      	mov	r1, r9
 8008e94:	f7f7 f960 	bl	8000158 <__aeabi_dsub>
 8008e98:	4604      	mov	r4, r0
 8008e9a:	460d      	mov	r5, r1
 8008e9c:	4602      	mov	r2, r0
 8008e9e:	460b      	mov	r3, r1
 8008ea0:	4640      	mov	r0, r8
 8008ea2:	4649      	mov	r1, r9
 8008ea4:	f7f7 fb10 	bl	80004c8 <__aeabi_dmul>
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008eae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008eb2:	4620      	mov	r0, r4
 8008eb4:	4629      	mov	r1, r5
 8008eb6:	f7f7 f94f 	bl	8000158 <__aeabi_dsub>
 8008eba:	4602      	mov	r2, r0
 8008ebc:	460b      	mov	r3, r1
 8008ebe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ec2:	f7f7 fc2b 	bl	800071c <__aeabi_ddiv>
 8008ec6:	4632      	mov	r2, r6
 8008ec8:	4604      	mov	r4, r0
 8008eca:	460d      	mov	r5, r1
 8008ecc:	463b      	mov	r3, r7
 8008ece:	4640      	mov	r0, r8
 8008ed0:	4649      	mov	r1, r9
 8008ed2:	f7f7 faf9 	bl	80004c8 <__aeabi_dmul>
 8008ed6:	4632      	mov	r2, r6
 8008ed8:	463b      	mov	r3, r7
 8008eda:	f7f7 f93f 	bl	800015c <__adddf3>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	4620      	mov	r0, r4
 8008ee4:	4629      	mov	r1, r5
 8008ee6:	f7f7 f937 	bl	8000158 <__aeabi_dsub>
 8008eea:	4642      	mov	r2, r8
 8008eec:	464b      	mov	r3, r9
 8008eee:	f7f7 f933 	bl	8000158 <__aeabi_dsub>
 8008ef2:	4602      	mov	r2, r0
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	2000      	movs	r0, #0
 8008ef8:	493b      	ldr	r1, [pc, #236]	; (8008fe8 <__ieee754_pow+0xa20>)
 8008efa:	f7f7 f92d 	bl	8000158 <__aeabi_dsub>
 8008efe:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8008f02:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008f06:	da2b      	bge.n	8008f60 <__ieee754_pow+0x998>
 8008f08:	4652      	mov	r2, sl
 8008f0a:	f000 f9b9 	bl	8009280 <scalbn>
 8008f0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f12:	f7ff bbf2 	b.w	80086fa <__ieee754_pow+0x132>
 8008f16:	4b35      	ldr	r3, [pc, #212]	; (8008fec <__ieee754_pow+0xa24>)
 8008f18:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8008f1c:	429f      	cmp	r7, r3
 8008f1e:	f77f af13 	ble.w	8008d48 <__ieee754_pow+0x780>
 8008f22:	4b33      	ldr	r3, [pc, #204]	; (8008ff0 <__ieee754_pow+0xa28>)
 8008f24:	440b      	add	r3, r1
 8008f26:	4303      	orrs	r3, r0
 8008f28:	d00b      	beq.n	8008f42 <__ieee754_pow+0x97a>
 8008f2a:	a32b      	add	r3, pc, #172	; (adr r3, 8008fd8 <__ieee754_pow+0xa10>)
 8008f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f34:	f7f7 fac8 	bl	80004c8 <__aeabi_dmul>
 8008f38:	a327      	add	r3, pc, #156	; (adr r3, 8008fd8 <__ieee754_pow+0xa10>)
 8008f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f3e:	f7ff bbdc 	b.w	80086fa <__ieee754_pow+0x132>
 8008f42:	4622      	mov	r2, r4
 8008f44:	462b      	mov	r3, r5
 8008f46:	f7f7 f907 	bl	8000158 <__aeabi_dsub>
 8008f4a:	4642      	mov	r2, r8
 8008f4c:	464b      	mov	r3, r9
 8008f4e:	f7f7 fd41 	bl	80009d4 <__aeabi_dcmpge>
 8008f52:	2800      	cmp	r0, #0
 8008f54:	f43f aef8 	beq.w	8008d48 <__ieee754_pow+0x780>
 8008f58:	e7e7      	b.n	8008f2a <__ieee754_pow+0x962>
 8008f5a:	f04f 0a00 	mov.w	sl, #0
 8008f5e:	e71e      	b.n	8008d9e <__ieee754_pow+0x7d6>
 8008f60:	4621      	mov	r1, r4
 8008f62:	e7d4      	b.n	8008f0e <__ieee754_pow+0x946>
 8008f64:	f04f 0b00 	mov.w	fp, #0
 8008f68:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008fe8 <__ieee754_pow+0xa20>
 8008f6c:	f7ff bbb0 	b.w	80086d0 <__ieee754_pow+0x108>
 8008f70:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8008f74:	f7ff bbac 	b.w	80086d0 <__ieee754_pow+0x108>
 8008f78:	4638      	mov	r0, r7
 8008f7a:	4641      	mov	r1, r8
 8008f7c:	f7ff bbbf 	b.w	80086fe <__ieee754_pow+0x136>
 8008f80:	9200      	str	r2, [sp, #0]
 8008f82:	f7ff bb7f 	b.w	8008684 <__ieee754_pow+0xbc>
 8008f86:	2300      	movs	r3, #0
 8008f88:	f7ff bb69 	b.w	800865e <__ieee754_pow+0x96>
 8008f8c:	f3af 8000 	nop.w
 8008f90:	652b82fe 	.word	0x652b82fe
 8008f94:	3c971547 	.word	0x3c971547
 8008f98:	00000000 	.word	0x00000000
 8008f9c:	3fe62e43 	.word	0x3fe62e43
 8008fa0:	fefa39ef 	.word	0xfefa39ef
 8008fa4:	3fe62e42 	.word	0x3fe62e42
 8008fa8:	0ca86c39 	.word	0x0ca86c39
 8008fac:	be205c61 	.word	0xbe205c61
 8008fb0:	72bea4d0 	.word	0x72bea4d0
 8008fb4:	3e663769 	.word	0x3e663769
 8008fb8:	c5d26bf1 	.word	0xc5d26bf1
 8008fbc:	3ebbbd41 	.word	0x3ebbbd41
 8008fc0:	af25de2c 	.word	0xaf25de2c
 8008fc4:	3f11566a 	.word	0x3f11566a
 8008fc8:	16bebd93 	.word	0x16bebd93
 8008fcc:	3f66c16c 	.word	0x3f66c16c
 8008fd0:	5555553e 	.word	0x5555553e
 8008fd4:	3fc55555 	.word	0x3fc55555
 8008fd8:	c2f8f359 	.word	0xc2f8f359
 8008fdc:	01a56e1f 	.word	0x01a56e1f
 8008fe0:	3fe00000 	.word	0x3fe00000
 8008fe4:	000fffff 	.word	0x000fffff
 8008fe8:	3ff00000 	.word	0x3ff00000
 8008fec:	4090cbff 	.word	0x4090cbff
 8008ff0:	3f6f3400 	.word	0x3f6f3400

08008ff4 <__ieee754_sqrt>:
 8008ff4:	f8df c150 	ldr.w	ip, [pc, #336]	; 8009148 <__ieee754_sqrt+0x154>
 8008ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ffc:	ea3c 0c01 	bics.w	ip, ip, r1
 8009000:	460b      	mov	r3, r1
 8009002:	4606      	mov	r6, r0
 8009004:	460d      	mov	r5, r1
 8009006:	460a      	mov	r2, r1
 8009008:	4607      	mov	r7, r0
 800900a:	4604      	mov	r4, r0
 800900c:	d10e      	bne.n	800902c <__ieee754_sqrt+0x38>
 800900e:	4602      	mov	r2, r0
 8009010:	f7f7 fa5a 	bl	80004c8 <__aeabi_dmul>
 8009014:	4602      	mov	r2, r0
 8009016:	460b      	mov	r3, r1
 8009018:	4630      	mov	r0, r6
 800901a:	4629      	mov	r1, r5
 800901c:	f7f7 f89e 	bl	800015c <__adddf3>
 8009020:	4606      	mov	r6, r0
 8009022:	460d      	mov	r5, r1
 8009024:	4630      	mov	r0, r6
 8009026:	4629      	mov	r1, r5
 8009028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800902c:	2900      	cmp	r1, #0
 800902e:	dc0d      	bgt.n	800904c <__ieee754_sqrt+0x58>
 8009030:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8009034:	ea5c 0707 	orrs.w	r7, ip, r7
 8009038:	d0f4      	beq.n	8009024 <__ieee754_sqrt+0x30>
 800903a:	b139      	cbz	r1, 800904c <__ieee754_sqrt+0x58>
 800903c:	4602      	mov	r2, r0
 800903e:	f7f7 f88b 	bl	8000158 <__aeabi_dsub>
 8009042:	4602      	mov	r2, r0
 8009044:	460b      	mov	r3, r1
 8009046:	f7f7 fb69 	bl	800071c <__aeabi_ddiv>
 800904a:	e7e9      	b.n	8009020 <__ieee754_sqrt+0x2c>
 800904c:	1512      	asrs	r2, r2, #20
 800904e:	d074      	beq.n	800913a <__ieee754_sqrt+0x146>
 8009050:	2000      	movs	r0, #0
 8009052:	07d5      	lsls	r5, r2, #31
 8009054:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009058:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800905c:	bf5e      	ittt	pl
 800905e:	0fe3      	lsrpl	r3, r4, #31
 8009060:	0064      	lslpl	r4, r4, #1
 8009062:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 8009066:	0fe3      	lsrs	r3, r4, #31
 8009068:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800906c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8009070:	2516      	movs	r5, #22
 8009072:	4601      	mov	r1, r0
 8009074:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009078:	1076      	asrs	r6, r6, #1
 800907a:	0064      	lsls	r4, r4, #1
 800907c:	188f      	adds	r7, r1, r2
 800907e:	429f      	cmp	r7, r3
 8009080:	bfde      	ittt	le
 8009082:	1bdb      	suble	r3, r3, r7
 8009084:	18b9      	addle	r1, r7, r2
 8009086:	1880      	addle	r0, r0, r2
 8009088:	005b      	lsls	r3, r3, #1
 800908a:	3d01      	subs	r5, #1
 800908c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8009090:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009094:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8009098:	d1f0      	bne.n	800907c <__ieee754_sqrt+0x88>
 800909a:	462a      	mov	r2, r5
 800909c:	f04f 0e20 	mov.w	lr, #32
 80090a0:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 80090a4:	428b      	cmp	r3, r1
 80090a6:	eb07 0c05 	add.w	ip, r7, r5
 80090aa:	dc02      	bgt.n	80090b2 <__ieee754_sqrt+0xbe>
 80090ac:	d113      	bne.n	80090d6 <__ieee754_sqrt+0xe2>
 80090ae:	45a4      	cmp	ip, r4
 80090b0:	d811      	bhi.n	80090d6 <__ieee754_sqrt+0xe2>
 80090b2:	f1bc 0f00 	cmp.w	ip, #0
 80090b6:	eb0c 0507 	add.w	r5, ip, r7
 80090ba:	da43      	bge.n	8009144 <__ieee754_sqrt+0x150>
 80090bc:	2d00      	cmp	r5, #0
 80090be:	db41      	blt.n	8009144 <__ieee754_sqrt+0x150>
 80090c0:	f101 0801 	add.w	r8, r1, #1
 80090c4:	1a5b      	subs	r3, r3, r1
 80090c6:	4641      	mov	r1, r8
 80090c8:	45a4      	cmp	ip, r4
 80090ca:	bf88      	it	hi
 80090cc:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80090d0:	eba4 040c 	sub.w	r4, r4, ip
 80090d4:	443a      	add	r2, r7
 80090d6:	005b      	lsls	r3, r3, #1
 80090d8:	f1be 0e01 	subs.w	lr, lr, #1
 80090dc:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80090e0:	ea4f 0757 	mov.w	r7, r7, lsr #1
 80090e4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80090e8:	d1dc      	bne.n	80090a4 <__ieee754_sqrt+0xb0>
 80090ea:	4323      	orrs	r3, r4
 80090ec:	d006      	beq.n	80090fc <__ieee754_sqrt+0x108>
 80090ee:	1c54      	adds	r4, r2, #1
 80090f0:	bf0b      	itete	eq
 80090f2:	4672      	moveq	r2, lr
 80090f4:	3201      	addne	r2, #1
 80090f6:	3001      	addeq	r0, #1
 80090f8:	f022 0201 	bicne.w	r2, r2, #1
 80090fc:	1043      	asrs	r3, r0, #1
 80090fe:	07c1      	lsls	r1, r0, #31
 8009100:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009104:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009108:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800910c:	bf48      	it	mi
 800910e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009112:	4610      	mov	r0, r2
 8009114:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8009118:	e782      	b.n	8009020 <__ieee754_sqrt+0x2c>
 800911a:	0ae3      	lsrs	r3, r4, #11
 800911c:	3915      	subs	r1, #21
 800911e:	0564      	lsls	r4, r4, #21
 8009120:	2b00      	cmp	r3, #0
 8009122:	d0fa      	beq.n	800911a <__ieee754_sqrt+0x126>
 8009124:	02de      	lsls	r6, r3, #11
 8009126:	d50a      	bpl.n	800913e <__ieee754_sqrt+0x14a>
 8009128:	f1c2 0020 	rsb	r0, r2, #32
 800912c:	fa24 f000 	lsr.w	r0, r4, r0
 8009130:	1e55      	subs	r5, r2, #1
 8009132:	4094      	lsls	r4, r2
 8009134:	4303      	orrs	r3, r0
 8009136:	1b4a      	subs	r2, r1, r5
 8009138:	e78a      	b.n	8009050 <__ieee754_sqrt+0x5c>
 800913a:	4611      	mov	r1, r2
 800913c:	e7f0      	b.n	8009120 <__ieee754_sqrt+0x12c>
 800913e:	005b      	lsls	r3, r3, #1
 8009140:	3201      	adds	r2, #1
 8009142:	e7ef      	b.n	8009124 <__ieee754_sqrt+0x130>
 8009144:	4688      	mov	r8, r1
 8009146:	e7bd      	b.n	80090c4 <__ieee754_sqrt+0xd0>
 8009148:	7ff00000 	.word	0x7ff00000

0800914c <fabs>:
 800914c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009150:	4770      	bx	lr

08009152 <finite>:
 8009152:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8009156:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800915a:	0fc0      	lsrs	r0, r0, #31
 800915c:	4770      	bx	lr
	...

08009160 <nan>:
 8009160:	2000      	movs	r0, #0
 8009162:	4901      	ldr	r1, [pc, #4]	; (8009168 <nan+0x8>)
 8009164:	4770      	bx	lr
 8009166:	bf00      	nop
 8009168:	7ff80000 	.word	0x7ff80000

0800916c <rint>:
 800916c:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 8009170:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009172:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 8009176:	2f13      	cmp	r7, #19
 8009178:	4602      	mov	r2, r0
 800917a:	460b      	mov	r3, r1
 800917c:	460c      	mov	r4, r1
 800917e:	4605      	mov	r5, r0
 8009180:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 8009184:	dc59      	bgt.n	800923a <rint+0xce>
 8009186:	2f00      	cmp	r7, #0
 8009188:	da2a      	bge.n	80091e0 <rint+0x74>
 800918a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800918e:	4301      	orrs	r1, r0
 8009190:	d022      	beq.n	80091d8 <rint+0x6c>
 8009192:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8009196:	4301      	orrs	r1, r0
 8009198:	424d      	negs	r5, r1
 800919a:	430d      	orrs	r5, r1
 800919c:	4936      	ldr	r1, [pc, #216]	; (8009278 <rint+0x10c>)
 800919e:	0c5c      	lsrs	r4, r3, #17
 80091a0:	0b2d      	lsrs	r5, r5, #12
 80091a2:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 80091a6:	0464      	lsls	r4, r4, #17
 80091a8:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80091ac:	ea45 0304 	orr.w	r3, r5, r4
 80091b0:	e9d1 4500 	ldrd	r4, r5, [r1]
 80091b4:	4620      	mov	r0, r4
 80091b6:	4629      	mov	r1, r5
 80091b8:	f7f6 ffd0 	bl	800015c <__adddf3>
 80091bc:	e9cd 0100 	strd	r0, r1, [sp]
 80091c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80091c4:	462b      	mov	r3, r5
 80091c6:	4622      	mov	r2, r4
 80091c8:	f7f6 ffc6 	bl	8000158 <__aeabi_dsub>
 80091cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80091d0:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 80091d4:	4602      	mov	r2, r0
 80091d6:	460b      	mov	r3, r1
 80091d8:	4610      	mov	r0, r2
 80091da:	4619      	mov	r1, r3
 80091dc:	b003      	add	sp, #12
 80091de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091e0:	4926      	ldr	r1, [pc, #152]	; (800927c <rint+0x110>)
 80091e2:	4139      	asrs	r1, r7
 80091e4:	ea03 0001 	and.w	r0, r3, r1
 80091e8:	4310      	orrs	r0, r2
 80091ea:	d0f5      	beq.n	80091d8 <rint+0x6c>
 80091ec:	084b      	lsrs	r3, r1, #1
 80091ee:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 80091f2:	ea52 0501 	orrs.w	r5, r2, r1
 80091f6:	d00c      	beq.n	8009212 <rint+0xa6>
 80091f8:	ea24 0303 	bic.w	r3, r4, r3
 80091fc:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8009200:	2f13      	cmp	r7, #19
 8009202:	bf0c      	ite	eq
 8009204:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 8009208:	2500      	movne	r5, #0
 800920a:	fa44 f707 	asr.w	r7, r4, r7
 800920e:	ea43 0407 	orr.w	r4, r3, r7
 8009212:	4919      	ldr	r1, [pc, #100]	; (8009278 <rint+0x10c>)
 8009214:	4623      	mov	r3, r4
 8009216:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800921a:	462a      	mov	r2, r5
 800921c:	e9d6 4500 	ldrd	r4, r5, [r6]
 8009220:	4620      	mov	r0, r4
 8009222:	4629      	mov	r1, r5
 8009224:	f7f6 ff9a 	bl	800015c <__adddf3>
 8009228:	e9cd 0100 	strd	r0, r1, [sp]
 800922c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009230:	4622      	mov	r2, r4
 8009232:	462b      	mov	r3, r5
 8009234:	f7f6 ff90 	bl	8000158 <__aeabi_dsub>
 8009238:	e7cc      	b.n	80091d4 <rint+0x68>
 800923a:	2f33      	cmp	r7, #51	; 0x33
 800923c:	dd05      	ble.n	800924a <rint+0xde>
 800923e:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8009242:	d1c9      	bne.n	80091d8 <rint+0x6c>
 8009244:	f7f6 ff8a 	bl	800015c <__adddf3>
 8009248:	e7c4      	b.n	80091d4 <rint+0x68>
 800924a:	f04f 31ff 	mov.w	r1, #4294967295
 800924e:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 8009252:	fa21 f10c 	lsr.w	r1, r1, ip
 8009256:	4208      	tst	r0, r1
 8009258:	d0be      	beq.n	80091d8 <rint+0x6c>
 800925a:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 800925e:	bf18      	it	ne
 8009260:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 8009264:	ea4f 0351 	mov.w	r3, r1, lsr #1
 8009268:	bf1e      	ittt	ne
 800926a:	ea20 0303 	bicne.w	r3, r0, r3
 800926e:	fa45 fc0c 	asrne.w	ip, r5, ip
 8009272:	ea43 050c 	orrne.w	r5, r3, ip
 8009276:	e7cc      	b.n	8009212 <rint+0xa6>
 8009278:	080094a8 	.word	0x080094a8
 800927c:	000fffff 	.word	0x000fffff

08009280 <scalbn>:
 8009280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009282:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8009286:	4604      	mov	r4, r0
 8009288:	460d      	mov	r5, r1
 800928a:	4617      	mov	r7, r2
 800928c:	460b      	mov	r3, r1
 800928e:	b996      	cbnz	r6, 80092b6 <scalbn+0x36>
 8009290:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009294:	4303      	orrs	r3, r0
 8009296:	d039      	beq.n	800930c <scalbn+0x8c>
 8009298:	4b35      	ldr	r3, [pc, #212]	; (8009370 <scalbn+0xf0>)
 800929a:	2200      	movs	r2, #0
 800929c:	f7f7 f914 	bl	80004c8 <__aeabi_dmul>
 80092a0:	4b34      	ldr	r3, [pc, #208]	; (8009374 <scalbn+0xf4>)
 80092a2:	4604      	mov	r4, r0
 80092a4:	429f      	cmp	r7, r3
 80092a6:	460d      	mov	r5, r1
 80092a8:	da0f      	bge.n	80092ca <scalbn+0x4a>
 80092aa:	a32d      	add	r3, pc, #180	; (adr r3, 8009360 <scalbn+0xe0>)
 80092ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b0:	f7f7 f90a 	bl	80004c8 <__aeabi_dmul>
 80092b4:	e006      	b.n	80092c4 <scalbn+0x44>
 80092b6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80092ba:	4296      	cmp	r6, r2
 80092bc:	d10a      	bne.n	80092d4 <scalbn+0x54>
 80092be:	4602      	mov	r2, r0
 80092c0:	f7f6 ff4c 	bl	800015c <__adddf3>
 80092c4:	4604      	mov	r4, r0
 80092c6:	460d      	mov	r5, r1
 80092c8:	e020      	b.n	800930c <scalbn+0x8c>
 80092ca:	460b      	mov	r3, r1
 80092cc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80092d0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 80092d4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80092d8:	19b9      	adds	r1, r7, r6
 80092da:	4291      	cmp	r1, r2
 80092dc:	dd0e      	ble.n	80092fc <scalbn+0x7c>
 80092de:	a322      	add	r3, pc, #136	; (adr r3, 8009368 <scalbn+0xe8>)
 80092e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e4:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80092e8:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80092ec:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80092f0:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80092f4:	4820      	ldr	r0, [pc, #128]	; (8009378 <scalbn+0xf8>)
 80092f6:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80092fa:	e7d9      	b.n	80092b0 <scalbn+0x30>
 80092fc:	2900      	cmp	r1, #0
 80092fe:	dd08      	ble.n	8009312 <scalbn+0x92>
 8009300:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009304:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009308:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800930c:	4620      	mov	r0, r4
 800930e:	4629      	mov	r1, r5
 8009310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009312:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8009316:	da16      	bge.n	8009346 <scalbn+0xc6>
 8009318:	f24c 3350 	movw	r3, #50000	; 0xc350
 800931c:	429f      	cmp	r7, r3
 800931e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8009322:	dd08      	ble.n	8009336 <scalbn+0xb6>
 8009324:	4c15      	ldr	r4, [pc, #84]	; (800937c <scalbn+0xfc>)
 8009326:	4814      	ldr	r0, [pc, #80]	; (8009378 <scalbn+0xf8>)
 8009328:	f363 74df 	bfi	r4, r3, #31, #1
 800932c:	a30e      	add	r3, pc, #56	; (adr r3, 8009368 <scalbn+0xe8>)
 800932e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009332:	4621      	mov	r1, r4
 8009334:	e7bc      	b.n	80092b0 <scalbn+0x30>
 8009336:	4c12      	ldr	r4, [pc, #72]	; (8009380 <scalbn+0x100>)
 8009338:	4812      	ldr	r0, [pc, #72]	; (8009384 <scalbn+0x104>)
 800933a:	f363 74df 	bfi	r4, r3, #31, #1
 800933e:	a308      	add	r3, pc, #32	; (adr r3, 8009360 <scalbn+0xe0>)
 8009340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009344:	e7f5      	b.n	8009332 <scalbn+0xb2>
 8009346:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800934a:	3136      	adds	r1, #54	; 0x36
 800934c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009350:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8009354:	4620      	mov	r0, r4
 8009356:	4629      	mov	r1, r5
 8009358:	2200      	movs	r2, #0
 800935a:	4b0b      	ldr	r3, [pc, #44]	; (8009388 <scalbn+0x108>)
 800935c:	e7a8      	b.n	80092b0 <scalbn+0x30>
 800935e:	bf00      	nop
 8009360:	c2f8f359 	.word	0xc2f8f359
 8009364:	01a56e1f 	.word	0x01a56e1f
 8009368:	8800759c 	.word	0x8800759c
 800936c:	7e37e43c 	.word	0x7e37e43c
 8009370:	43500000 	.word	0x43500000
 8009374:	ffff3cb0 	.word	0xffff3cb0
 8009378:	8800759c 	.word	0x8800759c
 800937c:	7e37e43c 	.word	0x7e37e43c
 8009380:	01a56e1f 	.word	0x01a56e1f
 8009384:	c2f8f359 	.word	0xc2f8f359
 8009388:	3c900000 	.word	0x3c900000

0800938c <_init>:
 800938c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800938e:	bf00      	nop
 8009390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009392:	bc08      	pop	{r3}
 8009394:	469e      	mov	lr, r3
 8009396:	4770      	bx	lr

08009398 <_fini>:
 8009398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800939a:	bf00      	nop
 800939c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800939e:	bc08      	pop	{r3}
 80093a0:	469e      	mov	lr, r3
 80093a2:	4770      	bx	lr
